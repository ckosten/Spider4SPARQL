SELECT count( *) FROM singer AS T1        
SELECT T1.Name, T1.Country, T1.Age FROM singer AS T1     ORDER BY T1.Age DESC   
SELECT avg( T1.Age), min( T1.Age), max( T1.Age) FROM singer AS T1 WHERE T1.Country = 'France'       
SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1    ORDER BY T1.Age ASC LIMIT 1    
SELECT DISTINCT T1.Country FROM singer AS T1 WHERE T1.Age > 20       
SELECT T1.Country, count( *) FROM singer AS T1  GROUP BY T1.Country      
SELECT T1.Song_Name FROM singer AS T1 WHERE T1.Age > (SELECT avg( T22.Age) FROM singer AS T22        )       
SELECT T1.Location, T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000       
SELECT avg( T1.Capacity), max( T1.Capacity) FROM stadium AS T1        
SELECT T1.Name, T1.Capacity FROM stadium AS T1    ORDER BY T1.Average DESC LIMIT 1    
SELECT count( *) FROM concert AS T1 WHERE T1.Year = '2014' or T1.Year = '2015'       
SELECT T1.Name, count( *) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T1.Name      
SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year >= '2014' GROUP BY T2.Stadium_ID  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Year FROM concert AS T1  GROUP BY T1.Year  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Name FROM stadium AS T1 WHERE T1.Stadium_ID NOT IN (SELECT T22.Stadium_ID FROM concert AS T22        )       
SELECT T1.Country FROM singer AS T1 WHERE T1.Age > 40     INTERSECT SELECT T2.Country FROM singer AS T2 WHERE T2.Age < 30         
SELECT T1.Name FROM stadium AS T1        EXCEPT SELECT T2.Name FROM stadium AS T2 JOIN concert AS T3 ON T2.Stadium_ID = T3.Stadium_ID WHERE T3.Year = '2014'       
SELECT T1.concert_Name, T1.Theme, count( *) FROM concert AS T1 JOIN singer_in_concert AS T13 ON T1.concert_ID = T13.concert_ID  GROUP BY T1.concert_ID      
SELECT T1.Name, count( *) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID  GROUP BY T1.Name      
SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014'       
SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'       
SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014'     INTERSECT SELECT T3.Name, T3.Location FROM stadium AS T3 JOIN concert AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Year = '2015'         
SELECT count( *) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID    ORDER BY T2.Capacity DESC LIMIT 1    
SELECT count( *) FROM pets AS T1 WHERE T1.weight > 10       
SELECT T1.weight FROM pets AS T1    ORDER BY T1.pet_age ASC LIMIT 1    
SELECT max( T1.weight), T1.PetType FROM pets AS T1  GROUP BY T1.PetType      
SELECT count( *) FROM has_pet AS T13 JOIN student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20       
SELECT count( *) FROM pets AS T1 JOIN has_pet AS T13 ON T1.PetID = T13.PetID JOIN student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog'       
SELECT DISTINCT count(DISTINCT T1.PetType) FROM pets AS T1        
SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID JOIN pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' or T3.PetType = 'dog'       
SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID JOIN pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'     INTERSECT SELECT T4.Fname FROM student AS T4 JOIN has_pet AS T5 ON T4.StuID = T5.StuID JOIN pets AS T6 ON T5.PetID = T6.PetID WHERE T6.PetType = 'dog'         
SELECT T1.Major, T1.Age FROM student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM student AS T22 JOIN has_pet AS T23 ON T22.StuID = T23.StuID JOIN pets AS T24 ON T23.PetID = T24.PetID WHERE T24.PetType = 'cat'       )       
SELECT T1.StuID FROM student AS T1        EXCEPT SELECT T2.StuID FROM student AS T2 JOIN has_pet AS T3 ON T2.StuID = T3.StuID JOIN pets AS T4 ON T3.PetID = T4.PetID WHERE T4.PetType = 'cat'       
SELECT T1.Fname, T1.Age FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID JOIN pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' and T1.StuID NOT IN (SELECT T24.StuID FROM student AS T24 JOIN has_pet AS T25 ON T24.StuID = T25.StuID JOIN pets AS T26 ON T25.PetID = T26.PetID WHERE T26.PetType = 'cat'       )       
SELECT T1.PetType, T1.weight FROM pets AS T1    ORDER BY T1.pet_age ASC LIMIT 1    
SELECT T1.PetID, T1.weight FROM pets AS T1 WHERE T1.pet_age > 1       
SELECT avg( T1.pet_age), max( T1.pet_age), T1.PetType FROM pets AS T1  GROUP BY T1.PetType      
SELECT avg( T1.weight), T1.PetType FROM pets AS T1  GROUP BY T1.PetType      
SELECT DISTINCT T1.Fname, T1.Age FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID        
SELECT T1.PetID FROM has_pet AS T1 JOIN student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith'       
SELECT count( *), T2.StuID FROM has_pet AS T13 JOIN student AS T2 ON T13.StuID = T2.StuID  GROUP BY T2.StuID      
SELECT T1.Fname, T1.Sex FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.StuID HAVING count( *) > 1     
SELECT T1.LName FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID JOIN pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3 and T3.PetType = 'cat'       
SELECT avg( T1.Age) FROM student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM student AS T22 JOIN has_pet AS T23 ON T22.StuID = T23.StuID        )       
SELECT count( *) FROM continents AS T1        
SELECT T1.ContId, T1.Continent, count( *) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent  GROUP BY T2.Continent      
SELECT count( *) FROM countries AS T1        
SELECT T1.FullName, T1.Id, count( *) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Maker      
SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1    
SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg( T23.Weight) FROM cars_data AS T23        )       
SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T14 ON T2.Model = T14.Model JOIN cars_data AS T3 ON T14.MakeId = T3.Id WHERE T3.Year = 1970       
SELECT T1.Make, T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = (SELECT min( T23.Year) FROM cars_data AS T23        )       
SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year > 1980       
SELECT T1.Continent, count( *) FROM continents AS T1 JOIN countries AS T13 ON T1.ContId = T13.Continent JOIN car_makers AS T2 ON T13.CountryId = T2.Country  GROUP BY T1.Continent      
SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T2.Country  ORDER BY count( *) DESC LIMIT 1    
SELECT count( *), T2.FullName, T2.Id FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id  GROUP BY T1.Maker      
SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)'       
SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france'       
SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa'       
SELECT avg( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4       
SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Cylinders = 4 and T1.Year = 1974   ORDER BY T1.Weight ASC LIMIT 1    
SELECT T1.Maker, T1.Model FROM model_list AS T1        
SELECT T1.CountryName, T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T2.Country HAVING count( *) >= 1     
SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > 150       
SELECT avg( T1.Weight), T1.Year FROM cars_data AS T1  GROUP BY T1.Year      
SELECT T1.CountryName FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent = 'europe' GROUP BY T1.Continent HAVING count( *) >= 3     
SELECT T1.Horsepower, T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3   ORDER BY T1.Horsepower DESC LIMIT 1    
SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1    
SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980       
SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'       
SELECT max( T1.Accelerate), T1.Cylinders FROM cars_data AS T1  GROUP BY T1.Cylinders      
SELECT T1.Model FROM car_names AS T1  GROUP BY T1.Model  ORDER BY count( *) DESC LIMIT 1    
SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4       
SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980       
SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company'       
SELECT T1.FullName, T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Maker HAVING count( *) > 3     
SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN car_makers AS T3 ON T1.Maker = T3.Id JOIN cars_data AS T4 ON T2.MakeId = T4.Id WHERE T3.FullName = 'General Motors' or T4.Weight > 3500       
SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight > 3000 and T1.Weight < 4000       
SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1    
SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'   ORDER BY T1.Accelerate ASC LIMIT 1    
SELECT count( *) FROM cars_data AS T1 WHERE T1.Accelerate > (SELECT T22.Accelerate FROM cars_data AS T22    ORDER BY T22.Horsepower DESC LIMIT 1    )       
SELECT count( *) FROM countries AS T1        
SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6       
SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4   ORDER BY T2.Horsepower DESC LIMIT 1    
SELECT T1.MakeId, T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT min( T23.Horsepower) FROM cars_data AS T23        ) and T2.Cylinders <= 3       
SELECT T1.MakeId, T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT min( T23.Horsepower) FROM cars_data AS T23        ) and T2.Cylinders < 4       
SELECT T1.MPG FROM cars_data AS T1 WHERE T1.Cylinders = 8 or T1.Year < 1980   ORDER BY T1.MPG DESC LIMIT 1    
SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN car_makers AS T4 ON T1.Maker = T4.Id WHERE T3.Weight < 3500 and T4.FullName != 'Ford Motor Company'       
SELECT T1.CountryName FROM countries AS T1        EXCEPT SELECT T2.CountryName FROM countries AS T2 JOIN car_makers AS T3 ON T2.CountryId = T3.Country        
SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Maker HAVING count( *) >= 2   INTERSECT SELECT T3.Id, T3.Maker FROM car_makers AS T3 JOIN model_list AS T4 ON T3.Id = T4.Maker  GROUP BY T4.Maker HAVING count( *) > 3       
SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T2.Country HAVING count( *) > 3    UNION SELECT T3.CountryId, T3.CountryName FROM countries AS T3 JOIN car_makers AS T4 ON T3.CountryId = T4.Country JOIN model_list AS T5 ON T4.Id = T5.Maker WHERE T5.Model = 'fiat'        
SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       
SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways'       
SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA'       
SELECT T1.AirportCode, T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony'       
SELECT count( *) FROM airlines AS T1        
SELECT count( *) FROM airports AS T1        
SELECT count( *) FROM flights AS T1        
SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL'       
SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'USA'       
SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton'       
SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode = 'AKO'       
SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = 'Aberdeen'       
SELECT count( *) FROM flights AS T1 WHERE T1.SourceAirport = 'APG'       
SELECT count( *) FROM flights AS T1 WHERE T1.DestAirport = 'ATO'       
SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       
SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       
SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Ashley' and T2.City = 'Aberdeen'       
SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways'       
SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T1.DestAirport = 'ASY'       
SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T1.SourceAirport = 'AHD'       
SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines'       
SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport  GROUP BY T2.DestAirport  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport  GROUP BY T2.DestAirport  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport  GROUP BY T2.DestAirport  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport  GROUP BY T2.DestAirport  ORDER BY count( *) ASC LIMIT 1    
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.Airline  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.uid  ORDER BY count( *) ASC LIMIT 1    
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD'       
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD'       
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'APG'     INTERSECT SELECT T3.Airline FROM airlines AS T3 JOIN flights AS T4 WHERE T4.SourceAirport = 'CVO'         
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'CVO'       EXCEPT SELECT T3.Airline FROM airlines AS T3 JOIN flights AS T4 WHERE T4.SourceAirport = 'APG'       
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.Airline HAVING count( *) > 10     
SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.Airline HAVING count( *) < 200     
SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines'       
SELECT T1.FlightNo FROM flights AS T1 WHERE T1.SourceAirport = 'APG'       
SELECT T1.FlightNo FROM flights AS T1 WHERE T1.DestAirport = 'APG'       
SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       
SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'       
SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' or T2.City = 'Abilene'       
SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode NOT IN (SELECT T22.SourceAirport FROM flights AS T22        )       
SELECT count( *) FROM employee AS T1        
SELECT T1.Name FROM employee AS T1     ORDER BY T1.Age ASC   
SELECT count( *), T1.City FROM employee AS T1  GROUP BY T1.City      
SELECT T1.City FROM employee AS T1 WHERE T1.Age < 30 GROUP BY T1.City HAVING count( *) > 1     
SELECT count( *), T1.Location FROM shop AS T1  GROUP BY T1.Location      
SELECT T1.Manager_name, T1.District FROM shop AS T1    ORDER BY T1.Number_products DESC LIMIT 1    
SELECT min( T1.Number_products), max( T1.Number_products) FROM shop AS T1        
SELECT T1.Name, T1.Location, T1.District FROM shop AS T1     ORDER BY T1.Number_products DESC   
SELECT T1.Name FROM shop AS T1 WHERE T1.Number_products > (SELECT avg( T22.Number_products) FROM shop AS T22        )       
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1    
SELECT T1.Name FROM employee AS T1 WHERE T1.Employee_ID NOT IN (SELECT T22.Employee_ID FROM evaluation AS T22        )       
SELECT T1.Name FROM shop AS T1 JOIN hiring AS T3 ON T1.Shop_ID = T3.Shop_ID  GROUP BY T3.Shop_ID  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Name FROM shop AS T1 WHERE T1.Shop_ID NOT IN (SELECT T22.Shop_ID FROM hiring AS T22        )       
SELECT count( *), T2.Name FROM hiring AS T13 JOIN shop AS T2 ON T13.Shop_ID = T2.Shop_ID  GROUP BY T2.Name      
SELECT sum( T1.Bonus) FROM evaluation AS T1        
SELECT * FROM hiring AS T1        
SELECT T1.District FROM shop AS T1 WHERE T1.Number_products < 3000     INTERSECT SELECT T2.District FROM shop AS T2 WHERE T2.Number_products > 10000         
SELECT DISTINCT count(DISTINCT T1.Location) FROM shop AS T1        
SELECT count( *) FROM documents AS T1        
SELECT T1.Document_ID, T1.Document_Name, T1.Document_Description FROM documents AS T1        
SELECT T1.Document_Name, T1.Template_ID FROM documents AS T1 WHERE T1.Document_Description like '%w%'       
SELECT T1.Document_ID, T1.Template_ID, T1.Document_Description FROM documents AS T1 WHERE T1.Document_Name = 'Robbin CV'       
SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM documents AS T1        
SELECT count( *) FROM documents AS T1 JOIN templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT'       
SELECT T1.Template_ID, count( *) FROM documents AS T1  GROUP BY T1.Template_ID      
SELECT T1.Template_ID, T2.Template_Type_Code FROM documents AS T1 JOIN templates AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_ID  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Template_ID FROM documents AS T1  GROUP BY T1.Template_ID HAVING count( *) > 1     
SELECT T1.Template_ID FROM templates AS T1        EXCEPT SELECT T2.Template_ID FROM documents AS T2        
SELECT count( *) FROM templates AS T1        
SELECT T1.Template_ID, T1.Version_Number, T1.Template_Type_Code FROM templates AS T1        
SELECT DISTINCT T1.Template_Type_Code FROM templates AS T1        
SELECT T1.Template_ID FROM templates AS T1 WHERE T1.Template_Type_Code = 'PP' or T1.Template_Type_Code = 'PPT'       
SELECT count( *) FROM templates AS T1 WHERE T1.Template_Type_Code = 'CV'       
SELECT T1.Version_Number, T1.Template_Type_Code FROM templates AS T1 WHERE T1.Version_Number > 5       
SELECT T1.Template_Type_Code, count( *) FROM templates AS T1  GROUP BY T1.Template_Type_Code      
SELECT T1.Template_Type_Code FROM templates AS T1  GROUP BY T1.Template_Type_Code  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Template_Type_Code FROM templates AS T1  GROUP BY T1.Template_Type_Code HAVING count( *) < 3     
SELECT min( T1.Version_Number), T1.Template_Type_Code FROM templates AS T1  GROUP BY T1.Template_Type_Code      
SELECT T1.Template_Type_Code FROM templates AS T1 JOIN documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base'       
SELECT T1.Document_Name FROM documents AS T1 JOIN templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'BK'       
SELECT T1.Template_Type_Code, count( *) FROM templates AS T1 JOIN documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code      
SELECT T1.Template_Type_Code FROM templates AS T1 JOIN documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Template_Type_Code FROM templates AS T1        EXCEPT SELECT T2.Template_Type_Code FROM templates AS T2 JOIN documents AS T3 ON T2.Template_ID = T3.Template_ID        
SELECT T1.Template_Type_Code, T1.Template_Type_Description FROM reference_template_types AS T1        
SELECT T1.Template_Type_Description FROM reference_template_types AS T1 WHERE T1.Template_Type_Code = 'AD'       
SELECT T1.Template_Type_Code FROM reference_template_types AS T1 WHERE T1.Template_Type_Description = 'Book'       
SELECT DISTINCT T1.Template_Type_Description FROM reference_template_types AS T1 JOIN templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code        
SELECT T1.Template_ID FROM templates AS T1 JOIN reference_template_types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation'       
SELECT count( *) FROM paragraphs AS T1        
SELECT count( *) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show'       
SELECT T1.Other_Details FROM paragraphs AS T1 WHERE T1.Paragraph_Text = 'Korea'       
SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM paragraphs AS T1 JOIN documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'       
SELECT T1.Paragraph_Text FROM paragraphs AS T1 JOIN documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews'       
SELECT T1.Document_ID, count( *) FROM paragraphs AS T1  GROUP BY T1.Document_ID   ORDER BY T1.Document_ID ASC   
SELECT T1.Document_ID, T2.Document_Name, count( *) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID      
SELECT T1.Document_ID FROM paragraphs AS T1  GROUP BY T1.Document_ID HAVING count( *) >= 2     
SELECT T1.Document_ID, T2.Document_Name FROM paragraphs AS T1 JOIN documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Document_ID FROM paragraphs AS T1  GROUP BY T1.Document_ID  ORDER BY count( *) ASC LIMIT 1    
SELECT T1.Document_ID FROM paragraphs AS T1  GROUP BY T1.Document_ID HAVING count( *) between 1 AND 2     
SELECT T1.Document_ID FROM paragraphs AS T1 WHERE T1.Paragraph_Text = 'Brazil'     INTERSECT SELECT T2.Document_ID FROM paragraphs AS T2 WHERE T2.Paragraph_Text = 'Ireland'         
SELECT count( *) FROM teacher AS T1        
SELECT T1.Name FROM teacher AS T1     ORDER BY T1.Age ASC   
SELECT T1.Age, T1.Hometown FROM teacher AS T1        
SELECT T1.Name FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District'       
SELECT T1.Name FROM teacher AS T1 WHERE T1.Age = '32' or T1.Age = '33'       
SELECT T1.Hometown FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1    
SELECT T1.Hometown, count( *) FROM teacher AS T1  GROUP BY T1.Hometown      
SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown HAVING count( *) >= 2     
SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID        
SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID     ORDER BY T1.Name ASC   
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID WHERE T2.Course = 'Math'       
SELECT T1.Name, count( *) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID  GROUP BY T1.Name      
SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name HAVING count( *) >= 2     
SELECT T1.Name FROM teacher AS T1 WHERE T1.Teacher_ID NOT IN (SELECT T22.Teacher_ID FROM course_arrange AS T22        )       
SELECT count( *) FROM visitor AS T1 WHERE T1.Age < 30       
SELECT T1.Name FROM visitor AS T1 WHERE T1.Level_of_membership > 4    ORDER BY T1.Level_of_membership DESC   
SELECT avg( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership <= 4       
SELECT T1.Name, T1.Level_of_membership FROM visitor AS T1 WHERE T1.Level_of_membership > 4    ORDER BY T1.Age DESC   
SELECT T1.Museum_ID, T1.Name FROM museum AS T1    ORDER BY T1.Num_of_Staff DESC LIMIT 1    
SELECT avg( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009'       
SELECT T1.Num_of_Staff, T1.Open_Year FROM museum AS T1 WHERE T1.Name = 'Plaza Museum'       
SELECT T1.Name FROM museum AS T1 WHERE T1.Num_of_Staff > (SELECT min( T22.Num_of_Staff) FROM museum AS T22 WHERE T22.Open_Year > '2010'       )       
SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.ID HAVING count( *) > 1     
SELECT T1.visitor_ID, T2.Name, T2.Level_of_membership FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID  GROUP BY T1.visitor_ID  ORDER BY sum( T1.Total_spent) DESC LIMIT 1    
SELECT T1.Museum_ID, T2.Name FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID  GROUP BY T1.Museum_ID  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Name FROM museum AS T1 WHERE T1.Museum_ID NOT IN (SELECT T22.Museum_ID FROM visit AS T22        )       
SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID    ORDER BY T2.Num_of_Ticket DESC LIMIT 1    
SELECT avg( T1.Num_of_Ticket), max( T1.Num_of_Ticket) FROM visit AS T1        
SELECT sum( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1       
SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < '2009'     INTERSECT SELECT T4.Name FROM visitor AS T4 JOIN visit AS T5 ON T4.ID = T5.visitor_ID JOIN museum AS T6 ON T5.Museum_ID = T6.Museum_ID WHERE T6.Open_Year > '2011'         
SELECT count( *) FROM visitor AS T1 WHERE T1.ID NOT IN (SELECT T22.visitor_ID FROM visit AS T22 JOIN museum AS T23 ON T22.Museum_ID = T23.Museum_ID WHERE T23.Open_Year > '2010'       )       
SELECT count( *) FROM museum AS T1 WHERE T1.Open_Year > '2013' or T1.Open_Year < '2008'       
SELECT count( *) FROM players AS T1        
SELECT count( *) FROM matches AS T1        
SELECT avg( T1.loser_age), avg( T1.winner_age) FROM matches AS T1        
SELECT avg( T1.winner_rank) FROM matches AS T1        
SELECT min( T1.loser_rank) FROM matches AS T1        
SELECT DISTINCT count(DISTINCT T1.country_code) FROM players AS T1        
SELECT DISTINCT count(DISTINCT T1.loser_name) FROM matches AS T1        
SELECT T1.tourney_name FROM matches AS T1  GROUP BY T1.tourney_name HAVING count( *) > 10     
SELECT T1.winner_name FROM matches AS T1 WHERE T1.year = 2013     INTERSECT SELECT T2.winner_name FROM matches AS T2 WHERE T2.year = 2016         
SELECT count( *) FROM matches AS T1 WHERE T1.year = 2013 or T1.year = 2016       
SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships'     INTERSECT SELECT T3.country_code, T3.first_name FROM players AS T3 JOIN matches AS T4 ON T3.player_id = T4.winner_id WHERE T4.tourney_name = 'Australian Open'         
SELECT T1.first_name, T1.country_code FROM players AS T1    ORDER BY T1.birth_date ASC LIMIT 1    
SELECT T1.first_name, T1.last_name FROM players AS T1 WHERE T1.hand = 'L'    ORDER BY T1.birth_date ASC   
SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id    ORDER BY T2.tours DESC LIMIT 1    
SELECT T1.year FROM matches AS T1  GROUP BY T1.year  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.winner_name, T1.winner_rank_points FROM matches AS T1  GROUP BY T1.winner_name, T1.winner_rank_points  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.winner_name FROM matches AS T1 WHERE T1.tourney_name = 'Australian Open'   ORDER BY T1.winner_rank_points DESC LIMIT 1    
SELECT T1.winner_name, T1.loser_name FROM matches AS T1    ORDER BY T1.minutes DESC LIMIT 1    
SELECT sum( T1.ranking_points), T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id  GROUP BY T2.first_name      
SELECT count( *), T1.country_code FROM players AS T1  GROUP BY T1.country_code      
SELECT T1.country_code FROM players AS T1  GROUP BY T1.country_code  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.country_code FROM players AS T1  GROUP BY T1.country_code HAVING count( *) > 50     
SELECT sum( T1.tours), T1.ranking_date FROM rankings AS T1  GROUP BY T1.ranking_date      
SELECT count( *), T1.year FROM matches AS T1  GROUP BY T1.year      
SELECT DISTINCT T1.winner_name, T1.winner_rank FROM matches AS T1    ORDER BY T1.winner_age ASC LIMIT 1    
SELECT DISTINCT count(DISTINCT T1.winner_name) FROM matches AS T1 WHERE T1.tourney_name = 'WTA Championships' and T1.winner_hand = 'L'       
SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id    ORDER BY T2.winner_rank_points DESC LIMIT 1    
SELECT count( *), T1.hand FROM players AS T1  GROUP BY T1.hand      
SELECT count( *) FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured'       
SELECT T1.name, T1.tonnage FROM ship AS T1     ORDER BY T1.name DESC   
SELECT T1.name, T1.date FROM battle AS T1        
SELECT max( T1.killed), min( T1.killed) FROM death AS T1        
SELECT avg( T1.injured) FROM death AS T1        
SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'       
SELECT T1.name, T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril'       
SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'       
SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id  GROUP BY T1.id HAVING sum( T3.killed) > 10     
SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id  GROUP BY T2.caused_by_ship_id  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I'       
SELECT DISTINCT count(DISTINCT T1.result) FROM battle AS T1        
SELECT count( *) FROM battle AS T1 WHERE T1.id NOT IN (SELECT T22.lost_in_battle FROM ship AS T22 WHERE T22.tonnage = '225'       )       
SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice'     INTERSECT SELECT T3.name, T3.date FROM battle AS T3 JOIN ship AS T4 ON T3.id = T4.lost_in_battle WHERE T4.name = 'HMS Atalanta'         
SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle AS T1        EXCEPT SELECT T2.name, T2.result, T2.bulgarian_commander FROM battle AS T2 JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.location = 'English Channel'       
SELECT T1.note FROM death AS T1 WHERE T1.note like '%East%'       
SELECT T1.line_1, T1.line_2 FROM addresses AS T1        
SELECT count( *) FROM courses AS T1        
SELECT T1.course_description FROM courses AS T1 WHERE T1.course_name = 'math'       
SELECT T1.zip_postcode FROM addresses AS T1 WHERE T1.city = 'Port Chelsea'       
SELECT T1.department_name, T2.department_id FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id = T2.department_id  GROUP BY T2.department_id  ORDER BY count( *) DESC LIMIT 1    
SELECT DISTINCT count(DISTINCT T1.department_id) FROM degree_programs AS T1        
SELECT DISTINCT count(DISTINCT T1.degree_summary_name) FROM degree_programs AS T1        
SELECT count( *) FROM degree_programs AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineer'       
SELECT T1.section_name, T1.section_description FROM sections AS T1        
SELECT T1.course_name, T1.course_id FROM courses AS T1 JOIN sections AS T2 ON T1.course_id = T2.course_id  GROUP BY T2.course_id HAVING count( *) <= 2     
SELECT T1.section_name FROM sections AS T1     ORDER BY T1.section_name DESC   
SELECT T1.semester_name, T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T3 ON T1.semester_id = T3.semester_id  GROUP BY T3.semester_id  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.department_description FROM departments AS T1 WHERE T1.department_name like '%computer%'       
SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id  GROUP BY T1.student_id HAVING count( *) = 2     
SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'       
SELECT T1.degree_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id  GROUP BY T3.degree_program_id  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.degree_program_id, T1.degree_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id  GROUP BY T3.degree_program_id  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.semester_name FROM semesters AS T1 WHERE T1.semester_id NOT IN (SELECT T22.semester_id FROM student_enrolment AS T22        )       
SELECT DISTINCT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id        
SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id  GROUP BY T2.course_id  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.last_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina'       EXCEPT SELECT DISTINCT T3.last_name FROM students AS T3 JOIN student_enrolment AS T4 ON T3.student_id = T4.student_id        
SELECT T1.transcript_date, T2.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T2.transcript_id HAVING count( *) >= 2     
SELECT T1.cell_mobile_number FROM students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward'       
SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1    
SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1    ORDER BY T1.date_left ASC LIMIT 1    
SELECT T1.first_name FROM students AS T1 WHERE T1.current_address_id != [0, 34, False]       
SELECT T1.address_id, T1.line_1, T1.line_2 FROM addresses AS T1 JOIN students AS T2 ON T1.address_id = T2.permanent_address_id  GROUP BY T2.permanent_address_id  ORDER BY count( *) DESC LIMIT 1    
SELECT avg( T1.transcript_date) FROM transcripts AS T1        
SELECT T1.transcript_date, T1.other_details FROM transcripts AS T1    ORDER BY T1.transcript_date ASC LIMIT 1    
SELECT count( *) FROM transcripts AS T1        
SELECT T1.transcript_date FROM transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1    
SELECT count( *), T1.student_course_id FROM transcript_contents AS T1  GROUP BY T1.student_course_id  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.transcript_date, T2.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T2.transcript_id  ORDER BY count( *) ASC LIMIT 1    
SELECT DISTINCT T1.semester_id FROM student_enrolment AS T1 JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Master'     INTERSECT SELECT DISTINCT T3.semester_id FROM student_enrolment AS T3 JOIN degree_programs AS T4 ON T3.degree_program_id = T4.degree_program_id WHERE T4.degree_summary_name = 'Bachelor'         
SELECT DISTINCT count(DISTINCT T1.current_address_id) FROM students AS T1        
SELECT T1.other_student_details FROM students AS T1     ORDER BY T1.other_student_details DESC   
SELECT T1.section_description FROM sections AS T1 WHERE T1.section_name = 'h'       
SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti'      UNION SELECT T3.first_name FROM students AS T3 WHERE T3.cell_mobile_number = '09700166582'        
SELECT T1.Title FROM cartoon AS T1     ORDER BY T1.Title ASC   
SELECT T1.Title FROM cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones'       
SELECT count( *) FROM cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr'       
SELECT T1.Title, T1.Directed_by FROM cartoon AS T1     ORDER BY T1.Original_air_date ASC   
SELECT T1.Title FROM cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones' or T1.Directed_by = 'Brandon Vietti'       
SELECT T1.Country, count( *) FROM tv_channel AS T1  GROUP BY T1.Country  ORDER BY count( *) DESC LIMIT 1    
SELECT DISTINCT count(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM tv_channel AS T1        
SELECT T1.Content FROM tv_channel AS T1 WHERE T1.series_name = 'Sky Radio'       
SELECT T1.Package_Option FROM tv_channel AS T1 WHERE T1.series_name = 'Sky Radio'       
SELECT count( *) FROM tv_channel AS T1 WHERE T1.Language = 'English'       
SELECT T1.Language, count( *) FROM tv_channel AS T1  GROUP BY T1.Language  ORDER BY count( *) ASC LIMIT 1    
SELECT T1.series_name FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!'       
SELECT T1.Title FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       
SELECT T1.Episode FROM tv_series AS T1     ORDER BY T1.Rating ASC   
SELECT T1.Episode, T1.Rating FROM tv_series AS T1    ORDER BY T1.Rating DESC LIMIT 1    
SELECT max( T1.Share), min( T1.Share) FROM tv_series AS T1        
SELECT T1.Air_Date FROM tv_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       
SELECT T1.Weekly_Rank FROM tv_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime'       
SELECT T1.series_name FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime'       
SELECT T1.Episode FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio'       
SELECT count( *), T1.Directed_by FROM cartoon AS T1  GROUP BY T1.Directed_by      
SELECT T1.Production_code, T1.Channel FROM cartoon AS T1    ORDER BY T1.Original_air_date ASC LIMIT 1    
SELECT T1.Package_Option, T1.series_name FROM tv_channel AS T1 WHERE T1.High_definition_TV = 'yes'       
SELECT T1.Country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'       
SELECT T1.Country FROM tv_channel AS T1        EXCEPT SELECT T2.Country FROM tv_channel AS T2 JOIN cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Written_by = 'Todd Casey'       
SELECT T1.series_name, T1.Country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Michael Chang'     INTERSECT SELECT T3.series_name, T3.Country FROM tv_channel AS T3 JOIN cartoon AS T4 ON T3.id = T4.Channel WHERE T4.Directed_by = 'Ben Jones'         
SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM tv_channel AS T1 WHERE T1.Language != 'English'       
SELECT T1.id FROM tv_channel AS T1  GROUP BY T1.id HAVING count( *) > 2     
SELECT T1.id FROM tv_channel AS T1        EXCEPT SELECT T2.Channel FROM cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones'       
SELECT T1.Package_Option FROM tv_channel AS T1 WHERE T1.id NOT IN (SELECT T22.Channel FROM cartoon AS T22 WHERE T22.Directed_by = 'Ben Jones'       )       
SELECT count( *) FROM poker_player AS T1        
SELECT T1.Earnings FROM poker_player AS T1     ORDER BY T1.Earnings DESC   
SELECT T1.Final_Table_Made, T1.Best_Finish FROM poker_player AS T1        
SELECT avg( T1.Earnings) FROM poker_player AS T1        
SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1    
SELECT max( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000       
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID        
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000       
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID     ORDER BY T2.Final_Table_Made ASC   
SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1    
SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1    
SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200       
SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID     ORDER BY T2.Earnings DESC   
SELECT T1.Nationality, count( *) FROM people AS T1  GROUP BY T1.Nationality      
SELECT T1.Nationality FROM people AS T1  GROUP BY T1.Nationality  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Nationality FROM people AS T1  GROUP BY T1.Nationality HAVING count( *) >= 2     
SELECT T1.Name, T1.Birth_Date FROM people AS T1     ORDER BY T1.Name ASC   
SELECT T1.Name FROM people AS T1 WHERE T1.Nationality != 'Russia'       
SELECT T1.Name FROM people AS T1 WHERE T1.People_ID NOT IN (SELECT T22.People_ID FROM poker_player AS T22        )       
SELECT DISTINCT count(DISTINCT T1.Nationality) FROM people AS T1        
SELECT T1.Name FROM country AS T1 WHERE T1.IndepYear > 1950       
SELECT count( *) FROM country AS T1 WHERE T1.GovernmentForm = 'Republic'       
SELECT sum( T1.SurfaceArea) FROM country AS T1 WHERE T1.Region = 'Caribbean'       
SELECT T1.Continent FROM country AS T1 WHERE T1.Name = 'Anguilla'       
SELECT T1.Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul'       
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'   ORDER BY T1.Percentage DESC LIMIT 1    
SELECT T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Name = 'Brazil'       
SELECT T1.Population, T1.Region FROM country AS T1 WHERE T1.Name = 'Angola'       
SELECT avg( T1.LifeExpectancy) FROM country AS T1 WHERE T1.Region = 'Central Africa'       
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1    
SELECT sum( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'       
SELECT avg( T1.LifeExpectancy) FROM country AS T1 WHERE T1.Continent = 'Africa' and T1.GovernmentForm = 'Republic'       
SELECT sum( T1.SurfaceArea) FROM country AS T1 WHERE T1.Continent = 'Asia' or T1.Continent = 'Europe'       
SELECT sum( T1.Population) FROM city AS T1 WHERE T1.District = 'Gelderland'       
SELECT avg( T1.GNP), sum( T1.Population) FROM country AS T1 WHERE T1.GovernmentForm = 'US Territory'       
SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1        
SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa'       
SELECT count( T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'       
SELECT count( *) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' and T2.IsOfficial = 'T'       
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode  ORDER BY count( *) DESC LIMIT 1    
SELECT count( *) FROM country AS T1        
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English'     INTERSECT SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.Language = 'French'         
SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' and T2.IsOfficial = 'T'     INTERSECT SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.Language = 'French' and T4.IsOfficial = 'T'         
SELECT DISTINCT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese'       
SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' or T2.Language = 'Dutch'       
SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' and T2.IsOfficial = 'T'      UNION SELECT * FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.Language = 'Dutch' and T4.IsOfficial = 'T'        
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.CountryCode  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.CountryCode HAVING count( *) = 1     
SELECT T1.Name, T1.Population FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language = 'English'   ORDER BY T1.Population DESC LIMIT 1    
SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.SurfaceArea DESC LIMIT 1    
SELECT avg( T1.LifeExpectancy) FROM country AS T1 WHERE T1.Name NOT IN (SELECT T22.Name FROM country AS T22 JOIN countrylanguage AS T23 ON T22.Code = T23.CountryCode WHERE T23.Language = 'English' and T23.IsOfficial = 'T'       )       
SELECT sum( T1.Population) FROM country AS T1 WHERE T1.Name NOT IN (SELECT T22.Name FROM country AS T22 JOIN countrylanguage AS T23 ON T22.Code = T23.CountryCode WHERE T23.Language = 'English'       )       
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Beatrix' and T1.IsOfficial = 'T'       
SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930 and T1.IsOfficial = 'T'       
SELECT T1.Name FROM country AS T1 WHERE T1.SurfaceArea > (SELECT min( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Europe'       )       
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Africa' and T1.Population < (SELECT max( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Africa' and T1.Population < (SELECT min( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Asia'       )       
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.Population > (SELECT max( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Africa'       )       
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.Population > (SELECT min( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Africa'       )       
SELECT T1.CountryCode FROM countrylanguage AS T1        EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = 'English'       
SELECT DISTINCT T1.CountryCode FROM countrylanguage AS T1 WHERE T1.Language != 'English'       
SELECT T1.Code FROM country AS T1 WHERE T1.GovernmentForm != 'Republic'       EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = 'English'       
SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Europe' and T2.Name NOT IN (SELECT T23.Name FROM country AS T23 JOIN countrylanguage AS T24 ON T23.Code = T24.CountryCode WHERE T24.IsOfficial = 'T' and T24.Language = 'English'       )       
SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T3 ON T1.CountryCode = T3.Code JOIN countrylanguage AS T2 ON T3.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' and T2.Language = 'Chinese' and T3.Continent = 'Asia'       
SELECT T1.Name, T1.SurfaceArea, T1.IndepYear FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1    
SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    
SELECT count( T1.Language), T2.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T2.Name HAVING count( *) >= 3     
SELECT count( T1.Language), T2.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T2.Name HAVING count( *) > 2     
SELECT count( *), T1.District FROM city AS T1 WHERE T1.Population > (SELECT avg( T22.Population) FROM city AS T22        ) GROUP BY T1.District      
SELECT sum( T1.Population), T1.GovernmentForm FROM country AS T1  GROUP BY T1.GovernmentForm HAVING avg( T1.LifeExpectancy) > 72     
SELECT sum( T1.Population), avg( T1.LifeExpectancy), T1.Continent FROM country AS T1  GROUP BY T1.Continent HAVING avg( T1.LifeExpectancy) < 72     
SELECT T1.Name, T1.SurfaceArea FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1    
SELECT T1.Name FROM country AS T1    ORDER BY T1.Population DESC LIMIT 1    
SELECT T1.Name FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1    
SELECT count( *) FROM country AS T1 WHERE T1.Continent = 'Asia'       
SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population = 80000       
SELECT sum( T1.Population), avg( T1.SurfaceArea) FROM country AS T1 WHERE T1.Continent = 'North America' and T1.SurfaceArea > 3000       
SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T1.CountryCode  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Language, T1.CountryCode, max( T1.Percentage) FROM countrylanguage AS T1  GROUP BY T1.CountryCode      
SELECT count( *), max( T2.Percentage) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish'       
SELECT T1.CountryCode, max( T1.Percentage) FROM countrylanguage AS T1 WHERE T1.Language = 'Spanish' GROUP BY T1.CountryCode      
SELECT count( *) FROM conductor AS T1        
SELECT T1.Name FROM conductor AS T1     ORDER BY T1.Age ASC   
SELECT T1.Name FROM conductor AS T1 WHERE T1.Nationality != 'USA'       
SELECT T1.Record_Company FROM orchestra AS T1     ORDER BY T1.Year_of_Founded DESC   
SELECT avg( T1.Attendance) FROM show AS T1        
SELECT max( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'       
SELECT DISTINCT count(DISTINCT T1.Nationality) FROM conductor AS T1        
SELECT T1.Name FROM conductor AS T1     ORDER BY T1.Year_of_Work DESC   
SELECT T1.Name FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1    
SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID        
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING count( *) > 1     
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008       
SELECT T1.Record_Company, count( *) FROM orchestra AS T1  GROUP BY T1.Record_Company      
SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T13 ON T1.Orchestra_ID = T13.Orchestra_ID  GROUP BY T1.Major_Record_Format   ORDER BY count( *) ASC   
SELECT T1.Record_Company FROM orchestra AS T1  GROUP BY T1.Record_Company  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Orchestra FROM orchestra AS T1 WHERE T1.Orchestra_ID NOT IN (SELECT T22.Orchestra_ID FROM performance AS T22        )       
SELECT T1.Record_Company FROM orchestra AS T1 WHERE T1.Year_of_Founded < 2003     INTERSECT SELECT T2.Record_Company FROM orchestra AS T2 WHERE T2.Year_of_Founded > 2003         
SELECT count( *) FROM orchestra AS T1 WHERE T1.Major_Record_Format = 'CD' or T1.Major_Record_Format = 'DVD'       
SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID  GROUP BY T2.Orchestra_ID HAVING count( *) > 1     
SELECT count( *) FROM high_schooler AS T1        
SELECT T1.name, T1.grade FROM high_schooler AS T1        
SELECT T1.grade FROM high_schooler AS T1        
SELECT T1.grade FROM high_schooler AS T1 WHERE T1.name = 'Kyle'       
SELECT T1.name FROM high_schooler AS T1 WHERE T1.grade = 10       
SELECT T1.ID FROM high_schooler AS T1 WHERE T1.name = 'Kyle'       
SELECT count( *) FROM high_schooler AS T1 WHERE T1.grade = 9 or T1.grade = 10       
SELECT T1.grade, count( *) FROM high_schooler AS T1  GROUP BY T1.grade      
SELECT T1.grade FROM high_schooler AS T1  GROUP BY T1.grade  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.grade FROM high_schooler AS T1  GROUP BY T1.grade HAVING count( *) >= 4     
SELECT T1.student_id, count( *) FROM friend AS T1  GROUP BY T1.student_id      
SELECT T1.name, count( *) FROM high_schooler AS T1 JOIN friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T1.name      
SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T2.friend_id  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T2.friend_id HAVING count( *) >= 3     
SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.ID = T2.friend_id WHERE T1.name = 'Kyle'       
SELECT count( *) FROM friend AS T1 JOIN high_schooler AS T2 ON T1.friend_id = T2.ID WHERE T2.name = 'Kyle'       
SELECT T1.ID FROM high_schooler AS T1        EXCEPT SELECT T2.student_id FROM friend AS T2        
SELECT T1.name FROM high_schooler AS T1        EXCEPT SELECT T2.name FROM high_schooler AS T2 JOIN friend AS T3 ON T2.ID = T3.friend_id        
SELECT T1.student_id FROM friend AS T1      INTERSECT SELECT T2.liked_id FROM likes AS T2          
SELECT T1.name FROM high_schooler AS T1      INTERSECT SELECT T2.name FROM high_schooler AS T2 JOIN likes AS T3 ON T2.ID = T3.student_id          
SELECT T1.student_id, count( *) FROM likes AS T1  GROUP BY T1.student_id      
SELECT T1.name, count( *) FROM high_schooler AS T1 JOIN likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name      
SELECT T1.name FROM high_schooler AS T1 JOIN likes AS T2 ON T1.ID = T2.student_id  GROUP BY T2.student_id  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.name FROM high_schooler AS T1 JOIN likes AS T2 ON T1.ID = T2.student_id  GROUP BY T2.student_id HAVING count( *) >= 2     
SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.ID = T2.friend_id WHERE T1.grade > 5 GROUP BY T2.friend_id HAVING count( *) >= 2     
SELECT count( *) FROM likes AS T1 JOIN high_schooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle'       
SELECT avg( T1.grade) FROM high_schooler AS T1 WHERE T1.ID in (SELECT T22.student_id FROM friend AS T22 JOIN high_schooler AS T23 ON T22.friend_id = T23.ID        )       
SELECT min( T1.grade) FROM high_schooler AS T1 WHERE T1.ID NOT IN (SELECT T22.student_id FROM friend AS T22 JOIN high_schooler AS T23 ON T22.friend_id = T23.ID        )       
SELECT T1.state FROM owners AS T1      INTERSECT SELECT T2.state FROM professionals AS T2          
SELECT avg( T1.age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id        
SELECT T1.professional_id, T1.last_name, T1.cell_number FROM professionals AS T1 WHERE T1.state = 'Indiana'      UNION SELECT T2.professional_id, T2.last_name, T2.cell_number FROM professionals AS T2 JOIN treatments AS T3 ON T2.professional_id = T3.professional_id  GROUP BY T2.professional_id HAVING count( *) > 2      
SELECT T1.name FROM dogs AS T1 WHERE T1.dog_id NOT IN (SELECT T22.dog_id FROM treatments AS T22  GROUP BY T22.dog_id HAVING sum( T22.cost_of_treatment) > 1000     )       
SELECT T1.first_name FROM professionals AS T1       UNION SELECT T2.first_name FROM owners AS T2         
SELECT T1.professional_id, T1.role_code, T1.email_address FROM professionals AS T1        EXCEPT SELECT T2.professional_id, T2.role_code, T2.email_address FROM professionals AS T2 JOIN treatments AS T3 ON T2.professional_id = T3.professional_id        
SELECT T1.owner_id, T2.first_name, T2.last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.owner_id  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.professional_id, T1.role_code, T1.first_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.professional_id HAVING count( *) >= 2     
SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T2.breed_code  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.owner_id, T1.last_name FROM owners AS T1 JOIN dogs AS T3 ON T1.owner_id = T3.owner_id  GROUP BY T3.owner_id  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.treatment_type_description FROM treatment_types AS T1 JOIN treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T2.treatment_type_code  ORDER BY sum( T2.cost_of_treatment) ASC LIMIT 1    
SELECT T1.owner_id, T1.zip_code FROM owners AS T1 JOIN dogs AS T3 ON T1.owner_id = T3.owner_id JOIN treatments AS T2 ON T3.dog_id = T2.dog_id  GROUP BY T3.owner_id  ORDER BY sum( T2.cost_of_treatment) DESC LIMIT 1    
SELECT T1.professional_id, T1.cell_number FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id JOIN treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code  GROUP BY T1.professional_id HAVING count( *) >= 2     
SELECT DISTINCT T1.first_name, T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT avg( T23.cost_of_treatment) FROM treatments AS T23        )       
SELECT T1.date_of_treatment, T2.first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id = T2.professional_id        
SELECT T1.cost_of_treatment, T2.treatment_type_description FROM treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code        
SELECT T1.first_name, T1.last_name, T2.size_code FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id        
SELECT T1.first_name, T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id        
SELECT T1.name, T2.date_of_treatment FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT T23.breed_code FROM dogs AS T23  GROUP BY T23.breed_code  ORDER BY count( *) ASC LIMIT 1    )       
SELECT T1.first_name, T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'       
SELECT DISTINCT T1.date_arrived, T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id        
SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = (SELECT max( T23.age) FROM dogs AS T23        )       
SELECT T1.email_address FROM professionals AS T1 WHERE T1.state = 'Hawaii' or T1.state = 'Wisconsin'       
SELECT T1.date_arrived, T1.date_departed FROM dogs AS T1        
SELECT DISTINCT count(DISTINCT T1.dog_id) FROM treatments AS T1        
SELECT DISTINCT count(DISTINCT T1.professional_id) FROM treatments AS T1        
SELECT T1.role_code, T1.street, T1.city, T1.state FROM professionals AS T1 WHERE T1.city like '%West%'       
SELECT T1.first_name, T1.last_name, T1.email_address FROM owners AS T1 WHERE T1.state like '%North%'       
SELECT count( *) FROM dogs AS T1 WHERE T1.age < (SELECT avg( T22.age) FROM dogs AS T22        )       
SELECT T1.cost_of_treatment FROM treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1    
SELECT count( *) FROM dogs AS T1 WHERE T1.dog_id NOT IN (SELECT T22.dog_id FROM treatments AS T22        )       
SELECT count( *) FROM owners AS T1 WHERE T1.owner_id NOT IN (SELECT T22.owner_id FROM dogs AS T22        )       
SELECT count( *) FROM professionals AS T1 WHERE T1.professional_id NOT IN (SELECT T22.professional_id FROM treatments AS T22        )       
SELECT T1.name, T1.age, T1.weight FROM dogs AS T1 WHERE T1.abandoned_yn = '1'       
SELECT avg( T1.age) FROM dogs AS T1        
SELECT max( T1.age) FROM dogs AS T1        
SELECT T1.charge_type, T1.charge_amount FROM charges AS T1        
SELECT max( T1.charge_amount) FROM charges AS T1        
SELECT T1.email_address, T1.cell_number, T1.home_phone FROM professionals AS T1        
SELECT DISTINCT T1.breed_code, T1.size_code FROM dogs AS T1        
SELECT DISTINCT T1.first_name, T2.treatment_type_description FROM professionals AS T1 JOIN treatments AS T3 ON T1.professional_id = T3.professional_id JOIN treatment_types AS T2 ON T3.treatment_type_code = T2.treatment_type_code        
SELECT count( *) FROM singer AS T1        
SELECT T1.Name FROM singer AS T1     ORDER BY T1.Net_Worth_Millions ASC   
SELECT T1.Birth_Year, T1.Citizenship FROM singer AS T1        
SELECT T1.Name FROM singer AS T1 WHERE T1.Citizenship != 'France'       
SELECT T1.Name FROM singer AS T1 WHERE T1.Birth_Year = 1948 or T1.Birth_Year = 1949       
SELECT T1.Name FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1    
SELECT T1.Citizenship, count( *) FROM singer AS T1  GROUP BY T1.Citizenship      
SELECT T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship  ORDER BY count( *) DESC LIMIT 1    
SELECT T1.Citizenship, max( T1.Net_Worth_Millions) FROM singer AS T1  GROUP BY T1.Citizenship      
SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID        
SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000       
SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING count( *) > 1     
SELECT T1.Name, sum( T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name      
SELECT T1.Name FROM singer AS T1 WHERE T1.Singer_ID NOT IN (SELECT T22.Singer_ID FROM song AS T22        )       
SELECT T1.Citizenship FROM singer AS T1 WHERE T1.Birth_Year < 1945     INTERSECT SELECT T2.Citizenship FROM singer AS T2 WHERE T2.Birth_Year > 1955         
SELECT count( *) FROM other_available_features AS T1        
SELECT T1.feature_type_name FROM reference_feature_types AS T1 JOIN other_available_features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon'       
SELECT T1.property_type_description FROM reference_property_types AS T1 JOIN properties AS T2 ON T1.property_type_code = T2.property_type_code        
SELECT T1.property_name FROM properties AS T1 WHERE T1.property_type_code = 'House'      UNION SELECT T2.property_name FROM properties AS T2 WHERE T2.property_type_code = 'Apartment' and T2.room_count > 1        
