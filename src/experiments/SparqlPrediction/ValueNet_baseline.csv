,database,natural language q,sql,sql_result,pred_sql,pred_sql_result,difficulty,match,score,exception
0,concert_singer,How many singers do we have?,SELECT count(*) FROM singer,"(6,)",SELECT count( *) FROM singer AS T1,"(6,)",easy,True,1,
1,concert_singer,"Show name, country, age for all singers ordered by age from the oldest to the youngest.","SELECT name ,  country ,  age FROM singer ORDER BY age DESC","('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)","SELECT T1.Name, T1.Country, T1.Age FROM singer AS T1     ORDER BY T1.Age DESC","('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)",medium,True,1,
2,concert_singer,"What is the average, minimum, and maximum age of all singers from France?","SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","(34.5, 25, 43)","SELECT avg( T1.Age), min( T1.Age), max( T1.Age) FROM singer AS T1 WHERE T1.Country = 'France'","(34.5, 25, 43)",medium,True,1,
3,concert_singer,Show the name and the release year of the song by the youngest singer.,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1","('Love', '2016')","SELECT T1.Song_Name, T1.Song_release_year FROM singer AS T1    ORDER BY T1.Age ASC LIMIT 1","('Love', '2016')",medium,True,1,
4,concert_singer,What are all distinct countries where singers above age 20 are from?,SELECT DISTINCT country FROM singer WHERE age  >  20,"('France',), ('Netherlands',), ('United States',)",SELECT DISTINCT T1.Country FROM singer AS T1 WHERE T1.Age > 20,"('France',), ('Netherlands',), ('United States',)",easy,True,1,
5,concert_singer,Show all countries and the number of singers in each country.,"SELECT country ,  count(*) FROM singer GROUP BY country","('Netherlands', 1), ('France', 4), ('United States', 1)","SELECT T1.Country, count( *) FROM singer AS T1  GROUP BY T1.Country","('Netherlands', 1), ('France', 4), ('United States', 1)",medium,True,1,
6,concert_singer,List all song names by singers above the average age.,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),"('You',), ('Sun',), ('Gentleman',)",SELECT T1.Song_Name FROM singer AS T1 WHERE T1.Age > (SELECT avg( T22.Age) FROM singer AS T22        ),"('You',), ('Sun',), ('Gentleman',)",hard,True,1,
7,concert_singer,Show location and name for all stadiums with a capacity between 5000 and 10000.,"SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",,"SELECT T1.Location, T1.Name FROM stadium AS T1 WHERE T1.Capacity between 5000 AND 10000",,medium,True,1,
8,concert_singer,What is the average and the maximum capacity of all stadiums?,"SELECT avg(capacity) ,  max(capacity) FROM stadium","(10621.666666666666, 52500)","SELECT avg( T1.Capacity), max( T1.Capacity) FROM stadium AS T1","(10621.666666666666, 52500)",medium,True,1,
9,concert_singer,What is the name and capacity for the stadium with highest average attendance?,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1","(""Stark's Park"", 10104)","SELECT T1.Name, T1.Capacity FROM stadium AS T1    ORDER BY T1.Average DESC LIMIT 1","(""Stark's Park"", 10104)",medium,True,1,
10,concert_singer,How many concerts are there in year 2014 or 2015?,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,"(6,)",SELECT count( *) FROM concert AS T1 WHERE T1.Year = '2014' or T1.Year = '2015',"(6,)",medium,True,1,
11,concert_singer,Show the stadium name and the number of concerts in each stadium.,"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T2.name","('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), (""Stark's Park"", 1), ('Balmoor', 1)","SELECT T1.Name, count( *) FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID  GROUP BY T1.Name","('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), (""Stark's Park"", 1), ('Balmoor', 1)",medium,True,1,
12,concert_singer,Show the stadium name and capacity with most number of concerts in year 2014 or after.,"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1","('Somerset Park', 11998)","SELECT T1.Name, T1.Capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year >= '2014' GROUP BY T2.Stadium_ID  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
13,concert_singer,Which year has most number of concerts?,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"(2015,)",SELECT T1.Year FROM concert AS T1  GROUP BY T1.Year  ORDER BY count( *) DESC LIMIT 1,"(2015,)",hard,True,1,
14,concert_singer,Show the stadium names without any concert.,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),"('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)",SELECT T1.Name FROM stadium AS T1 WHERE T1.Stadium_ID NOT IN (SELECT T22.Stadium_ID FROM concert AS T22        ),"('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)",hard,True,1,
15,concert_singer,Show countries where a singer above age 40 and a singer below 30 are from.,SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30,"('France',)",SELECT T1.Country FROM singer AS T1 WHERE T1.Age > 40     INTERSECT SELECT T2.Country FROM singer AS T2 WHERE T2.Age < 30,"('France',)",hard,True,1,
16,concert_singer,Show names for all stadiums except for stadiums having a concert in year 2014.,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,"('Balmoor',), ('Gayfield Park',), ('Hampden Park',), ('Recreation Park',), ('Forthbank Stadium',), ('Bayview Stadium',)",SELECT T1.Name FROM stadium AS T1        EXCEPT SELECT T2.Name FROM stadium AS T2 JOIN concert AS T3 ON T2.Stadium_ID = T3.Stadium_ID WHERE T3.Year = '2014',"('Balmoor',), ('Gayfield Park',), ('Hampden Park',), ('Recreation Park',), ('Forthbank Stadium',), ('Bayview Stadium',)",hard,True,1,
17,concert_singer,Show the name and theme for all concerts and the number of singers in each concert.,"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id","('Week 2', 'Party All Night', 1), ('Auditions', 'Free choice', 3), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Happy Tonight', 2), ('Week 1', 'Wide Awake', 1), ('Super bootcamp', 'Free choice 2', 2)","SELECT T1.concert_Name, T1.Theme, count( *) FROM concert AS T1 JOIN singer_in_concert AS T13 ON T1.concert_ID = T13.concert_ID  GROUP BY T1.concert_ID","('Week 2', 'Party All Night', 1), ('Auditions', 'Free choice', 3), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Happy Tonight', 2), ('Week 1', 'Wide Awake', 1), ('Super bootcamp', 'Free choice 2', 2)",medium,True,1,
18,concert_singer,List singer names and number of concerts for each singer.,"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id","('Tribal King', 2), ('Justin Brown', 3), ('John Nizinik', 2), ('Rose White', 1), ('Timbaland', 2)","SELECT T1.Name, count( *) FROM singer AS T1 JOIN singer_in_concert AS T13 ON T1.Singer_ID = T13.Singer_ID  GROUP BY T1.Name","('Rose White', 1), ('Timbaland', 2), ('Tribal King', 2), ('Justin Brown', 3), ('John Nizinik', 2)",medium,True,1,
19,concert_singer,List all singer names in concerts in year 2014.,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,"('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)",SELECT T1.Name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID JOIN concert AS T3 ON T2.concert_ID = T3.concert_ID WHERE T3.Year = '2014',"('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)",hard,True,1,
20,concert_singer,what is the name and nation of the singer who have a song having 'Hey' in its name?,"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'","('Justin Brown', 'France')","SELECT T1.Name, T1.Country FROM singer AS T1 WHERE T1.Song_Name like '%Hey%'","('Justin Brown', 'France')",medium,True,1,
21,concert_singer,Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015","('Somerset Park', 'Ayr United')","SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014'     INTERSECT SELECT T3.Name, T3.Location FROM stadium AS T3 JOIN concert AS T4 ON T3.Stadium_ID = T4.Stadium_ID WHERE T4.Year = '2015'","('Somerset Park', 'Ayr United')",extra,True,1,
22,concert_singer,Find the number of concerts happened in the stadium with the highest capacity.,SELECT count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T2.Capacity ORDER BY T2.Capacity DESC LIMIT 1,"(2,)",SELECT count( *) FROM concert AS T1 JOIN stadium AS T2 ON T1.Stadium_ID = T2.Stadium_ID    ORDER BY T2.Capacity DESC LIMIT 1,,extra,False,0,
23,pets_1,Find the number of pets whose weight is heavier than 10.,SELECT count(*) FROM pets WHERE weight  >  10,"(2,)",SELECT count( *) FROM pets AS T1 WHERE T1.weight > 10,"(2,)",easy,True,1,
24,pets_1,Find the weight of the youngest dog.,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,"(9.3,)",SELECT T1.weight FROM pets AS T1    ORDER BY T1.pet_age ASC LIMIT 1,"(9.3,)",medium,True,1,
25,pets_1,Find the maximum weight for each type of pet. List the maximum weight and pet type.,"SELECT max(weight) ,  petType FROM pets GROUP BY petType","(13.4, 'dog'), (12.0, 'cat')","SELECT max( T1.weight), T1.PetType FROM pets AS T1  GROUP BY T1.PetType","(13.4, 'dog'), (12.0, 'cat')",medium,True,1,
26,pets_1,Find number of pets owned by students who are older than 20.,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,"(0,)",SELECT count( *) FROM has_pet AS T13 JOIN student AS T2 ON T13.StuID = T2.StuID WHERE T2.Age > 20,"(0,)",medium,True,1,
27,pets_1,Find the number of dog pets that are raised by female students (with sex F).,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',"(2,)",SELECT count( *) FROM pets AS T1 JOIN has_pet AS T13 ON T1.PetID = T13.PetID JOIN student AS T2 ON T13.StuID = T2.StuID WHERE T2.Sex = 'F' and T1.PetType = 'dog',"(2,)",hard,True,1,
28,pets_1,Find the number of distinct type of pets.,SELECT count(DISTINCT pettype) FROM pets,"(2,)",SELECT DISTINCT count(DISTINCT T1.PetType) FROM pets AS T1,"(2,)",easy,True,1,
29,pets_1,Find the first name of students who have cat or dog pet.,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',"('Linda',), ('Tracy',)",SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID JOIN pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' or T3.PetType = 'dog',"('Linda',), ('Tracy',)",extra,True,1,
30,pets_1,Find the name of students who have both cat and dog pets.,SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog',,SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID JOIN pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat'     INTERSECT SELECT T4.Fname FROM student AS T4 JOIN has_pet AS T5 ON T4.StuID = T5.StuID JOIN pets AS T6 ON T5.PetID = T6.PetID WHERE T6.PetType = 'dog',,extra,True,1,
31,pets_1,Find the major and age of students who do not have a cat pet.,"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)","SELECT T1.Major, T1.Age FROM student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM student AS T22 JOIN has_pet AS T23 ON T22.StuID = T23.StuID JOIN pets AS T24 ON T23.PetID = T24.PetID WHERE T24.PetType = 'cat'       )","(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)",extra,True,1,
32,pets_1,Find the id of students who do not have a cat pet.,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',"(1018,), (1028,), (1035,), (1019,), (1002,), (1023,), (1009,), (1022,), (1020,), (1031,), (1011,), (1006,), (1008,), (1017,), (1005,), (1004,), (1034,), (1016,), (1012,), (1033,), (1015,), (1025,), (1007,), (1003,), (1026,), (1027,), (1014,), (1024,), (1021,), (1010,), (1032,), (1029,), (1030,)",SELECT T1.StuID FROM student AS T1        EXCEPT SELECT T2.StuID FROM student AS T2 JOIN has_pet AS T3 ON T2.StuID = T3.StuID JOIN pets AS T4 ON T3.PetID = T4.PetID WHERE T4.PetType = 'cat',"(1018,), (1028,), (1035,), (1019,), (1002,), (1023,), (1009,), (1022,), (1020,), (1031,), (1011,), (1006,), (1008,), (1017,), (1005,), (1004,), (1034,), (1016,), (1012,), (1033,), (1015,), (1025,), (1007,), (1003,), (1026,), (1027,), (1014,), (1024,), (1021,), (1010,), (1032,), (1029,), (1030,)",hard,True,1,
33,pets_1,Find the first name and age of students who have a dog but do not have a cat as a pet.,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","('Tracy', 19), ('Tracy', 19)","SELECT T1.Fname, T1.Age FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID JOIN pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' and T1.StuID NOT IN (SELECT T24.StuID FROM student AS T24 JOIN has_pet AS T25 ON T24.StuID = T25.StuID JOIN pets AS T26 ON T25.PetID = T26.PetID WHERE T26.PetType = 'cat'       )","('Tracy', 19), ('Tracy', 19)",extra,True,1,
34,pets_1,Find the type and weight of the youngest pet.,"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","('dog', 9.3)","SELECT T1.PetType, T1.weight FROM pets AS T1    ORDER BY T1.pet_age ASC LIMIT 1","('dog', 9.3)",medium,True,1,
35,pets_1,Find the id and weight of all pets whose age is older than 1.,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1","(2001, 12.0), (2002, 13.4)","SELECT T1.PetID, T1.weight FROM pets AS T1 WHERE T1.pet_age > 1","(2001, 12.0), (2002, 13.4)",medium,True,1,
36,pets_1,Find the average and maximum age for each type of pet.,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype","(1.5, 2, 'dog'), (3.0, 3, 'cat')","SELECT avg( T1.pet_age), max( T1.pet_age), T1.PetType FROM pets AS T1  GROUP BY T1.PetType","(1.5, 2, 'dog'), (3.0, 3, 'cat')",medium,True,1,
37,pets_1,Find the average weight for each pet type.,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype","(11.349999904633, 'dog'), (12.0, 'cat')","SELECT avg( T1.weight), T1.PetType FROM pets AS T1  GROUP BY T1.PetType","(11.349999904633, 'dog'), (12.0, 'cat')",medium,True,1,
38,pets_1,Find the first name and age of students who have a pet.,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid","('Linda', 18), ('Tracy', 19)","SELECT DISTINCT T1.Fname, T1.Age FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID","('Linda', 18), ('Tracy', 19)",medium,True,1,
39,pets_1,Find the id of the pet owned by student whose last name is ‘Smith’.,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',"(2001,)",SELECT T1.PetID FROM has_pet AS T1 JOIN student AS T2 ON T1.StuID = T2.StuID WHERE T2.LName = 'Smith',"(2001,)",medium,True,1,
40,pets_1,Find the number of pets for each student who has any pet and student id.,"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid","(2, 1002), (1, 1001)","SELECT count( *), T2.StuID FROM has_pet AS T13 JOIN student AS T2 ON T13.StuID = T2.StuID  GROUP BY T2.StuID","(2, 1002), (1, 1001)",medium,True,1,
41,pets_1,Find the first name and gender of student who have more than one pet.,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1","('Tracy', 'F')","SELECT T1.Fname, T1.Sex FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID  GROUP BY T1.StuID HAVING count( *) > 1","('Tracy', 'F')",medium,True,1,
42,pets_1,Find the last name of the student who has a cat that is age 3.,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',"('Smith',)",SELECT T1.LName FROM student AS T1 JOIN has_pet AS T2 ON T1.StuID = T2.StuID JOIN pets AS T3 ON T2.PetID = T3.PetID WHERE T3.pet_age = 3 and T3.PetType = 'cat',"('Smith',)",hard,True,1,
43,pets_1,Find the average age of students who do not have any pet.,SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid),"(19.625,)",SELECT avg( T1.Age) FROM student AS T1 WHERE T1.StuID NOT IN (SELECT T22.StuID FROM student AS T22 JOIN has_pet AS T23 ON T22.StuID = T23.StuID        ),"(19.625,)",extra,True,1,
44,car_1,How many continents are there?,SELECT count(*) FROM CONTINENTS;,"(6,)",SELECT count( *) FROM continents AS T1,"(6,)",easy,True,1,
45,car_1,"How many countries does each continent have? List the continent id, continent name and the number of countries.","SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","(0, 'NA', 1), (1, 'america', 3), (3, 'asia', 2), (5, 'australia', 2), (4, 'africa', 2), (2, 'europe', 6)","SELECT T1.ContId, T1.Continent, count( *) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent  GROUP BY T2.Continent",,medium,False,0,
46,car_1,How many countries are listed?,SELECT count(*) FROM COUNTRIES;,"(16,)",SELECT count( *) FROM countries AS T1,"(16,)",easy,True,1,
47,car_1,"How many models does each car maker produce? List maker full name, id and the number.","SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","('Honda', 11, 1), ('Nissan Motors', 8, 2), ('Toyota', 19, 2), ('General Motors', 4, 5), ('Volvo', 21, 1), ('Opel', 14, 1), ('BMW', 3, 1), ('Saab', 17, 1), ('Kia Motors', 22, 1), ('Triumph', 20, 1), ('Daimler Benz', 13, 2), ('NA', 10, 1), ('Fiat', 9, 1), ('Citroen', 7, 1), ('American Motor Company', 1, 1), ('Ford Motor Company', 5, 3), ('Subaru', 18, 1), ('Volkswagen', 2, 2), ('Renault', 16, 1), ('Peugeaut', 15, 1), ('Chrysler', 6, 4), ('Mazda', 12, 1), ('Hyundai', 23, 1)","SELECT T1.FullName, T1.Id, count( *) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Maker",,medium,False,0,
48,car_1,Which model of the car has the minimum horsepower?,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,"('ford',)",SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.Horsepower ASC LIMIT 1,"('ford',)",hard,True,1,
49,car_1,Find the model of the car whose weight is below the average weight.,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),"('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), ('volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',), ('datsun',), ('chevrolet',), ('chevrolet',), ('chevrolet',), ('pontiac',), ('dodge',), ('pontiac',), ('ford',), ('volkswagen',), ('mazda',), ('mazda',), ('plymouth',), ('mercury',), ('nissan',), ('honda',), ('toyota',), ('honda',), ('honda',), ('datsun',), ('buick',), ('chrysler',), ('ford',), ('toyota',), ('dodge',), ('chevrolet',), ('ford',), ('volkswagen',), ('dodge',), ('ford',), ('chevrolet',)",SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT avg( T23.Weight) FROM cars_data AS T23        ),"('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), ('volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',), ('datsun',), ('chevrolet',), ('chevrolet',), ('chevrolet',), ('pontiac',), ('dodge',), ('pontiac',), ('ford',), ('volkswagen',), ('mazda',), ('mazda',), ('plymouth',), ('mercury',), ('nissan',), ('honda',), ('toyota',), ('honda',), ('honda',), ('datsun',), ('buick',), ('chrysler',), ('ford',), ('toyota',), ('dodge',), ('chevrolet',), ('ford',), ('volkswagen',), ('dodge',), ('ford',), ('chevrolet',)",extra,True,1,
50,car_1,Find the name of the makers that produced some cars in the year of 1970?,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,"('NA',), ('citroen',), ('saab',), ('nissan',), ('toyota',), ('chrysler',), ('bmw',), ('volkswagen',), ('gm',), ('ford',), ('amc',), ('peugeaut',)",SELECT DISTINCT T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T14 ON T2.Model = T14.Model JOIN cars_data AS T3 ON T14.MakeId = T3.Id WHERE T3.Year = 1970,"('NA',), ('citroen',), ('saab',), ('nissan',), ('toyota',), ('chrysler',), ('bmw',), ('volkswagen',), ('gm',), ('ford',), ('amc',), ('peugeaut',)",extra,True,1,
51,car_1,Find the make and production time of the cars that were produced in the earliest year?,"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);","('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)","SELECT T1.Make, T2.Year FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Year = (SELECT min( T23.Year) FROM cars_data AS T23        )","('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)",extra,True,1,
52,car_1,Which distinct car models are the produced after 1980?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,"('chevrolet',), ('mazda',), ('saab',), ('nissan',), ('oldsmobile',), ('renault',), ('chrysler',), ('pontiac',), ('volkswagen',), ('ford',), ('volvo',), ('honda',), ('mercury',), ('buick',), ('plymouth',), ('toyota',), ('subaru',), ('datsun',), ('peugeot',), ('amc',), ('dodge',)",SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year > 1980,"('chevrolet',), ('mazda',), ('saab',), ('nissan',), ('oldsmobile',), ('renault',), ('chrysler',), ('pontiac',), ('volkswagen',), ('ford',), ('volvo',), ('honda',), ('mercury',), ('buick',), ('plymouth',), ('toyota',), ('subaru',), ('datsun',), ('peugeot',), ('amc',), ('dodge',)",hard,True,1,
53,car_1,How many car makers are there in each continents? List the continent name and the count.,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;","('NA', 1), ('asia', 7), ('america', 4), ('europe', 11)","SELECT T1.Continent, count( *) FROM continents AS T1 JOIN countries AS T13 ON T1.ContId = T13.Continent JOIN car_makers AS T2 ON T13.CountryId = T2.Country  GROUP BY T1.Continent","('NA', 1), ('asia', 7), ('america', 4), ('europe', 11)",hard,True,1,
54,car_1,Which of the countries has the most car makers? List the country name.,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T2.CountryName ORDER BY Count(*) DESC LIMIT 1;,"('japan',)",SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T2.Country  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
55,car_1,How many car models are produced by each maker? List the count and the maker full name.,"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;","(1, 'Honda', 11), (2, 'Nissan Motors', 8), (2, 'Toyota', 19), (5, 'General Motors', 4), (1, 'Volvo', 21), (1, 'Opel', 14), (1, 'BMW', 3), (1, 'Saab', 17), (1, 'Kia Motors', 22), (1, 'Triumph', 20), (2, 'Daimler Benz', 13), (1, 'NA', 10), (1, 'Fiat', 9), (1, 'Citroen', 7), (1, 'American Motor Company', 1), (3, 'Ford Motor Company', 5), (1, 'Subaru', 18), (2, 'Volkswagen', 2), (1, 'Renault', 16), (1, 'Peugeaut', 15), (4, 'Chrysler', 6), (1, 'Mazda', 12), (1, 'Hyundai', 23)","SELECT count( *), T2.FullName, T2.Id FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id  GROUP BY T1.Maker",,medium,False,0,
56,car_1,What is the accelerate of the car make amc hornet sportabout (sw)?,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,"(13.5,)",SELECT T1.Accelerate FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)',"(13.5,)",medium,True,1,
57,car_1,How many car makers are there in france?,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,"(3,)",SELECT count( *) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france',"(3,)",medium,True,1,
58,car_1,How many car models are produced in the usa?,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,"(13,)",SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN countries AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa',"(13,)",hard,True,1,
59,car_1,What is the average miles per gallon(mpg) of the cars with 4 cylinders?,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,"(28.862318794508,)",SELECT avg( T1.MPG) FROM cars_data AS T1 WHERE T1.Cylinders = 4,"(28.862318794508,)",easy,True,1,
60,car_1,What is the smallest weight of the car produced with 4 cylinders on 1974?,SELECT Weight FROM CARS_DATA WHERE Cylinders  =  4 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;,"(1649,)",SELECT T1.Weight FROM cars_data AS T1 WHERE T1.Cylinders = 4 and T1.Year = 1974   ORDER BY T1.Weight ASC LIMIT 1,"(1649,)",hard,True,1,
61,car_1,What are all the makers and models?,"SELECT Maker ,  Model FROM MODEL_LIST;","(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')","SELECT T1.Maker, T1.Model FROM model_list AS T1","(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')",medium,True,1,
62,car_1,What are the countries having at least one car maker? List name and id.,"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;","('japan', 4), ('NA', 0), ('france', 3), ('uk', 7), ('usa', 1), ('italy', 5), ('germany', 2), ('sweden', 6), ('korea', 8)","SELECT T1.CountryName, T1.CountryId FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T2.Country HAVING count( *) >= 1",,medium,False,0,
63,car_1,What is the number of the cars with horsepower more than 150?,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,"(49,)",SELECT count( *) FROM cars_data AS T1 WHERE T1.Horsepower > 150,"(49,)",easy,True,1,
64,car_1,What is the average weight of cars each year?,"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;","(2436.655172413793, 1980), (3078.735294117647, 1976), (3237.714285714286, 1972), (2532.166666666667, 1981), (2861.805555555556, 1978), (3055.344827586207, 1979), (3176.8, 1975), (3441.314285714286, 1970), (2453.548387096774, 1982), (2877.925925925926, 1974), (2997.357142857143, 1977), (3419.025, 1973), (2960.344827586207, 1971)","SELECT avg( T1.Weight), T1.Year FROM cars_data AS T1  GROUP BY T1.Year","(2436.655172413793, 1980), (3078.735294117647, 1976), (3237.714285714286, 1972), (2532.166666666667, 1981), (2861.805555555556, 1978), (3055.344827586207, 1979), (3176.8, 1975), (3441.314285714286, 1970), (2453.548387096774, 1982), (2877.925925925926, 1974), (2997.357142857143, 1977), (3419.025, 1973), (2960.344827586207, 1971)",medium,True,1,
65,car_1,Which countries in europe have at least 3 car manufacturers?,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,"('france',), ('germany',)",SELECT T1.CountryName FROM countries AS T1 JOIN continents AS T2 ON T1.Continent = T2.ContId WHERE T2.Continent = 'europe' GROUP BY T1.Continent HAVING count( *) >= 3,,extra,False,0,
66,car_1,What is the maximum horsepower and the make of the car models with 3 cylinders?,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;","(110, 'mazda rx-4')","SELECT T1.Horsepower, T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T1.Cylinders = 3   ORDER BY T1.Horsepower DESC LIMIT 1","(110, 'mazda rx-4')",extra,True,1,
67,car_1,"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;,"('mazda',)",SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id    ORDER BY T2.MPG DESC LIMIT 1,"('mazda',)",hard,True,1,
68,car_1,What is the average horsepower of the cars before 1980?,SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;,"(111.132911392405,)",SELECT avg( T1.Horsepower) FROM cars_data AS T1 WHERE T1.Year < 1980,"(111.132911392405,)",easy,True,1,
69,car_1,What is the average edispl of the cars of model volvo?,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,"(133.5,)",SELECT avg( T1.Edispl) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo',"(133.5,)",medium,True,1,
70,car_1,What is the maximum accelerate for different number of cylinders?,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;","(24.8, 4), (22.2, 8), (21.0, 6), (13.5, 3), (20.1, 5)","SELECT max( T1.Accelerate), T1.Cylinders FROM cars_data AS T1  GROUP BY T1.Cylinders","(24.8, 4), (22.2, 8), (21.0, 6), (13.5, 3), (20.1, 5)",medium,True,1,
71,car_1,Which model has the most version(make) of cars?,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,"('ford',)",SELECT T1.Model FROM car_names AS T1  GROUP BY T1.Model  ORDER BY count( *) DESC LIMIT 1,"('ford',)",hard,True,1,
72,car_1,How many cars have more than 4 cylinders?,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,"(195,)",SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 4,"(195,)",easy,True,1,
73,car_1,how many cars were produced in 1980?,SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,"(29,)",SELECT count( *) FROM cars_data AS T1 WHERE T1.Year = 1980,"(29,)",easy,True,1,
74,car_1,How many car models were produced by the maker with full name American Motor Company?,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,"(1,)",SELECT count( *) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company',"(1,)",medium,True,1,
75,car_1,Which makers designed more than 3 car models? List full name and the id.,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;","('General Motors', 4), ('Chrysler', 6)","SELECT T1.FullName, T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Maker HAVING count( *) > 3",,medium,False,0,
76,car_1,Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,"('chevrolet',), ('hi',), ('oldsmobile',), ('mercedes-benz',), ('chrysler',), ('pontiac',), ('ford',), ('mercury',), ('plymouth',), ('buick',), ('mercedes',), ('cadillac',), ('dodge',), ('amc',)",SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN car_makers AS T3 ON T1.Maker = T3.Id JOIN cars_data AS T4 ON T2.MakeId = T4.Id WHERE T3.FullName = 'General Motors' or T4.Weight > 3500,"('chevrolet',), ('hi',), ('oldsmobile',), ('mercedes-benz',), ('chrysler',), ('pontiac',), ('ford',), ('mercury',), ('plymouth',), ('buick',), ('mercedes',), ('cadillac',), ('dodge',), ('amc',)",extra,True,1,
77,car_1,In which years cars were produced weighing no less than 3000 and no more than 4000?,SELECT DISTINCT T1.Year FROM CARS_DATA AS T1 WHERE T1.Weight  >  3000 AND T1.weight  <  4000;,"(1980,), (1976,), (1972,), (1981,), (1978,), (1979,), (1975,), (1970,), (1982,), (1974,), (1977,), (1973,), (1971,)",SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight > 3000 and T1.Weight < 4000,"(1980,), (1976,), (1972,), (1981,), (1978,), (1979,), (1975,), (1970,), (1982,), (1974,), (1977,), (1973,), (1971,)",medium,True,1,
78,car_1,What is the horsepower of the car with the largest accelerate?,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,"(71,)",SELECT T1.Horsepower FROM cars_data AS T1    ORDER BY T1.Accelerate DESC LIMIT 1,"(71,)",medium,True,1,
79,car_1,"For model volvo, how many cylinders does the car with the least accelerate have?",SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,"(6,)",SELECT T1.Cylinders FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo'   ORDER BY T1.Accelerate ASC LIMIT 1,"(6,)",extra,True,1,
80,car_1,How many cars have a larger accelerate than the car with the largest horsepower?,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,"(399,)",SELECT count( *) FROM cars_data AS T1 WHERE T1.Accelerate > (SELECT T22.Accelerate FROM cars_data AS T22    ORDER BY T22.Horsepower DESC LIMIT 1    ),"(399,)",hard,True,1,
81,car_1,How many countries has more than 2 car makers?,"SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 ) as sub;","(4,)",SELECT count( *) FROM countries AS T1,"(16,)",easy,False,0,
82,car_1,How many cars has over 6 cylinders?,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,"(108,)",SELECT count( *) FROM cars_data AS T1 WHERE T1.Cylinders > 6,"(108,)",easy,True,1,
83,car_1,"For the cars with 4 cylinders, which model has the largest horsepower?",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"('citroen',)",SELECT T1.Model FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4   ORDER BY T2.Horsepower DESC LIMIT 1,"('citroen',)",extra,True,1,
84,car_1,"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.","SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;","(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4'), (342, 'mazda rx-7 gs')","SELECT T1.MakeId, T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT min( T23.Horsepower) FROM cars_data AS T23        ) and T2.Cylinders <= 3","(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4'), (342, 'mazda rx-7 gs')",extra,True,1,
85,car_1,"Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders?","SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <  4;","(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4'), (342, 'mazda rx-7 gs')","SELECT T1.MakeId, T1.Make FROM car_names AS T1 JOIN cars_data AS T2 ON T1.MakeId = T2.Id WHERE T2.Horsepower > (SELECT min( T23.Horsepower) FROM cars_data AS T23        ) and T2.Cylinders < 4","(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4'), (342, 'mazda rx-7 gs')",extra,True,1,
86,car_1,What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980?,SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;,"(43.1,)",SELECT T1.MPG FROM cars_data AS T1 WHERE T1.Cylinders = 8 or T1.Year < 1980   ORDER BY T1.MPG DESC LIMIT 1,"(43.1,)",extra,True,1,
87,car_1,Which models are lighter than 3500 but not built by the 'Ford Motor Company'?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,"('chevrolet',), ('mazda',), ('citroen',), ('saab',), ('audi',), ('nissan',), ('oldsmobile',), ('renault',), ('mercedes-benz',), ('chrysler',), ('pontiac',), ('bmw',), ('volkswagen',), ('fiat',), ('volvo',), ('triumph',), ('honda',), ('buick',), ('plymouth',), ('toyota',), ('subaru',), ('datsun',), ('opel',), ('peugeot',), ('dodge',), ('amc',)",SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.Model = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN car_makers AS T4 ON T1.Maker = T4.Id WHERE T3.Weight < 3500 and T4.FullName != 'Ford Motor Company',"('chevrolet',), ('mazda',), ('citroen',), ('saab',), ('audi',), ('nissan',), ('oldsmobile',), ('renault',), ('mercedes-benz',), ('chrysler',), ('pontiac',), ('bmw',), ('volkswagen',), ('fiat',), ('volvo',), ('triumph',), ('honda',), ('buick',), ('plymouth',), ('toyota',), ('subaru',), ('datsun',), ('opel',), ('peugeot',), ('dodge',), ('amc',)",extra,True,1,
88,car_1,What are the name of the countries where there is not a single car maker?,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,"('egypt',), ('australia',), ('mexico',), ('new zealand',), ('russia',), ('brazil',), ('nigeria',)",SELECT T1.CountryName FROM countries AS T1        EXCEPT SELECT T2.CountryName FROM countries AS T2 JOIN car_makers AS T3 ON T2.CountryId = T3.Country,"('egypt',), ('australia',), ('mexico',), ('new zealand',), ('russia',), ('brazil',), ('nigeria',)",hard,True,1,
89,car_1,Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker.,"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id,  T1.Maker HAVING count(*)  >  3;","(2, 'volkswagen'), (4, 'gm'), (6, 'chrysler'), (5, 'ford'), (8, 'nissan'), (19, 'toyota')","SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker  GROUP BY T2.Maker HAVING count( *) >= 2   INTERSECT SELECT T3.Id, T3.Maker FROM car_makers AS T3 JOIN model_list AS T4 ON T3.Id = T4.Maker  GROUP BY T4.Maker HAVING count( *) > 3",,extra,False,0,
90,car_1,What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?,"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';","(1, 'usa'), (5, 'italy'), (2, 'germany'), (4, 'japan')","SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country  GROUP BY T2.Country HAVING count( *) > 3    UNION SELECT T3.CountryId, T3.CountryName FROM countries AS T3 JOIN car_makers AS T4 ON T3.CountryId = T4.Country JOIN model_list AS T5 ON T4.Id = T5.Maker WHERE T5.Model = 'fiat'",,extra,False,0,
91,flight_2,Which country does Airline 'JetBlue Airways' belong to?,SELECT Country FROM AIRLINES WHERE Airline  =  'JetBlue Airways',"('USA',)",SELECT T1.Country FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways',"('USA',)",easy,True,1,
92,flight_2,What is the abbreviation of Airline 'JetBlue Airways'?,SELECT Abbreviation FROM AIRLINES WHERE Airline  =  'JetBlue Airways',"('JetBlue',)",SELECT T1.Abbreviation FROM airlines AS T1 WHERE T1.Airline = 'JetBlue Airways',"('JetBlue',)",easy,True,1,
93,flight_2,List all airline names and their abbreviations in 'USA'.,"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  'USA'","('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')","SELECT T1.Airline, T1.Abbreviation FROM airlines AS T1 WHERE T1.Country = 'USA'","('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')",medium,True,1,
94,flight_2,List the airport code and name in the city of Anthony.,"SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  'Anthony'","('ANY', 'Anthony')","SELECT T1.AirportCode, T1.AirportName FROM airports AS T1 WHERE T1.City = 'Anthony'","('ANY', 'Anthony')",medium,True,1,
95,flight_2,How many airlines do we have?,SELECT count(*) FROM AIRLINES,"(12,)",SELECT count( *) FROM airlines AS T1,"(12,)",easy,True,1,
96,flight_2,How many airports do we have?,SELECT count(*) FROM AIRPORTS,"(100,)",SELECT count( *) FROM airports AS T1,"(100,)",easy,True,1,
97,flight_2,How many flights do we have?,SELECT count(*) FROM FLIGHTS,"(1200,)",SELECT count( *) FROM flights AS T1,"(1200,)",easy,True,1,
98,flight_2,Which airline has abbreviation 'UAL'?,SELECT Airline FROM AIRLINES WHERE Abbreviation  =  'UAL',"('United Airlines',)",SELECT T1.Airline FROM airlines AS T1 WHERE T1.Abbreviation = 'UAL',"('United Airlines',)",easy,True,1,
99,flight_2,How many airlines are from USA?,SELECT count(*) FROM AIRLINES WHERE Country  =  'USA',"(12,)",SELECT count( *) FROM airlines AS T1 WHERE T1.Country = 'USA',"(12,)",easy,True,1,
100,flight_2,Which city and country is the Alton airport at?,"SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  'Alton'","('Alton', 'United States')","SELECT T1.City, T1.Country FROM airports AS T1 WHERE T1.AirportName = 'Alton'","('Alton', 'United States')",medium,True,1,
101,flight_2,What is the airport name for airport 'AKO'?,SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  'AKO',"('Colorado Plains Regional Airport',)",SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode = 'AKO',"('Colorado Plains Regional Airport',)",easy,True,1,
102,flight_2,What are airport names at City 'Aberdeen'?,SELECT AirportName FROM AIRPORTS WHERE City = 'Aberdeen',"('Phillips AAF',), ('Municipal',)",SELECT T1.AirportName FROM airports AS T1 WHERE T1.City = 'Aberdeen',"('Phillips AAF',), ('Municipal',)",easy,True,1,
103,flight_2,How many flights depart from 'APG'?,SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  'APG',"(11,)",SELECT count( *) FROM flights AS T1 WHERE T1.SourceAirport = 'APG',"(11,)",easy,True,1,
104,flight_2,How many flights have destination ATO?,SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  'ATO',"(7,)",SELECT count( *) FROM flights AS T1 WHERE T1.DestAirport = 'ATO',"(7,)",easy,True,1,
105,flight_2,How many flights depart from City Aberdeen?,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen',"(21,)",SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',"(21,)",medium,True,1,
106,flight_2,How many flights arriving in Aberdeen city?,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  'Aberdeen',"(21,)",SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',"(21,)",medium,True,1,
107,flight_2,How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  'Ashley' AND T3.City  =  'Aberdeen',"(2,)",SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Ashley' and T2.City = 'Aberdeen',"(0,)",hard,False,0,
108,flight_2,How many flights does airline 'JetBlue Airways' have?,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = 'JetBlue Airways',"(100,)",SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'JetBlue Airways',,medium,False,0,
109,flight_2,How many 'United Airlines' flights go to Airport 'ASY'?,SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.DestAirport  =  'ASY',"(1,)",SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T1.DestAirport = 'ASY',,medium,False,0,
110,flight_2,How many 'United Airlines' flights depart from Airport 'AHD'?,SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  'United Airlines' AND T2.SourceAirport  =  'AHD',"(3,)",SELECT count( *) FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines' and T1.SourceAirport = 'AHD',,medium,False,0,
111,flight_2,How many United Airlines flights go to City 'Aberdeen'?,SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  'Aberdeen' AND T3.Airline  =  'United Airlines',"(3,)",SELECT count( *) FROM airlines AS T1 JOIN airports AS T2 WHERE T2.City = 'Aberdeen' and T1.Airline = 'United Airlines',,hard,False,0,
112,flight_2,Which city has most number of arriving flights?,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"('Albany',)",SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport  GROUP BY T2.DestAirport  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
113,flight_2,Which city has most number of departing flights?,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1,"('Albany',)",SELECT T1.City FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport  GROUP BY T2.DestAirport  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
114,flight_2,What is the code of airport that has the highest number of flights?,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1,"('AAF',)",SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport  GROUP BY T2.DestAirport  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
115,flight_2,What is the code of airport that has fewest number of flights?,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1,"('AID',)",SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport  GROUP BY T2.DestAirport  ORDER BY count( *) ASC LIMIT 1,,extra,False,0,
116,flight_2,Which airline has most number of flights?,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,"('United Airlines',)",SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.Airline  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
117,flight_2,Find the abbreviation and country of the airline that has fewest number of flights?,"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Abbreviation ,  T1.Country ORDER BY count(*) LIMIT 1","('UAL', 'USA')","SELECT T1.Abbreviation, T1.Country FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.uid  ORDER BY count( *) ASC LIMIT 1",,extra,False,0,
118,flight_2,What are airlines that have some flight departing from airport 'AHD'?,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'AHD',"('United Airlines',), ('United Airlines',), ('United Airlines',), ('US Airways',), ('Delta Airlines',), ('Northwest Airlines',), ('JetBlue Airways',), ('Frontier Airlines',), ('AirTran Airways',), ('Virgin America',)",SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'AHD',,medium,False,0,
119,flight_2,What are airlines that have flights arriving at airport 'AHD'?,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  'AHD',"('United Airlines',), ('United Airlines',), ('United Airlines',), ('US Airways',), ('Delta Airlines',), ('Northwest Airlines',), ('JetBlue Airways',), ('Frontier Airlines',), ('AirTran Airways',), ('Virgin America',)",SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.DestAirport = 'AHD',,medium,False,0,
120,flight_2,Find all airlines that have flights from both airports 'APG' and 'CVO'.,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG' INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO',"('United Airlines',), ('AirTran Airways',), ('Delta Airlines',), ('Allegiant Air',), ('Northwest Airlines',), ('US Airways',), ('Southwest Airlines',)",SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'APG'     INTERSECT SELECT T3.Airline FROM airlines AS T3 JOIN flights AS T4 WHERE T4.SourceAirport = 'CVO',,extra,False,0,
121,flight_2,Find all airlines that have flights from airport 'CVO' but not from 'APG'.,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'CVO' EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  'APG',"('American Airlines',), ('Virgin America',), ('Frontier Airlines',), ('JetBlue Airways',)",SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2 WHERE T2.SourceAirport = 'CVO'       EXCEPT SELECT T3.Airline FROM airlines AS T3 JOIN flights AS T4 WHERE T4.SourceAirport = 'APG',,extra,False,0,
122,flight_2,Find all airlines that have at least 10 flights.,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,"('United Airlines',), ('AirTran Airways',), ('American Airlines',), ('Delta Airlines',), ('Virgin America',), ('Allegiant Air',), ('Northwest Airlines',), ('Frontier Airlines',), ('US Airways',), ('JetBlue Airways',), ('Southwest Airlines',), ('Continental Airlines',)",SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.Airline HAVING count( *) > 10,,medium,False,0,
123,flight_2,Find all airlines that have fewer than 200 flights.,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,"('United Airlines',), ('AirTran Airways',), ('American Airlines',), ('Delta Airlines',), ('Virgin America',), ('Allegiant Air',), ('Northwest Airlines',), ('Frontier Airlines',), ('US Airways',), ('JetBlue Airways',), ('Southwest Airlines',), ('Continental Airlines',)",SELECT T1.Airline FROM airlines AS T1 JOIN flights AS T2  GROUP BY T1.Airline HAVING count( *) < 200,,medium,False,0,
124,flight_2,What are flight numbers of Airline 'United Airlines'?,SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  'United Airlines',"(28,), (29,), (44,), (45,), (54,), (55,), (90,), (91,), (108,), (109,), (142,), (143,), (148,), (149,), (198,), (199,), (226,), (227,), (276,), (277,), (308,), (309,), (326,), (327,), (370,), (371,), (414,), (415,), (424,), (425,), (470,), (471,), (520,), (521,), (556,), (557,), (560,), (561,), (604,), (605,), (608,), (609,), (626,), (627,), (658,), (659,), (708,), (709,), (744,), (745,), (754,), (755,), (786,), (787,), (810,), (811,), (828,), (829,), (878,), (879,), (888,), (889,), (900,), (901,), (924,), (925,), (946,), (947,), (996,), (997,), (1000,), (1001,), (1026,), (1027,), (1062,), (1063,), (1068,), (1069,), (1100,), (1101,), (1144,), (1145,), (1166,), (1167,), (1168,), (1169,), (1192,), (1193,), (1208,), (1209,), (1216,), (1217,), (1250,), (1251,), (1274,), (1275,), (1284,), (1285,), (1328,), (1329,)",SELECT T1.FlightNo FROM airlines AS T2 JOIN flights AS T1 WHERE T2.Airline = 'United Airlines',,medium,False,0,
125,flight_2,What are flight numbers of flights departing from Airport 'APG'?,SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  'APG',"(28,), (1275,), (489,), (1377,), (101,), (743,), (29,), (478,), (382,), (1172,), (143,)",SELECT T1.FlightNo FROM flights AS T1 WHERE T1.SourceAirport = 'APG',"(28,), (1275,), (489,), (1377,), (101,), (743,), (29,), (478,), (382,), (1172,), (143,)",easy,True,1,
126,flight_2,What are flight numbers of flights arriving at Airport 'APG'?,SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  'APG',"(29,), (1274,), (488,), (1376,), (100,), (742,), (28,), (479,), (383,), (1173,), (142,)",SELECT T1.FlightNo FROM flights AS T1 WHERE T1.DestAirport = 'APG',"(29,), (1274,), (488,), (1376,), (100,), (742,), (28,), (479,), (383,), (1173,), (142,)",easy,True,1,
127,flight_2,What are flight numbers of flights departing from City 'Aberdeen '?,SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen',"(28,), (91,), (1275,), (489,), (1377,), (101,), (743,), (1138,), (1248,), (29,), (401,), (478,), (1071,), (45,), (754,), (909,), (382,), (1172,), (143,), (513,), (842,)",SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',"(29,), (90,), (1274,), (488,), (1376,), (100,), (742,), (1139,), (1249,), (28,), (400,), (479,), (1070,), (44,), (755,), (908,), (383,), (1173,), (142,), (512,), (843,)",medium,False,0,
128,flight_2,What are flight numbers of flights arriving at City 'Aberdeen'?,SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  'Aberdeen',"(29,), (90,), (1274,), (488,), (1376,), (100,), (742,), (1139,), (1249,), (28,), (400,), (479,), (1070,), (44,), (755,), (908,), (383,), (1173,), (142,), (512,), (843,)",SELECT T1.FlightNo FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen',"(29,), (90,), (1274,), (488,), (1376,), (100,), (742,), (1139,), (1249,), (28,), (400,), (479,), (1070,), (44,), (755,), (908,), (383,), (1173,), (142,), (512,), (843,)",medium,True,1,
129,flight_2,Find the number of flights landing in the city of Aberdeen or Abilene.,SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  'Aberdeen' OR T2.city  =  'Abilene',"(47,)",SELECT count( *) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' or T2.City = 'Abilene',"(47,)",hard,True,1,
130,flight_2,Find the name of airports which do not have any flight in and out.,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),,SELECT T1.AirportName FROM airports AS T1 WHERE T1.AirportCode NOT IN (SELECT T22.SourceAirport FROM flights AS T22        ),,hard,True,1,
131,employee_hire_evaluation,How many employees are there?,SELECT count(*) FROM employee,"(10,)",SELECT count( *) FROM employee AS T1,"(10,)",easy,True,1,
132,employee_hire_evaluation,Sort employee names by their age in ascending order.,SELECT name FROM employee ORDER BY age,"('George Chuter',), ('Andrew Sheridan',), ('Tim Payne',), ('Lee Mears',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)",SELECT T1.Name FROM employee AS T1     ORDER BY T1.Age ASC,"('George Chuter',), ('Andrew Sheridan',), ('Tim Payne',), ('Lee Mears',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)",easy,True,1,
133,employee_hire_evaluation,What is the number of employees from each city?,"SELECT count(*) ,  city FROM employee GROUP BY city","(3, 'Bristol'), (1, 'Leicester'), (2, 'Wasps'), (1, 'Sale'), (3, 'Bath')","SELECT count( *), T1.City FROM employee AS T1  GROUP BY T1.City","(3, 'Bristol'), (1, 'Leicester'), (2, 'Wasps'), (1, 'Sale'), (3, 'Bath')",medium,True,1,
134,employee_hire_evaluation,Which cities do more than one employee under age 30 come from?,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,"('Bath',)",SELECT T1.City FROM employee AS T1 WHERE T1.Age < 30 GROUP BY T1.City HAVING count( *) > 1,"('Bath',)",medium,True,1,
135,employee_hire_evaluation,Find the number of shops in each location.,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION","(1, 'Mariehamn'), (1, 'Valkeakoski'), (1, 'Lahti'), (1, 'Kuopio'), (1, 'Turku'), (1, 'Helsinki'), (1, 'Kotka'), (1, 'Jakobstad'), (1, 'Espoo')","SELECT count( *), T1.Location FROM shop AS T1  GROUP BY T1.Location","(1, 'Mariehamn'), (1, 'Valkeakoski'), (1, 'Lahti'), (1, 'Kuopio'), (1, 'Turku'), (1, 'Helsinki'), (1, 'Kotka'), (1, 'Jakobstad'), (1, 'Espoo')",medium,True,1,
136,employee_hire_evaluation,Find the manager name and district of the shop whose number of products is the largest.,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1","('Ilkka Mäkelä', 'Lahden Stadion')","SELECT T1.Manager_name, T1.District FROM shop AS T1    ORDER BY T1.Number_products DESC LIMIT 1","('Ilkka Mäkelä', 'Lahden Stadion')",medium,True,1,
137,employee_hire_evaluation,find the minimum and maximum number of products of all stores.,"SELECT min(Number_products) ,  max(Number_products) FROM shop","(1600, 15000)","SELECT min( T1.Number_products), max( T1.Number_products) FROM shop AS T1","(1600, 15000)",medium,True,1,
138,employee_hire_evaluation,"Return the name, location and district of all shops in descending order of number of products.","SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')","SELECT T1.Name, T1.Location, T1.District FROM shop AS T1     ORDER BY T1.Number_products DESC","('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')",medium,True,1,
139,employee_hire_evaluation,Find the names of stores whose number products is more than the average number of products.,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),"('HJK',), ('FC Inter',), ('FC Lahti',)",SELECT T1.Name FROM shop AS T1 WHERE T1.Number_products > (SELECT avg( T22.Number_products) FROM shop AS T22        ),"('HJK',), ('FC Inter',), ('FC Lahti',)",hard,True,1,
140,employee_hire_evaluation,find the name of employee who was awarded the most times in the evaluation.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1,"('George Chuter',)",SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID  GROUP BY T2.Employee_ID  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
141,employee_hire_evaluation,Find the name of the employee who got the highest one time bonus.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,"('Louis Deacon',)",SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID    ORDER BY T2.Bonus DESC LIMIT 1,"('Louis Deacon',)",hard,True,1,
142,employee_hire_evaluation,Find the names of employees who never won any award in the evaluation.,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),"('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)",SELECT T1.Name FROM employee AS T1 WHERE T1.Employee_ID NOT IN (SELECT T22.Employee_ID FROM evaluation AS T22        ),"('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)",hard,True,1,
143,employee_hire_evaluation,What is the name of the shop that is hiring the largest number of employees?,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name ORDER BY count(*) DESC LIMIT 1,"('FC Haka',)",SELECT T1.Name FROM shop AS T1 JOIN hiring AS T3 ON T1.Shop_ID = T3.Shop_ID  GROUP BY T3.Shop_ID  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
144,employee_hire_evaluation,Find the name of the shops that do not hire any employee.,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),"('FC Honka',), ('KuPS',), ('IFK Mariehamn',)",SELECT T1.Name FROM shop AS T1 WHERE T1.Shop_ID NOT IN (SELECT T22.Shop_ID FROM hiring AS T22        ),"('FC Honka',), ('KuPS',), ('IFK Mariehamn',)",hard,True,1,
145,employee_hire_evaluation,Find the number of employees hired in each shop; show the shop name as well.,"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","(2, 'FC Haka'), (1, 'FC KooTeePee'), (1, 'FC Lahti'), (1, 'HJK'), (1, 'FF Jaro'), (1, 'FC Inter')","SELECT count( *), T2.Name FROM hiring AS T13 JOIN shop AS T2 ON T13.Shop_ID = T2.Shop_ID  GROUP BY T2.Name","(2, 'FC Haka'), (1, 'FC KooTeePee'), (1, 'FC Lahti'), (1, 'HJK'), (1, 'FF Jaro'), (1, 'FC Inter')",medium,True,1,
146,employee_hire_evaluation,What is total bonus given in all evaluations?,SELECT sum(bonus) FROM evaluation,"(19500.0,)",SELECT sum( T1.Bonus) FROM evaluation AS T1,"(19500.0,)",easy,True,1,
147,employee_hire_evaluation,Give me all the information about hiring.,SELECT * FROM hiring,"(1, 1, '2009', True), (1, 2, '2003', True), (8, 3, '2011', False), (4, 4, '2012', True), (5, 5, '2013', True), (2, 6, '2010', False), (6, 7, '2008', True)",SELECT * FROM hiring AS T1,"(1, 1, '2009', True), (1, 2, '2003', True), (8, 3, '2011', False), (4, 4, '2012', True), (5, 5, '2013', True), (2, 6, '2010', False), (6, 7, '2008', True)",easy,True,1,
148,employee_hire_evaluation,Which district has both stores with less than 3000 products and stores with more than 10000 products?,SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000,,SELECT T1.District FROM shop AS T1 WHERE T1.Number_products < 3000     INTERSECT SELECT T2.District FROM shop AS T2 WHERE T2.Number_products > 10000,,hard,True,1,
149,employee_hire_evaluation,How many different store locations are there?,SELECT count(DISTINCT LOCATION) FROM shop,"(9,)",SELECT DISTINCT count(DISTINCT T1.Location) FROM shop AS T1,"(9,)",easy,True,1,
150,cre_doc_template_mgt,How many documents do we have?,SELECT count(*) FROM Documents,"(15,)",SELECT count( *) FROM documents AS T1,"(15,)",easy,True,1,
151,cre_doc_template_mgt,"List document IDs, document names, and document descriptions for all documents.","SELECT document_id ,  document_name ,  document_description FROM Documents","(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')","SELECT T1.Document_ID, T1.Document_Name, T1.Document_Description FROM documents AS T1","(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')",medium,True,1,
152,cre_doc_template_mgt,What is the document name and template id for document with description with the letter 'w' in it?,"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE '%w%'","('Data base', 11), ('How to read a book', 4)","SELECT T1.Document_Name, T1.Template_ID FROM documents AS T1 WHERE T1.Document_Description like '%w%'","('Data base', 11), ('How to read a book', 4)",medium,True,1,
153,cre_doc_template_mgt,"What is the document id, template id and description for document named 'Robbin CV'?","SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  'Robbin CV'","(76, 20, 'y')","SELECT T1.Document_ID, T1.Template_ID, T1.Document_Description FROM documents AS T1 WHERE T1.Document_Name = 'Robbin CV'","(76, 20, 'y')",medium,True,1,
154,cre_doc_template_mgt,How many different templates do all document use?,SELECT count(DISTINCT template_id) FROM Documents,"(12,)",SELECT DISTINCT count(DISTINCT T1.Template_ID) FROM documents AS T1,"(12,)",easy,True,1,
155,cre_doc_template_mgt,How many documents are using the template with type code 'PPT'?,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',"(3,)",SELECT count( *) FROM documents AS T1 JOIN templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT',"(3,)",medium,True,1,
156,cre_doc_template_mgt,Show all template ids and number of documents using each template.,"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","(14, 2), (22, 1), (20, 1), (8, 1), (11, 2), (10, 1), (7, 1), (1, 1), (25, 2), (4, 1), (21, 1), (6, 1)","SELECT T1.Template_ID, count( *) FROM documents AS T1  GROUP BY T1.Template_ID","(14, 2), (22, 1), (20, 1), (8, 1), (11, 2), (10, 1), (7, 1), (1, 1), (25, 2), (4, 1), (21, 1), (6, 1)",medium,True,1,
157,cre_doc_template_mgt,What is the id and type code for the template used by the most documents?,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ,  T2.Template_Type_Code ORDER BY count(*) DESC LIMIT 1","(25, 'PP')","SELECT T1.Template_ID, T2.Template_Type_Code FROM documents AS T1 JOIN templates AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_ID  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
158,cre_doc_template_mgt,Show ids for all templates that are used by more than one document.,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,"(14,), (11,), (25,)",SELECT T1.Template_ID FROM documents AS T1  GROUP BY T1.Template_ID HAVING count( *) > 1,"(14,), (11,), (25,)",easy,True,1,
159,cre_doc_template_mgt,Show ids for all templates not used by any document.,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,"(23,), (24,), (19,), (0,), (9,), (18,), (16,), (15,)",SELECT T1.Template_ID FROM templates AS T1        EXCEPT SELECT T2.Template_ID FROM documents AS T2,"(23,), (24,), (19,), (0,), (9,), (18,), (16,), (15,)",hard,True,1,
160,cre_doc_template_mgt,How many templates do we have?,SELECT count(*) FROM Templates,"(20,)",SELECT count( *) FROM templates AS T1,"(20,)",easy,True,1,
161,cre_doc_template_mgt,"Show template ids, version numbers, and template type codes for all templates.","SELECT template_id ,  version_number ,  template_type_code FROM Templates","(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')","SELECT T1.Template_ID, T1.Version_Number, T1.Template_Type_Code FROM templates AS T1","(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')",medium,True,1,
162,cre_doc_template_mgt,Show all distinct template type codes for all templates.,SELECT DISTINCT template_type_code FROM Templates,"('AD',), ('PPT',), ('PP',), ('BK',), ('CV',)",SELECT DISTINCT T1.Template_Type_Code FROM templates AS T1,"('AD',), ('PPT',), ('PP',), ('BK',), ('CV',)",easy,True,1,
163,cre_doc_template_mgt,What are the ids of templates with template type code PP or PPT?,SELECT template_id FROM Templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT',"(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)",SELECT T1.Template_ID FROM templates AS T1 WHERE T1.Template_Type_Code = 'PP' or T1.Template_Type_Code = 'PPT',"(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)",medium,True,1,
164,cre_doc_template_mgt,How many templates have template type code CV?,SELECT count(*) FROM Templates WHERE template_type_code  =  'CV',"(2,)",SELECT count( *) FROM templates AS T1 WHERE T1.Template_Type_Code = 'CV',"(2,)",easy,True,1,
165,cre_doc_template_mgt,What is the version number and template type code for the template with version number later than 5?,"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5","(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')","SELECT T1.Version_Number, T1.Template_Type_Code FROM templates AS T1 WHERE T1.Version_Number > 5","(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')",medium,True,1,
166,cre_doc_template_mgt,Show all template type codes and number of templates for each.,"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","('AD', 3), ('PPT', 3), ('PP', 6), ('BK', 6), ('CV', 2)","SELECT T1.Template_Type_Code, count( *) FROM templates AS T1  GROUP BY T1.Template_Type_Code","('AD', 3), ('PPT', 3), ('PP', 6), ('BK', 6), ('CV', 2)",medium,True,1,
167,cre_doc_template_mgt,Which template type code has most number of templates?,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,"('PP',)",SELECT T1.Template_Type_Code FROM templates AS T1  GROUP BY T1.Template_Type_Code  ORDER BY count( *) DESC LIMIT 1,"('PP',)",hard,True,1,
168,cre_doc_template_mgt,Show all template type codes with less than three templates.,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,"('CV',)",SELECT T1.Template_Type_Code FROM templates AS T1  GROUP BY T1.Template_Type_Code HAVING count( *) < 3,"('CV',)",easy,True,1,
169,cre_doc_template_mgt,What the smallest version number and its template type code?,"SELECT min(Version_Number) ,  template_type_code FROM Templates GROUP BY template_type_code","(7, 'AD'), (1, 'PPT'), (0, 'PP'), (2, 'BK'), (5, 'CV')","SELECT min( T1.Version_Number), T1.Template_Type_Code FROM templates AS T1  GROUP BY T1.Template_Type_Code","(7, 'AD'), (1, 'PPT'), (0, 'PP'), (2, 'BK'), (5, 'CV')",medium,True,1,
170,cre_doc_template_mgt,What is the template type code of the template used by document with the name 'Data base'?,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  'Data base',"('BK',)",SELECT T1.Template_Type_Code FROM templates AS T1 JOIN documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = 'Data base',"('BK',)",medium,True,1,
171,cre_doc_template_mgt,Show all document names using templates with template type code BK.,SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  'BK',"('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)",SELECT T1.Document_Name FROM documents AS T1 JOIN templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'BK',"('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)",medium,True,1,
172,cre_doc_template_mgt,Show all template type codes and the number of documents using each type.,"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","('BK', 5), ('AD', 3), ('PPT', 3), ('PP', 4)","SELECT T1.Template_Type_Code, count( *) FROM templates AS T1 JOIN documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T1.Template_Type_Code","('BK', 5), ('AD', 3), ('PPT', 3), ('PP', 4)",medium,True,1,
173,cre_doc_template_mgt,Which template type code is used by most number of documents?,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,"('BK',)",SELECT T1.Template_Type_Code FROM templates AS T1 JOIN documents AS T2 ON T1.Template_ID = T2.Template_ID  GROUP BY T2.Template_ID  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
174,cre_doc_template_mgt,Show all template type codes that are not used by any document.,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,"('CV',)",SELECT T1.Template_Type_Code FROM templates AS T1        EXCEPT SELECT T2.Template_Type_Code FROM templates AS T2 JOIN documents AS T3 ON T2.Template_ID = T3.Template_ID,"('CV',)",hard,True,1,
175,cre_doc_template_mgt,Show all template type codes and descriptions.,"SELECT template_type_code ,  template_type_description FROM Reference_template_types","('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')","SELECT T1.Template_Type_Code, T1.Template_Type_Description FROM reference_template_types AS T1","('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')",medium,True,1,
176,cre_doc_template_mgt,What is the template type descriptions for template type code 'AD'.,SELECT template_type_description FROM Reference_template_types WHERE template_type_code  =  'AD',"('Advertisement',)",SELECT T1.Template_Type_Description FROM reference_template_types AS T1 WHERE T1.Template_Type_Code = 'AD',"('Advertisement',)",easy,True,1,
177,cre_doc_template_mgt,What is the template type code for template type description 'Book'.,SELECT template_type_code FROM Reference_template_types WHERE template_type_description  =  'Book',"('BK',)",SELECT T1.Template_Type_Code FROM reference_template_types AS T1 WHERE T1.Template_Type_Description = 'Book',"('BK',)",easy,True,1,
178,cre_doc_template_mgt,What are the distinct template type descriptions for the templates ever used by any document?,SELECT DISTINCT T1.template_type_description FROM Reference_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,"('Paper',), ('Advertisement',), ('Book',), ('Presentation',)",SELECT DISTINCT T1.Template_Type_Description FROM reference_template_types AS T1 JOIN templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code,"('Paper',), ('Advertisement',), ('CV',), ('Book',), ('Presentation',)",medium,False,0,
179,cre_doc_template_mgt,What are the template ids with template type description 'Presentation'.,SELECT T2.template_id FROM Reference_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  'Presentation',"(6,), (7,), (10,)",SELECT T1.Template_ID FROM templates AS T1 JOIN reference_template_types AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code WHERE T2.Template_Type_Description = 'Presentation',"(6,), (7,), (10,)",medium,True,1,
180,cre_doc_template_mgt,How many paragraphs in total?,SELECT count(*) FROM Paragraphs,"(15,)",SELECT count( *) FROM paragraphs AS T1,"(15,)",easy,True,1,
181,cre_doc_template_mgt,How many paragraphs for the document with name 'Summer Show'?,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',"(1,)",SELECT count( *) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Summer Show',"(1,)",medium,True,1,
182,cre_doc_template_mgt,Show paragraph details for paragraph with text 'Korea'.,SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea',"('NA',), ('NA',)",SELECT T1.Other_Details FROM paragraphs AS T1 WHERE T1.Paragraph_Text = 'Korea',"('NA',), ('NA',)",easy,True,1,
183,cre_doc_template_mgt,Show all paragraph ids and texts for the document with name 'Welcome to NY'.,"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'","(16615, 'Japan'), (608931827, 'Micronesia')","SELECT T1.Paragraph_ID, T1.Paragraph_Text FROM paragraphs AS T1 JOIN documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Welcome to NY'","(16615, 'Japan'), (608931827, 'Micronesia')",medium,True,1,
184,cre_doc_template_mgt,Show all paragraph texts for the document 'Customer reviews'.,SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  'Customer reviews',"('Korea',), ('Ukraine',), ('Korea',)",SELECT T1.Paragraph_Text FROM paragraphs AS T1 JOIN documents AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Document_Name = 'Customer reviews',"('Korea',), ('Ukraine',), ('Korea',)",medium,True,1,
185,cre_doc_template_mgt,Show all document ids and the number of paragraphs in each document. Order by document id.,"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)","SELECT T1.Document_ID, count( *) FROM paragraphs AS T1  GROUP BY T1.Document_ID   ORDER BY T1.Document_ID ASC","(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)",medium,True,1,
186,cre_doc_template_mgt,"Show all document ids, names and the number of paragraphs in each document.","SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id,  T2.document_name","(3830, 'Do not panic', 1), (50123, 'Learning French', 1), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (80, 'Welcome to NY', 2), (385906526, 'About Korea', 1), (33930, 'How Google people work', 1), (3, 'Summer Show', 1), (651512, 'How to write a CV', 2), (2394, 'Customer reviews', 3)","SELECT T1.Document_ID, T2.Document_Name, count( *) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID",,extra,False,0,
187,cre_doc_template_mgt,List all document ids with at least two paragraphs.,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,"(16514113,), (2394,), (80,), (651512,)",SELECT T1.Document_ID FROM paragraphs AS T1  GROUP BY T1.Document_ID HAVING count( *) >= 2,"(16514113,), (2394,), (80,), (651512,)",easy,True,1,
188,cre_doc_template_mgt,What is the document id and name with greatest number of paragraphs?,"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id, T2.document_name ORDER BY count(*) DESC LIMIT 1","(2394, 'Customer reviews')","SELECT T1.Document_ID, T2.Document_Name FROM paragraphs AS T1 JOIN documents AS T2 ON T1.Document_ID = T2.Document_ID  GROUP BY T1.Document_ID  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
189,cre_doc_template_mgt,What is the document id with least number of paragraphs?,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,"(385906526,)",SELECT T1.Document_ID FROM paragraphs AS T1  GROUP BY T1.Document_ID  ORDER BY count( *) ASC LIMIT 1,"(385906526,)",hard,True,1,
190,cre_doc_template_mgt,What is the document id with 1 to 2 paragraphs?,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,"(385906526,), (50123,), (16514113,), (3540024,), (3830,), (33930,), (3,), (80,), (651512,)",SELECT T1.Document_ID FROM paragraphs AS T1  GROUP BY T1.Document_ID HAVING count( *) between 1 AND 2,"(385906526,), (50123,), (16514113,), (3540024,), (3830,), (33930,), (3,), (80,), (651512,)",easy,True,1,
191,cre_doc_template_mgt,Show the document id with paragraph text 'Brazil' and 'Ireland'.,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',"(16514113,)",SELECT T1.Document_ID FROM paragraphs AS T1 WHERE T1.Paragraph_Text = 'Brazil'     INTERSECT SELECT T2.Document_ID FROM paragraphs AS T2 WHERE T2.Paragraph_Text = 'Ireland',"(16514113,)",hard,True,1,
192,course_teach,How many teachers are there?,SELECT count(*) FROM teacher,"(7,)",SELECT count( *) FROM teacher AS T1,"(7,)",easy,True,1,
193,course_teach,List the names of teachers in ascending order of age.,SELECT Name FROM teacher ORDER BY Age ASC,"('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)",SELECT T1.Name FROM teacher AS T1     ORDER BY T1.Age ASC,"('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)",easy,True,1,
194,course_teach,What are the age and hometown of teachers?,"SELECT Age ,  Hometown FROM teacher","(32, 'Blackrod Urban District'), (29, 'Bolton County Borough'), (26, 'Farnworth Municipal Borough'), (33, 'Horwich Urban District'), (45, 'Kearsley Urban District'), (41, 'Little Lever Urban District'), (39, 'Turton Urban District')","SELECT T1.Age, T1.Hometown FROM teacher AS T1","(32, 'Blackrod Urban District'), (29, 'Bolton County Borough'), (26, 'Farnworth Municipal Borough'), (33, 'Horwich Urban District'), (45, 'Kearsley Urban District'), (41, 'Little Lever Urban District'), (39, 'Turton Urban District')",medium,True,1,
195,course_teach,List the name of teachers whose hometown is not 'Little Lever Urban District'.,SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District',"('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Lucy Wong',)",SELECT T1.Name FROM teacher AS T1 WHERE T1.Hometown != 'Little Lever Urban District',"('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Lucy Wong',)",easy,True,1,
196,course_teach,Show the name of teachers aged either 32 or 33?,SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,"('Joseph Huts',), ('John Deloor',)",SELECT T1.Name FROM teacher AS T1 WHERE T1.Age = '32' or T1.Age = '33',"('Joseph Huts',), ('John Deloor',)",medium,True,1,
197,course_teach,What is the hometown of the youngest teacher?,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,"('Farnworth Municipal Borough',)",SELECT T1.Hometown FROM teacher AS T1    ORDER BY T1.Age ASC LIMIT 1,"('Farnworth Municipal Borough',)",medium,True,1,
198,course_teach,Show different hometown of teachers and the number of teachers from each hometown.,"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","('Horwich Urban District', 1), ('Turton Urban District', 1), ('Blackrod Urban District', 1), ('Kearsley Urban District', 1), ('Bolton County Borough', 1), ('Little Lever Urban District', 1), ('Farnworth Municipal Borough', 1)","SELECT T1.Hometown, count( *) FROM teacher AS T1  GROUP BY T1.Hometown","('Horwich Urban District', 1), ('Turton Urban District', 1), ('Blackrod Urban District', 1), ('Kearsley Urban District', 1), ('Bolton County Borough', 1), ('Little Lever Urban District', 1), ('Farnworth Municipal Borough', 1)",medium,True,1,
199,course_teach,List the most common hometown of teachers.,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,"('Horwich Urban District',)",SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown  ORDER BY count( *) DESC LIMIT 1,"('Horwich Urban District',)",hard,True,1,
200,course_teach,Show the hometowns shared by at least two teachers.,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2,,SELECT T1.Hometown FROM teacher AS T1  GROUP BY T1.Hometown HAVING count( *) >= 2,,easy,True,1,
201,course_teach,Show names of teachers and the courses they are arranged to teach.,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID","('Vicente Carretero', 'Math'), ('Kearsley Brown', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')","SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID","('Vicente Carretero', 'Math'), ('Kearsley Brown', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')",medium,True,1,
202,course_teach,Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name","('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')","SELECT T1.Name, T2.Course FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID     ORDER BY T1.Name ASC","('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')",hard,True,1,
203,course_teach,Show the name of the teacher for the math course.,SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  'Math',"('Vicente Carretero',), ('Kearsley Brown',)",SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T3 ON T1.Teacher_ID = T3.Teacher_ID JOIN course AS T2 ON T3.Course_ID = T2.Course_ID WHERE T2.Course = 'Math',"('Vicente Carretero',), ('Kearsley Brown',)",hard,True,1,
204,course_teach,Show names of teachers and the number of courses they teach.,"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name","('Anne Walker', 2), ('Vicente Carretero', 1), ('Lucy Wong', 1), ('Kearsley Brown', 1), ('Gustaaf Deloor', 1)","SELECT T1.Name, count( *) FROM teacher AS T1 JOIN course_arrange AS T13 ON T1.Teacher_ID = T13.Teacher_ID  GROUP BY T1.Name","('Anne Walker', 2), ('Vicente Carretero', 1), ('Lucy Wong', 1), ('Kearsley Brown', 1), ('Gustaaf Deloor', 1)",medium,True,1,
205,course_teach,Show names of teachers that teach at least two courses.,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,"('Anne Walker',)",SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID  GROUP BY T1.Name HAVING count( *) >= 2,"('Anne Walker',)",medium,True,1,
206,course_teach,List the names of teachers who have not been arranged to teach courses.,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),"('Joseph Huts',), ('John Deloor',)",SELECT T1.Name FROM teacher AS T1 WHERE T1.Teacher_ID NOT IN (SELECT T22.Teacher_ID FROM course_arrange AS T22        ),"('Joseph Huts',), ('John Deloor',)",hard,True,1,
207,museum_visit,How many visitors below age 30 are there?,SELECT count(*) FROM visitor WHERE age  <  30,"(3,)",SELECT count( *) FROM visitor AS T1 WHERE T1.Age < 30,"(3,)",easy,True,1,
208,museum_visit,"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC,"('Gonzalo Higuain',), ('Fernando Gago',), ('Guti Midfielder',)",SELECT T1.Name FROM visitor AS T1 WHERE T1.Level_of_membership > 4    ORDER BY T1.Level_of_membership DESC,"('Gonzalo Higuain',), ('Fernando Gago',), ('Guti Midfielder',)",medium,True,1,
209,museum_visit,What is the average age of the visitors whose membership level is not higher than 4?,SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4,"(36.0,)",SELECT avg( T1.Age) FROM visitor AS T1 WHERE T1.Level_of_membership <= 4,"(36.0,)",easy,True,1,
210,museum_visit,"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.","SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC","('Fernando Gago', 6), ('Gonzalo Higuain', 8), ('Guti Midfielder', 5)","SELECT T1.Name, T1.Level_of_membership FROM visitor AS T1 WHERE T1.Level_of_membership > 4    ORDER BY T1.Age DESC","('Fernando Gago', 6), ('Gonzalo Higuain', 8), ('Guti Midfielder', 5)",medium,True,1,
211,museum_visit,Find the id and name of the museum that has the most staff members?,"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1","(1, 'Plaza Museum')","SELECT T1.Museum_ID, T1.Name FROM museum AS T1    ORDER BY T1.Num_of_Staff DESC LIMIT 1","(1, 'Plaza Museum')",medium,True,1,
212,museum_visit,Find the average number of staff working for the museums that were open before 2009.,SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009,"(31.333333333333,)",SELECT avg( T1.Num_of_Staff) FROM museum AS T1 WHERE T1.Open_Year < '2009',"(31.333333333333,)",easy,True,1,
213,museum_visit,What are the opening year and staff number of the museum named Plaza Museum?,"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'","(62, 2000)","SELECT T1.Num_of_Staff, T1.Open_Year FROM museum AS T1 WHERE T1.Name = 'Plaza Museum'","(62, 2000)",medium,True,1,
214,museum_visit,find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.,SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010),"('Plaza Museum',), ('Capital Plaza Museum',), ('Jefferson Development Museum',)",SELECT T1.Name FROM museum AS T1 WHERE T1.Num_of_Staff > (SELECT min( T22.Num_of_Staff) FROM museum AS T22 WHERE T22.Open_Year > '2010'       ),"('Plaza Museum',), ('Capital Plaza Museum',), ('Jefferson Development Museum',)",hard,True,1,
215,museum_visit,"find the id, name and age for visitors who visited some museums more than once.","SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1","(6, 'Rafael van der Vaart', 25), (3, 'Arjen Robben', 27), (5, 'Fernando Gago', 36)","SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID  GROUP BY T1.ID HAVING count( *) > 1","(6, 'Rafael van der Vaart', 25), (3, 'Arjen Robben', 27), (5, 'Fernando Gago', 36)",medium,True,1,
216,museum_visit,"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?","SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id,  t1.name,  t1.Level_of_membership ORDER BY sum(t2.Total_spent) DESC LIMIT 1","(3, 'Arjen Robben', 1)","SELECT T1.visitor_ID, T2.Name, T2.Level_of_membership FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID  GROUP BY T1.visitor_ID  ORDER BY sum( T1.Total_spent) DESC LIMIT 1",,extra,False,0,
217,museum_visit,What are the id and name of the museum visited most times?,"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ,  t1.name ORDER BY count(*) DESC LIMIT 1","(2, 'Capital Plaza Museum')","SELECT T1.Museum_ID, T2.Name FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID  GROUP BY T1.Museum_ID  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
218,museum_visit,What is the name of the museum that had no visitor yet?,SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit),"('Jefferson Development Museum',), ('RiverPark Museum',), ('Place Tower Museum',), ('Central City District Residential Museum',)",SELECT T1.Name FROM museum AS T1 WHERE T1.Museum_ID NOT IN (SELECT T22.Museum_ID FROM visit AS T22        ),"('Jefferson Development Museum',), ('RiverPark Museum',), ('Place Tower Museum',), ('Central City District Residential Museum',)",hard,True,1,
219,museum_visit,Find the name and age of the visitor who bought the most tickets at once.,"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1","('Arjen Robben', 27)","SELECT T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID    ORDER BY T2.Num_of_Ticket DESC LIMIT 1","('Arjen Robben', 27)",hard,True,1,
220,museum_visit,What are the average and maximum number of tickets bought in all visits?,"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit","(10.5, 24)","SELECT avg( T1.Num_of_Ticket), max( T1.Num_of_Ticket) FROM visit AS T1","(10.5, 24)",medium,True,1,
221,museum_visit,What is the total ticket expense of the visitors whose membership level is 1?,SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1,"(570.83997,)",SELECT sum( T1.Total_spent) FROM visit AS T1 JOIN visitor AS T2 ON T1.visitor_ID = T2.ID WHERE T2.Level_of_membership = 1,"(570.83997,)",medium,True,1,
222,museum_visit,What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?,SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011,"('Fernando Gago',)",SELECT T1.Name FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year < '2009'     INTERSECT SELECT T4.Name FROM visitor AS T4 JOIN visit AS T5 ON T4.ID = T5.visitor_ID JOIN museum AS T6 ON T5.Museum_ID = T6.Museum_ID WHERE T6.Open_Year > '2011',"('Fernando Gago',)",extra,True,1,
223,museum_visit,Find the number of visitors who did not visit any museum opened after 2010.,SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010),"(3,)",SELECT count( *) FROM visitor AS T1 WHERE T1.ID NOT IN (SELECT T22.visitor_ID FROM visit AS T22 JOIN museum AS T23 ON T22.Museum_ID = T23.Museum_ID WHERE T23.Open_Year > '2010'       ),"(3,)",extra,True,1,
224,museum_visit,How many museums were opened after 2013 or before 2008?,SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008,"(1,)",SELECT count( *) FROM museum AS T1 WHERE T1.Open_Year > '2013' or T1.Open_Year < '2008',"(1,)",medium,True,1,
225,wta_1,Find the total number of players.,SELECT count(*) FROM players,"(20663,)",SELECT count( *) FROM players AS T1,"(20663,)",easy,True,1,
226,wta_1,Find the total number of matches.,SELECT count(*) FROM matches,"(278,)",SELECT count( *) FROM matches AS T1,"(278,)",easy,True,1,
227,wta_1,Find the average age of losers and winners of all matches.,"SELECT avg(loser_age) ,  avg(winner_age) FROM matches","(27.311213815813, 27.062177733552)","SELECT avg( T1.loser_age), avg( T1.winner_age) FROM matches AS T1","(27.311213815813, 27.062177733552)",medium,True,1,
228,wta_1,Find the average rank of winners in all matches.,SELECT avg(winner_rank) FROM matches,"(13.715827338129,)",SELECT avg( T1.winner_rank) FROM matches AS T1,"(13.715827338129,)",easy,True,1,
229,wta_1,Find the highest rank of losers in all matches.,SELECT min(loser_rank) FROM matches,"(1,)",SELECT min( T1.loser_rank) FROM matches AS T1,"(1,)",easy,True,1,
230,wta_1,find the number of distinct country codes of all players.,SELECT count(DISTINCT country_code) FROM players,"(154,)",SELECT DISTINCT count(DISTINCT T1.country_code) FROM players AS T1,"(154,)",easy,True,1,
231,wta_1,Find the number of distinct name of losers.,SELECT count(DISTINCT loser_name) FROM matches,"(49,)",SELECT DISTINCT count(DISTINCT T1.loser_name) FROM matches AS T1,"(49,)",easy,True,1,
232,wta_1,Find the name of tourney that has more than 10 matches.,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10,"('Us Open',), ('Australian Open',), ('Indian Wells',), ('Wimbledon',), ('Singapore',), ('French Open',), ('Cincinnati',), ('WTA Championships',), ('Miami',)",SELECT T1.tourney_name FROM matches AS T1  GROUP BY T1.tourney_name HAVING count( *) > 10,"('Us Open',), ('Australian Open',), ('Indian Wells',), ('Wimbledon',), ('Singapore',), ('French Open',), ('Cincinnati',), ('WTA Championships',), ('Miami',)",easy,True,1,
233,wta_1,List the names of all winners who played in both 2013 and 2016.,SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016,"('Serena Williams',), ('Petra Kvitova',), ('Victoria Azarenka',), ('Sara Errani',), ('Angelique Kerber',)",SELECT T1.winner_name FROM matches AS T1 WHERE T1.year = 2013     INTERSECT SELECT T2.winner_name FROM matches AS T2 WHERE T2.year = 2016,"('Serena Williams',), ('Petra Kvitova',), ('Victoria Azarenka',), ('Sara Errani',), ('Angelique Kerber',)",hard,True,1,
234,wta_1,List the number of all matches who played in years of 2013 or 2016.,SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016,"(170,)",SELECT count( *) FROM matches AS T1 WHERE T1.year = 2013 or T1.year = 2016,"(170,)",medium,True,1,
235,wta_1,What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'","('USA', 'Serena'), ('GER', 'Angelique')","SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships'     INTERSECT SELECT T3.country_code, T3.first_name FROM players AS T3 JOIN matches AS T4 ON T3.player_id = T4.winner_id WHERE T4.tourney_name = 'Australian Open'","('USA', 'Serena'), ('GER', 'Angelique')",extra,True,1,
236,wta_1,Find the first name and country code of the oldest player.,"SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1","('Thelma', 'AUS')","SELECT T1.first_name, T1.country_code FROM players AS T1    ORDER BY T1.birth_date ASC LIMIT 1","('Thelma', 'AUS')",medium,True,1,
237,wta_1,List the first and last name of all players who are left / L hand in the order of birth date.,"SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date","('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Alexandra', 'Kazanova'), ('Aya', 'El Akkad'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Diana Andreea', 'Gae'), ('Sanaa', 'Bhambri'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Simonetta', 'Miori'), ('Fatima', 'El Allami'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara'), ('Guadalupe', 'Moreno'), ('Lucie', 'Sipkova'), ('Xenia', 'Samoilova'), ('Kotomi', 'Takahata'), ('Stephanie', 'Theiler'), ('Maria', 'Prishlyak'), ('Grace', 'Leake'), ('Ioana Alexandra', 'Oprea'), ('Sanne', 'Bakker'), ('Katerina', 'Vankova'), ('Kristy', 'Frilling'), ('Tatiana', 'Bua'), ('Anastasia', 'Kontratevidi'), ('Chane', 'Hines'), ('Julia', 'Gavenko'), ('Yuuki', 'Tanaka'), ('Petra', 'Kvitova'), ('Leticia', 'Costas'), ('Sandra', 'Roma'), ('Nina', 'Mujezinovic'), ('Stella', 'Papaspyrou'), ('Chinami', 'Ogi'), ('Martina', 'Balogova'), ('Xinyun', 'Han'), ('Nicole', 'Riner'), ('Lara', 'Meccico'), ('Mai', 'Iwasaki'), ('Oksana', 'Kalashnikova'), ('Dipti', 'Srivastava'), ('Claudia', 'Mercado'), ('Margarita', 'Lazareva'), ('Shaozhuo', 'Liu'), ('Ana Maria', 'Chavez Franco'), ('Arantxa', 'Rus'), ('Ekaterina', 'Kamendova'), ('Monika', 'Tumova'), ('Gabriella', 'Boboc'), ('Ganna', 'Lukianchykova'), ('Sofia', 'Medina'), ('Ekaterina', 'Abaeva'), ('Andressa', 'Garcia'), ('Giulia', 'Bruzzone'), ('Catia', 'Rodrigues'), ('Danielle', 'Mills'), ('Flavia', 'Borges'), ('Misaki', 'Doi'), ('Veronika', 'Domagala'), ('Cindy', 'Chala'), ('Ksenia', 'Pervak'), ('Bianca', 'Botto'), ('Marianna', 'Natali'), ('Carolina', 'Orsi'), ('Aleksandra', 'Vukadinovic'), ('Elixane', 'Lechemia'), ('Sonya', 'Dayal'), ('Francesca', 'Campigotto'), ('Cristina Bianca', 'Danaila'), ('Tereza', 'Budilova'), ('Gemma', 'Praditngam'), ('Ekaterine', 'Gorgodze'), ('Dejana', 'Raickovic'), ('Alena', 'Gerasimova'), ('Quirine', 'Lemoine'), ('Chieh Yu', 'Hsu'), ('Anastasiya', 'Vasylyeva'), ('Alexia', 'Quartetto'), ('Joanna', 'Bougon'), ('Kristyna', 'Pliskova'), ('Elena', 'Bogdan'), ('Fiorella', 'Jerardino'), ('Julie', 'Gonzalez Rodriguez'), ('Alejandra', 'Barragan'), ('Renata', 'Bakieva'), ('Ashley', 'Krysiak'), ('Sarah Rebecca', 'Sekulic'), ('Na Lae', 'Han'), ('Natali', 'Coronel'), ('Kristyna', 'Hancarova'), ('Doroteja', 'Eric'), ('Kobkanok', 'Upapong'), ('Chanel', 'Simmonds'), ('Annie', 'Sullivan'), ('Xenia', 'Knoll'), ('Jenny Thuy', 'Le'), ('Francisca', 'Matos'), ('Christina', 'Madenoglou'), ('Alexandra', 'Avirvarei'), ('Georgina', 'Fedosenkova'), ('Alicia', 'Doms Golobart'), ('Amy', 'Hoburn'), ('Monica', 'Turewicz'), ('Martina', 'Zerbola'), ('Mashaal', 'Hameed'), ('Maria Sol', 'Carrasco'), ('Sabrina', 'Dos Reis'), ('Ruxandra', 'Ababii'), ('Daniella', 'Patton'), ('Veronika', 'Zavodska'), ('Briar', 'Preston'), ('Gabriela', 'Ce'), ('Amanda', 'Rodgers'), ('Constanze', 'Lotz'), ('Paula', 'Mocete Talamantes'), ('Verena', 'Gantschnig'), ('Ainhoa', 'Atucha Gomez'), ('Katarzyna', 'Kossowska'), ('Julia', 'Stamatova'), ('Vorranavaporn', 'Vorrarattanamongkol'), ('Michaela', 'Jasenakova'), ('Agustina Sol', 'Eskenazi'), ('Maja', 'Mladenovic'), ('Sandra', 'Garriga Catala'), ('Zanmarie', 'Pienaar'), ('Rita', 'Vilaca'), ('Julia', 'Kimmelmann'), ('Martina', 'Trevisan'), ('Charitomeni', 'Matoula'), ('Andreea', 'Istrate'), ('Sowjanya', 'Bavisetti'), ('Gabrielle', 'Moxey'), ('Viktoryia', 'Kisialeva'), ('Sarahi', 'Garcia Carrera'), ('Rachel', 'Girard'), ('Laura', 'Robson'), ('Kate', 'Vialle'), ('Anna', 'Montserrat Sanchez'), ('Carol', 'Augustine Benito'), ('Elena Teodora', 'Cadar'), ('Kamila', 'Pavelkova'), ('Arantxa', 'Sanchez'), ('Julia', 'Wachaczyk'), ('Ana Sofia', 'Sanchez'), ('Ecaterina', 'Oproiu'), ('Snigdha', 'Padamata'), ('Rona', 'Berisha'), ('Olga', 'Doroshina'), ('So Ra', 'Lee'), ('Brandy', 'Mina'), ('Natalie', 'Novakova'), ('Storm', 'Sanders'), ('Alexandra', 'Martinez'), ('Ysaline', 'Bonaventure'), ('Barbora', 'Trestikova'), ('Stefania', 'Hristov'), ('Ana Maria', 'Crisan'), ('Elpida', 'Papanelopoulou'), ('Tereza', 'Jankovska'), ('Rebecca', 'Andrade'), ('Kelly', 'Williford'), ('Tina', 'Rupert'), ('Mia Nicole', 'Eklund'), ('Bernarda', 'Pera'), ('Montserrat', 'Alonso'), ('Rosalie', 'Van Der Hoek'), ('Hedda', 'Odegaard'), ('Samira', 'Radjaa'), ('Zuzanna', 'Maciejewska'), ('Saumya', 'Vig'), ('Marie', 'Benoit'), ('Iga', 'Odrzywolek'), ('Shakhlo', 'Saidova'), ('Irina', 'Khromacheva'), ('Yuliya', 'Lysa'), ('Sophie', 'Blom'), ('Jennifer', 'Zerbone'), ('Kristina', 'Chasovskikh'), ('Maria Camila', 'Trujillo Hoyos'), ('Karina', 'Rovira'), ('Teodora Adina', 'Ardeleanu'), ('Yasmine', 'Rashad'), ('Judit', 'Vives Joan'), ('Sarah Beth', 'Askew'), ('Yasmine', 'Xantos'), ('Lea', 'Tholey'), ('Hikari', 'Yamamoto'), ('Ines Miren', 'De Pablo'), ('Stuti', 'Singh Tomar'), ('Naomi', 'Totka'), ('Polina', 'Bezsmertnaya'), ('Hannah', 'King'), ('Gabriele', 'Bertasiute'), ('Rebecca', 'Smaller'), ('Busra', 'Kayrun'), ('Stephani', 'Rodriguez'), ('Raquel', 'Montalvo'), ('Oana', 'Irimescu'), ('Taylor', 'Townsend'), ('Carmen', 'Blasco Robaina'), ('Giulia', 'Della Cioppa'), ('Nadege', 'Jorda'), ('Beatriz', 'Haddad Maia'), ('Nelise', 'Verster'), ('Eleonore', 'Barrere'), ('Anastasia', 'Prokopenko'), ('Dzina', 'Milovanovic'), ('Isabelle', 'Wallace'), ('Katelyn', 'Jackson'), ('Polina', 'Novoselova'), ('Maite', 'Cano'), ('Ria', 'Vaidya'), ('Ana Lorena', 'Garcia Navas'), ('Aayushi', 'Chouhan'), ('Ivona', 'Cudina'), ('Karina', 'Gurgenyan'), ('Maria', 'Patrascu'), ('Denisa', 'Chereches'), ('Mirabelle', 'Njoze'), ('Vasanti', 'Shinde'), ('Amanda', 'Schneider'), ('Katharina', 'Herpertz'), ('Tayisiya', 'Morderger'), ('Tamara', 'Tomic'), ('Maria Fernanda', 'Herazo Gonzalez'), ('Andra Maria', 'Nitescu'), ('Micheline', 'Aubuchon'), ('Ilayda', 'Yondem'), ('Kanako', 'Osafune'), ('Birgit', 'Burk'), ('Anastasiya', 'Komardina'), ('Nina', 'Holanova'), ('Jil Belen', 'Teichmann'), ('Francesca', 'Di Lorenzo'), ('Natsuho', 'Arakawa'), ('Emerald', 'Able'), ('Manca', 'Pislak'), ('Irys', 'Ekani'), ('Veronica', 'Miroshnichenko'), ('Martina', 'Capurro Taborda'), ('Mariam', 'Bolkvadze'), ('Diana', 'Valverde'), ('Do Hee', 'Bae'), ('Daniela', 'Morales Beckmann'), ('Ioana Diana', 'Pietroiu'), ('Luisa Fernanda', 'Echeverry Rodriguez'), ('Mayuka', 'Aikawa'), ('Nicole', 'Frenkel'), ('Daria', 'Kruzhkova'), ('Alejandra', 'Tamayo Gomez'), ('Tereza', 'Koplova'), ('Chiara', 'Lommer'), ('Laura', 'Illanes'), ('Olga', 'Fridman'), ('Ana Paula', 'Leal'), ('Shiraz', 'Bronstein'), ('Nicole', 'Bunea'), ('Charlotte', 'Robillard Millette'), ('Ashley', 'Kratzer'), ('Momoka', 'Chimura'), ('Anna', 'Slovakova'), ('Ai Qi', 'Chen'), ('Jiaying', 'He'), ('Ysabel', 'Gonzalez Rico'), ('Andreea', 'Stanescu'), ('Marketa', 'Vondrousova'), ('Ecaterina', 'Ivasco'), ('Ivon', 'Mihaleva'), ('Jasmine', 'Boyd'), ('Andrea', 'Arratia Fernandez'), ('Kayla', 'Day'), ('Ekaterina', 'Davletova'), ('Irina', 'Cantos Siemers'), ('Oceane', 'Mialon'), ('Watsachol', 'Sawasdee'), ('Ellen', 'Ashley'), ('Mila', 'Mejic'), ('Natalia', 'Nikolopoulou'), ('Marta', 'Del Pino Maturano'), ('Jayci', 'Goldsmith'), ('Yang', 'Lee'), ('Isabella', 'Tcherkes Zade'), ('Mara', 'Vidal'), ('Taylor', 'Johnson'), ('Julia', 'Vulpio'), ('Dagmar', 'Zdrubecka'), ('Olga', 'Danilovic'), ('Xiyu', 'Wang'), ('Lina', 'Shokry'), ('Ya Hsin', 'Lee'), ('Ruxandra', 'Schech'), ('Yasmina', 'Karimjanova'), ('Lara', 'Biter'), ('Najah', 'Dawson'), ('Giulia', 'Morlet'), ('Matilde', 'Mariani'), ('Isabella', 'Nunez'), ('Betina', 'Tokac'), ('Noa', 'Krznaric')","SELECT T1.first_name, T1.last_name FROM players AS T1 WHERE T1.hand = 'L'    ORDER BY T1.birth_date ASC","('Ann', 'Jones'), ('Wendy', 'Gilchrist'), ('Martina', 'Navratilova'), ('Mary', 'Carillo'), ('Katerina', 'Bohmova'), ('Petra', 'Delhees Jauch'), ('Nancy', 'Loeffler Caro'), ('Lise', 'Gregory'), ('Rene', 'Collins'), ('Nicole', 'Arendt'), ('Florencia', 'Labat'), ('Sabine', 'Appelmans'), ('Andreea', 'Ehritt Vanc'), ('Monica', 'Seles'), ('Gala', 'Leon Garcia'), ('Karen', 'Cross'), ('Julie', 'Pullin'), ('Vanessa', 'Webb'), ('Elena', 'Tatarkova'), ('Anca', 'Barna'), ('Francesca', 'Lubiani'), ('Gaelle', 'Widmer'), ('Amanda', 'Keen'), ('Amanda', 'Augustus'), ('Rita', 'Kuti Kis'), ('Amelie', 'Cocheteux'), ('Amelie', 'Castera'), ('Saori', 'Obata'), ('Marine', 'Nizri Spiegel'), ('Patty', 'Schnyder'), ('Julie', 'Ditty'), ('Joana', 'Cortez'), ('Barbara', 'Schwartz'), ('Ludmilla', 'Varmuza'), ('Magui', 'Serna'), ('Amanda', 'Grahame'), ('Kim', 'Kilsdonk'), ('Emilie', 'Loit'), ('Erika', 'Pineider'), ('Anne Gaelle', 'Sidot'), ('Erica', 'Biro'), ('Stephanie', 'Kovacic'), ('Sybille', 'Bammer'), ('Lisa', 'Fritz'), ('Maja', 'Matevzic'), ('Leanne', 'Baker'), ('Aurelie', 'Vedy'), ('Carla', 'Tiene'), ('Erika', 'Venere'), ('Jelena', 'Kostanic Tosic'), ('Clarisa', 'Fernandez'), ('Ansley', 'Cargill'), ('Dimana', 'Krastevitch'), ('Maria Jose', 'Martinez Sanchez'), ('Zerene', 'Reyes'), ('Melinda', 'Czink'), ('Sandra', 'Klemenschits'), ('Maria Elizabeth', 'Lopez'), ('Salome', 'Llaguno'), ('Lindsay', 'Cox'), ('Iveta', 'Benesova'), ('Eugenia', 'Chialvo'), ('Chun Yan', 'He'), ('Maria Fernanda', 'Alves'), ('Emily', 'Quin'), ('Fernanda', 'Oliveira Da Silva'), ('Annabel', 'Blow'), ('Julia', 'Smith'), ('Ana Lucia', 'Migliarini De Leon'), ('Elizabeth', 'Bondi'), ('Galina', 'Fokina'), ('Elise', 'Tamaela'), ('Bit Na', 'Lee'), ('Sonia', 'Iacovacci'), ('Mariana Pires', 'Junqueira'), ('Natalia', 'Bogdanova'), ('Irina', 'Smirnova'), ('Meghha', 'Vakaria'), ('Angela', 'Haynes'), ('Karly', 'Olson'), ('Casey', 'Dellacqua'), ('Kathrin', 'Hegel'), ('Beatrix', 'Csordas'), ('Zsuzsanna', 'Babos'), ('Emily', 'Applegate'), ('Olga', 'Pasichnichenko'), ('Theresa', 'Logar'), ('Jin A', 'Lee'), ('Hannah', 'Kuervers'), ('Andreea', 'Novaceanu'), ('Valentina', 'Tizzano'), ('Helen', 'Fritche'), ('Sandra', 'Sasidharan'), ('Isha', 'Lakhani'), ('Krushmi', 'Chheda'), ('Ljubica', 'Avramovic'), ('Avel Romaly', 'Coronado'), ('Shadisha', 'Robinson'), ('Carla', 'Zabaleta'), ('Diana', 'Arutyunova'), ('Cecile', 'Baijot'), ('Laura', 'Rocchi'), ('Rie', 'Imai'), ('Danielle', 'Harmsen'), ('Alejandra', 'Obregon'), ('Ariela', 'Perez'), ('Vasilisa', 'Davydova'), ('Emilia', 'Yorio'), ('Lizaan', 'Du Plessis'), ('Claire', 'Feuerstein'), ('Alexandria', 'Liles'), ('Katharine', 'Baker'), ('Emma', 'Laine'), ('Geraldine', 'Roma'), ('Alexandra', 'Kazanova'), ('Aya', 'El Akkad'), ('Allison', 'Baker'), ('Lucy', 'Fletcher'), ('Monika', 'Musilova'), ('Jitka', 'Gavdunova'), ('Elena', 'Petrucciano'), ('Varvara', 'Lepchenko'), ('Claire', 'De Gubernatis'), ('Seheno', 'Razafindramaso'), ('Karolina', 'Soor'), ('Melisa', 'Cabrera Handt'), ('Shraddha', 'Lodha'), ('Sylvia', 'Krywacz'), ('Amina', 'El Sahn'), ('Hendrike Lea', 'Heitmann'), ('Dunja', 'Antunovic'), ('Micaela', 'Acosta'), ('Katerina', 'Bohmova'), ('Catherine', 'Grotz'), ('Yurika', 'Sema'), ('Sheng Nan', 'Sun'), ('Lucie', 'Safarova'), ('Jitka', 'Kleisnerova'), ('Carolina', 'Escamilla'), ('Tapiwa', 'Marobela'), ('Punam', 'Reddy'), ('Katia', 'Sabate Orera'), ('Shana', 'Claes'), ('Chrissie', 'Seredni'), ('Yui', 'Nagasawa'), ('Marcela', 'Vojtiskova'), ('Seul Ki', 'Chin'), ('Nina', 'Munch Soegaard'), ('Hannah', 'Grady'), ('Karen', 'Castiblanco'), ('Angelique', 'Kerber'), ('Lauren', 'Lui'), ('Rana', 'Tharwat Hafez'), ('Nicole', 'Grunwald'), ('Ana', 'Veselinovic'), ('Diana Andreea', 'Gae'), ('Sanaa', 'Bhambri'), ('Ana', 'Beltran Trigueros'), ('Barbora', 'Bozkova'), ('Camila', 'Belassi'), ('Violette', 'Huck'), ('Megumi', 'Fukui'), ('Rita', 'Gouveia'), ('Mihaela', 'Buzarnescu'), ('Liset', 'Brito Herrera'), ('Paulina', 'Jorquera'), ('Ekaterina', 'Makarova'), ('Dessislava', 'Mladenova'), ('Sanaz', 'Marand'), ('Cristina', 'Greco Naccarato'), ('Cagla', 'Urcu'), ('Liege', 'Vieira'), ('Chang', 'Xu'), ('Jessica', 'Sweeting'), ('Yi Fan', 'Xu'), ('Eloisa Maria', 'Compostizo De Andres'), ('Karina', 'Porushkevich'), ('Ornella', 'Gentile'), ('Valeria', 'Casillo'), ('Bianca Ioana', 'Bonifate'), ('Michelle', 'Russ'), ('Monika', 'Lalewicz'), ('Amandine', 'Cazeaux'), ('Simonetta', 'Miori'), ('Fatima', 'El Allami'), ('Gabriela', 'Roux'), ('Sherazad', 'Benamar'), ('Sherazad', 'Reix'), ('Zora', 'Vlckova'), ('Naomi', 'Cavaday'), ('Nathalia', 'Rossi'), ('Maria Eugenia', 'Roca Recarey'), ('Lauren', 'Jones'), ('Roxane', 'Vaisemberg'), ('Ivana', 'Belejova'), ('Petra', 'Vogel'), ('Majdouline', 'Akrate'), ('Laura', 'Sadria'), ('Ia', 'Jikia'), ('Alessandra', 'Caprara'), ('Guadalupe', 'Moreno'), ('Lucie', 'Sipkova'), ('Xenia', 'Samoilova'), ('Kotomi', 'Takahata'), ('Stephanie', 'Theiler'), ('Maria', 'Prishlyak'), ('Grace', 'Leake'), ('Ioana Alexandra', 'Oprea'), ('Sanne', 'Bakker'), ('Katerina', 'Vankova'), ('Kristy', 'Frilling'), ('Tatiana', 'Bua'), ('Anastasia', 'Kontratevidi'), ('Chane', 'Hines'), ('Julia', 'Gavenko'), ('Yuuki', 'Tanaka'), ('Petra', 'Kvitova'), ('Leticia', 'Costas'), ('Sandra', 'Roma'), ('Nina', 'Mujezinovic'), ('Stella', 'Papaspyrou'), ('Chinami', 'Ogi'), ('Martina', 'Balogova'), ('Xinyun', 'Han'), ('Nicole', 'Riner'), ('Lara', 'Meccico'), ('Mai', 'Iwasaki'), ('Oksana', 'Kalashnikova'), ('Dipti', 'Srivastava'), ('Claudia', 'Mercado'), ('Margarita', 'Lazareva'), ('Shaozhuo', 'Liu'), ('Ana Maria', 'Chavez Franco'), ('Arantxa', 'Rus'), ('Ekaterina', 'Kamendova'), ('Monika', 'Tumova'), ('Gabriella', 'Boboc'), ('Ganna', 'Lukianchykova'), ('Sofia', 'Medina'), ('Ekaterina', 'Abaeva'), ('Andressa', 'Garcia'), ('Giulia', 'Bruzzone'), ('Catia', 'Rodrigues'), ('Danielle', 'Mills'), ('Flavia', 'Borges'), ('Misaki', 'Doi'), ('Veronika', 'Domagala'), ('Cindy', 'Chala'), ('Ksenia', 'Pervak'), ('Bianca', 'Botto'), ('Marianna', 'Natali'), ('Carolina', 'Orsi'), ('Aleksandra', 'Vukadinovic'), ('Elixane', 'Lechemia'), ('Sonya', 'Dayal'), ('Francesca', 'Campigotto'), ('Cristina Bianca', 'Danaila'), ('Tereza', 'Budilova'), ('Gemma', 'Praditngam'), ('Ekaterine', 'Gorgodze'), ('Dejana', 'Raickovic'), ('Alena', 'Gerasimova'), ('Quirine', 'Lemoine'), ('Chieh Yu', 'Hsu'), ('Anastasiya', 'Vasylyeva'), ('Alexia', 'Quartetto'), ('Joanna', 'Bougon'), ('Kristyna', 'Pliskova'), ('Elena', 'Bogdan'), ('Fiorella', 'Jerardino'), ('Julie', 'Gonzalez Rodriguez'), ('Alejandra', 'Barragan'), ('Renata', 'Bakieva'), ('Ashley', 'Krysiak'), ('Sarah Rebecca', 'Sekulic'), ('Na Lae', 'Han'), ('Natali', 'Coronel'), ('Kristyna', 'Hancarova'), ('Doroteja', 'Eric'), ('Kobkanok', 'Upapong'), ('Chanel', 'Simmonds'), ('Annie', 'Sullivan'), ('Xenia', 'Knoll'), ('Jenny Thuy', 'Le'), ('Francisca', 'Matos'), ('Christina', 'Madenoglou'), ('Alexandra', 'Avirvarei'), ('Georgina', 'Fedosenkova'), ('Alicia', 'Doms Golobart'), ('Amy', 'Hoburn'), ('Monica', 'Turewicz'), ('Martina', 'Zerbola'), ('Mashaal', 'Hameed'), ('Maria Sol', 'Carrasco'), ('Sabrina', 'Dos Reis'), ('Ruxandra', 'Ababii'), ('Daniella', 'Patton'), ('Veronika', 'Zavodska'), ('Briar', 'Preston'), ('Gabriela', 'Ce'), ('Amanda', 'Rodgers'), ('Constanze', 'Lotz'), ('Paula', 'Mocete Talamantes'), ('Verena', 'Gantschnig'), ('Ainhoa', 'Atucha Gomez'), ('Katarzyna', 'Kossowska'), ('Julia', 'Stamatova'), ('Vorranavaporn', 'Vorrarattanamongkol'), ('Michaela', 'Jasenakova'), ('Agustina Sol', 'Eskenazi'), ('Maja', 'Mladenovic'), ('Sandra', 'Garriga Catala'), ('Zanmarie', 'Pienaar'), ('Rita', 'Vilaca'), ('Julia', 'Kimmelmann'), ('Martina', 'Trevisan'), ('Charitomeni', 'Matoula'), ('Andreea', 'Istrate'), ('Sowjanya', 'Bavisetti'), ('Gabrielle', 'Moxey'), ('Viktoryia', 'Kisialeva'), ('Sarahi', 'Garcia Carrera'), ('Rachel', 'Girard'), ('Laura', 'Robson'), ('Kate', 'Vialle'), ('Anna', 'Montserrat Sanchez'), ('Carol', 'Augustine Benito'), ('Elena Teodora', 'Cadar'), ('Kamila', 'Pavelkova'), ('Arantxa', 'Sanchez'), ('Julia', 'Wachaczyk'), ('Ana Sofia', 'Sanchez'), ('Ecaterina', 'Oproiu'), ('Snigdha', 'Padamata'), ('Rona', 'Berisha'), ('Olga', 'Doroshina'), ('So Ra', 'Lee'), ('Brandy', 'Mina'), ('Natalie', 'Novakova'), ('Storm', 'Sanders'), ('Alexandra', 'Martinez'), ('Ysaline', 'Bonaventure'), ('Barbora', 'Trestikova'), ('Stefania', 'Hristov'), ('Ana Maria', 'Crisan'), ('Elpida', 'Papanelopoulou'), ('Tereza', 'Jankovska'), ('Rebecca', 'Andrade'), ('Kelly', 'Williford'), ('Tina', 'Rupert'), ('Mia Nicole', 'Eklund'), ('Bernarda', 'Pera'), ('Montserrat', 'Alonso'), ('Rosalie', 'Van Der Hoek'), ('Hedda', 'Odegaard'), ('Samira', 'Radjaa'), ('Zuzanna', 'Maciejewska'), ('Saumya', 'Vig'), ('Marie', 'Benoit'), ('Iga', 'Odrzywolek'), ('Shakhlo', 'Saidova'), ('Irina', 'Khromacheva'), ('Yuliya', 'Lysa'), ('Sophie', 'Blom'), ('Jennifer', 'Zerbone'), ('Kristina', 'Chasovskikh'), ('Maria Camila', 'Trujillo Hoyos'), ('Karina', 'Rovira'), ('Teodora Adina', 'Ardeleanu'), ('Yasmine', 'Rashad'), ('Judit', 'Vives Joan'), ('Sarah Beth', 'Askew'), ('Yasmine', 'Xantos'), ('Lea', 'Tholey'), ('Hikari', 'Yamamoto'), ('Ines Miren', 'De Pablo'), ('Stuti', 'Singh Tomar'), ('Naomi', 'Totka'), ('Polina', 'Bezsmertnaya'), ('Hannah', 'King'), ('Gabriele', 'Bertasiute'), ('Rebecca', 'Smaller'), ('Busra', 'Kayrun'), ('Stephani', 'Rodriguez'), ('Raquel', 'Montalvo'), ('Oana', 'Irimescu'), ('Taylor', 'Townsend'), ('Carmen', 'Blasco Robaina'), ('Giulia', 'Della Cioppa'), ('Nadege', 'Jorda'), ('Beatriz', 'Haddad Maia'), ('Nelise', 'Verster'), ('Eleonore', 'Barrere'), ('Anastasia', 'Prokopenko'), ('Dzina', 'Milovanovic'), ('Isabelle', 'Wallace'), ('Katelyn', 'Jackson'), ('Polina', 'Novoselova'), ('Maite', 'Cano'), ('Ria', 'Vaidya'), ('Ana Lorena', 'Garcia Navas'), ('Aayushi', 'Chouhan'), ('Ivona', 'Cudina'), ('Karina', 'Gurgenyan'), ('Maria', 'Patrascu'), ('Denisa', 'Chereches'), ('Mirabelle', 'Njoze'), ('Vasanti', 'Shinde'), ('Amanda', 'Schneider'), ('Katharina', 'Herpertz'), ('Tayisiya', 'Morderger'), ('Tamara', 'Tomic'), ('Maria Fernanda', 'Herazo Gonzalez'), ('Andra Maria', 'Nitescu'), ('Micheline', 'Aubuchon'), ('Ilayda', 'Yondem'), ('Kanako', 'Osafune'), ('Birgit', 'Burk'), ('Anastasiya', 'Komardina'), ('Nina', 'Holanova'), ('Jil Belen', 'Teichmann'), ('Francesca', 'Di Lorenzo'), ('Natsuho', 'Arakawa'), ('Emerald', 'Able'), ('Manca', 'Pislak'), ('Irys', 'Ekani'), ('Veronica', 'Miroshnichenko'), ('Martina', 'Capurro Taborda'), ('Mariam', 'Bolkvadze'), ('Diana', 'Valverde'), ('Do Hee', 'Bae'), ('Daniela', 'Morales Beckmann'), ('Ioana Diana', 'Pietroiu'), ('Luisa Fernanda', 'Echeverry Rodriguez'), ('Mayuka', 'Aikawa'), ('Nicole', 'Frenkel'), ('Daria', 'Kruzhkova'), ('Alejandra', 'Tamayo Gomez'), ('Tereza', 'Koplova'), ('Chiara', 'Lommer'), ('Laura', 'Illanes'), ('Olga', 'Fridman'), ('Ana Paula', 'Leal'), ('Shiraz', 'Bronstein'), ('Nicole', 'Bunea'), ('Charlotte', 'Robillard Millette'), ('Ashley', 'Kratzer'), ('Momoka', 'Chimura'), ('Anna', 'Slovakova'), ('Ai Qi', 'Chen'), ('Jiaying', 'He'), ('Ysabel', 'Gonzalez Rico'), ('Andreea', 'Stanescu'), ('Marketa', 'Vondrousova'), ('Ecaterina', 'Ivasco'), ('Ivon', 'Mihaleva'), ('Jasmine', 'Boyd'), ('Andrea', 'Arratia Fernandez'), ('Kayla', 'Day'), ('Ekaterina', 'Davletova'), ('Irina', 'Cantos Siemers'), ('Oceane', 'Mialon'), ('Watsachol', 'Sawasdee'), ('Ellen', 'Ashley'), ('Mila', 'Mejic'), ('Natalia', 'Nikolopoulou'), ('Marta', 'Del Pino Maturano'), ('Jayci', 'Goldsmith'), ('Yang', 'Lee'), ('Isabella', 'Tcherkes Zade'), ('Mara', 'Vidal'), ('Taylor', 'Johnson'), ('Julia', 'Vulpio'), ('Dagmar', 'Zdrubecka'), ('Olga', 'Danilovic'), ('Xiyu', 'Wang'), ('Lina', 'Shokry'), ('Ya Hsin', 'Lee'), ('Ruxandra', 'Schech'), ('Yasmina', 'Karimjanova'), ('Lara', 'Biter'), ('Najah', 'Dawson'), ('Giulia', 'Morlet'), ('Matilde', 'Mariani'), ('Isabella', 'Nunez'), ('Betina', 'Tokac'), ('Noa', 'Krznaric')",medium,True,1,
238,wta_1,Find the first name and country code of the player who did the most number of tours.,"SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1","('USA', 'Julia')","SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id    ORDER BY T2.tours DESC LIMIT 1","('USA', 'Julia')",hard,True,1,
239,wta_1,Find the year that has the most number of matches.,SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,"(2016,)",SELECT T1.year FROM matches AS T1  GROUP BY T1.year  ORDER BY count( *) DESC LIMIT 1,"(2016,)",hard,True,1,
240,wta_1,Find the name and rank points of the winner who won the most times.,"SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name, winner_rank_points ORDER BY count(*) DESC LIMIT 1","('Elena Vesnina', 2340)","SELECT T1.winner_name, T1.winner_rank_points FROM matches AS T1  GROUP BY T1.winner_name, T1.winner_rank_points  ORDER BY count( *) DESC LIMIT 1","('Elena Vesnina', 2340)",hard,True,1,
241,wta_1,Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.,SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,"('Serena Williams',)",SELECT T1.winner_name FROM matches AS T1 WHERE T1.tourney_name = 'Australian Open'   ORDER BY T1.winner_rank_points DESC LIMIT 1,"('Serena Williams',)",hard,True,1,
242,wta_1,find the names of loser and winner who played in the match with greatest number of minutes.,"SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1","('Petra Kvitova', 'Angelique Kerber')","SELECT T1.winner_name, T1.loser_name FROM matches AS T1    ORDER BY T1.minutes DESC LIMIT 1","('Petra Kvitova', 'Angelique Kerber')",medium,True,1,
243,wta_1,Find the total ranking points for each player and their first name.,"SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name","(10322, 'Iva'), (683, 'Qianhui'), (72, 'Carolyn'), (756, 'Magy'), (2142854, 'Victoria'), (6948, 'Ionela Andreea'), (2280, 'Kajsa'), (333, 'Tijana'), (1401, 'Rita'), (30191, 'Viktoria'), (683, 'Marcela Guimaraes'), (148, 'Sarai Delfina'), (336, 'Sofico'), (18, 'Shiori'), (6146, 'Valerie'), (97, 'Melany Solange'), (310215, 'Christina'), (594281, 'Tamarine'), (1108372, 'Lucie'), (21, 'Ana Luisa'), (13643, 'Angelica'), (5592, 'Makiho'), (30972, 'Nicha'), (11216, 'Eduarda'), (15, 'Jin'), (32169, 'Karen'), (3880, 'Emi'), (27, 'Carlota'), (15, 'Sunae'), (1633, 'Louise'), (293366, 'Irina Camelia'), (36, 'Justina'), (772, 'Yuanyi'), (71, 'Yasmyn'), (8146, 'Nicoleta Catalina'), (119279, 'Diana'), (6650, 'Seung Yeon'), (7, 'Axana'), (4619, 'Adrijana'), (23976, 'Doroteja'), (106927, 'Vitalia'), (281, 'Laura D'), (50700, 'Louisa'), (128183, 'Junri'), (63, 'Milica'), (23195, 'Riko'), (62977, 'Elizaveta'), (18, 'Jamilya'), (4703, 'Dunja'), (8145, 'Ting Fei'), (58741, 'Ashleigh'), (148, 'Schena'), (412872, 'Garbine'), (121, 'Zhuoma'), (27452, 'Rushmi'), (24062, 'Keren'), (135, 'Lizaveta'), (23897, 'Lavinia'), (914981, 'Sara'), (1096, 'Oana'), (88542, 'Heidi'), (177170, 'Kurumi'), (13686, 'Natalija'), (51803, 'An Sophie'), (916, 'Iga'), (87, 'Zaineb'), (276, 'Sirui'), (10705, 'Xinyu'), (17819, 'Jesika'), (323, 'Malika'), (762, 'India'), (12388, 'Kim Alice'), (567, 'Eleonore'), (553107, 'Johanna'), (1180, 'Miriana'), (1272285, 'Marion'), (2052, 'Zalina'), (156531, 'Julie'), (7797, 'Hulya'), (1624, 'Marlies'), (8939, 'Dalia'), (16663, 'Daniella'), (1553, 'Jiahui'), (4535, 'Xu Liu'), (1090, 'Marianne'), (469, 'Rachel'), (214121, 'Kiki'), (100848, 'Ivana'), (7605, 'Deborah'), (64525, 'Ling'), (206, 'Mariia'), (117, 'Shir'), (35957, 'Aleksandrina'), (103659, 'Magda'), (1894, 'Katherine Gabriela'), (128509, 'Yayuk'), (148701, 'Raluca'), (83476, 'Isabella'), (26897, 'Ekaterine'), (320, 'Suellen'), (1440, 'Emilie'), (559, 'Yuqi'), (48, 'Leylah Annie'), (66, 'Salma'), (377, 'Theresa'), (444303, 'Katarina'), (14709, 'Ran'), (34570, 'Eri'), (162, 'Muge'), (42, 'Wan Yi'), (26280, 'Peangtarn'), (111, 'Caroline B'), (120, 'Hsin Yuan'), (7998, 'Gaia'), (4543, 'Tyra'), (13717, 'Agnese'), (543, 'Ivette'), (13, 'Giorgie'), (51, 'Andra Maria'), (3627, 'Carolina Meligeni Rodrigues'), (392, 'Draginja'), (531, 'Si Qi'), (776, 'Karola Patricia'), (590911, 'Sabine'), (7843, 'Katherine'), (78513, 'Nikola'), (109192, 'Martina'), (96, 'Minami'), (647811, 'Anne'), (31741, 'Gioia'), (1614, 'Domenica'), (1544, 'Sultan'), (206375, 'Yuliya'), (2217, 'Ai Wen'), (54, 'Maftuna'), (1236, 'Kylie'), (802, 'Asiya'), (36, 'Eugenia'), (18211, 'Elixane'), (1103, 'Robyn'), (13254, 'Megan'), (163, 'Mafalda'), (401857, 'Magdalena'), (942, 'Kerstin'), (299698, 'Irina'), (4777, 'Isabelle'), (1609, 'Emmanuelle'), (6288, 'Yevgeniya'), (230, 'Micaela'), (898, 'Fatimah'), (166760, 'Brenda'), (95, 'Cecilie Lundgaard'), (12402, 'Tena'), (15001, 'Chantal'), (96, 'Mami'), (9093, 'Carolin'), (288, 'Ailen'), (36696, 'Ana Clara'), (13241, 'Nathaly'), (138782, 'Alexa'), (857, 'Naoko'), (2489, 'Malin'), (1077, 'Carmen Raluca'), (1225, 'Erina'), (555, 'Kristina N'), (11218, 'Ema'), (24595, 'Katharina'), (286, 'Lesedi Sheya'), (169500, 'Vesna'), (109, 'Dorien'), (7898, 'Lisa Maria'), (3, 'Judith'), (6, 'Muazzez'), (1884, 'Trang'), (160, 'Dagmara'), (31620, 'Cindy'), (204801, 'Eugenie'), (304, 'Lulu'), (3094, 'Nan Nan'), (13006, 'Poojashree'), (741, 'Rashmi'), (8079, 'Ellie'), (4294, 'Oana Georgeta'), (9, 'Adva'), (522, 'Sharon Sanchana'), (653, 'Kennedy'), (52274, 'Conny'), (83659, 'Tadeja'), (96, 'Smriti'), (113359, 'Saisai'), (173, 'Leslie'), (2362, 'Libby'), (6, 'Shreya'), (2927, 'Mizuno'), (998, 'Yukina'), (1119, 'Brittany'), (71645, 'Vanessa'), (9938, 'Min Hwa'), (435038, 'Kateryna'), (122, 'Hikari'), (99, 'Diana Maria'), (11596, 'Anja'), (595, 'Laili'), (22, 'Caty'), (20368, 'Elizabeth'), (775, 'Guzal'), (713, 'Ebony'), (1192, 'Demi'), (46355, 'Jin A'), (1297, 'Gloria'), (390, 'Maxine'), (163239, 'Naomi'), (68, 'Aastha'), (68207, 'Amanda'), (2524, 'Alessia'), (291, 'Ivanka'), (5416, 'Jaqueline Adina'), (6369, 'Dianne'), (2166, 'Zhanlan'), (100, 'Jiatian'), (147, 'Madeline'), (229391, 'Yung Jan'), (919, 'Kanika'), (645, 'Ludmila'), (12295, 'Robin'), (18286, 'Marketa'), (7975, 'Ching Wen'), (857, 'Dariya'), (106762, 'Claudine'), (32581, 'Claudia'), (4106, 'Sharmada'), (4787, 'Margot'), (75414, 'Cristina Andreea'), (2061, 'Saray'), (202172, 'Camila'), (667, 'Chi Fan'), (33, 'Marcelina'), (59412, 'Cristina'), (126, 'Apichaya'), (11032, 'Benedetta'), (1920, 'Beatriz Maria'), (594217, 'Lisa'), (61839, 'Yi Miao'), (54172, 'Lyudmyla'), (8406, 'Kaori'), (17382, 'Indy'), (129, 'Juliana Rocha'), (7062, 'Brooke'), (289, 'Giovanna'), (159, 'Amrita'), (219, 'Agata Jadwiga'), (1142, 'Ilka'), (106375, 'Maria Teresa'), (6564, 'Seo Kyung'), (9, 'Yu Tong'), (1017069, 'Anna'), (99, 'Asha'), (28045, 'Adriana'), (171, 'Melissa Ishuan'), (2249, 'Theo'), (299530, 'Vania'), (14942, 'Lena Marie'), (187, 'Chantelle'), (13041, 'Vivien'), (434692, 'Arantxa'), (62, 'Ann'), (9926, 'Valentine'), (75, 'Beatriz Magdalena'), (187, 'Xin Yu'), (1152, 'Bhuvana'), (401409, 'Varvara'), (10507, 'Albina'), (677, 'Yoshimi'), (87263, 'Elitsa'), (562, 'Carlotta'), (4705, 'Kelly'), (54140, 'Tamara'), (538, 'Clementina Eugenia'), (907, 'Anna Katalina'), (636, 'Elizaveta Anna'), (53401, 'Barbara'), (2338, 'Anamika'), (725, 'Brandy'), (102022, 'Kyra'), (997, 'Vladica'), (1991, 'Jillian'), (7027, 'Dea'), (1397, 'Stephanie Mariel'), (1858, 'Mi Rae'), (4197, 'Lea'), (22443, 'Yi Jing'), (2850, 'Berfu'), (8301, 'Hyun Hui'), (323, 'Maria Andrea'), (141, 'Deeon'), (45, 'Yuval'), (29442, 'Annalisa'), (33301, 'Chia Jung'), (298, 'Kseniia'), (1873, 'Haruna'), (4053, 'Cornelia'), (369810, 'Alisa'), (26779, 'Chen'), (75337, 'Tetiana'), (1535, 'Nagi'), (21360, 'Yue Yue'), (164, 'Donika'), (5051, 'Tayisiya'), (160, 'Anda'), (14212, 'Natasa'), (14865, 'Jasmine'), (154, 'Mahak'), (324, 'Suzuho'), (11320, 'Maiko'), (427, 'Mihika'), (152, 'Leah'), (141, 'Ah'), (43779, 'Elise'), (143, 'Gebriela'), (90, 'Michela'), (6470, 'Vladimira'), (414, 'Juliana'), (4941, 'Ao'), (803, 'Rosalia'), (980, 'Nazari'), (3497, 'Ola'), (6906, 'Morgane'), (40, 'Johana'), (2820, 'Snehadevi S'), (20481, 'Marija'), (9338, 'Sakiko'), (208108, 'Sesil'), (20236, 'Zhaoxuan'), (14608, 'Manon'), (515957, 'Barbora'), (259116, 'Nuria'), (11251, 'Yasmin'), (87958, 'Danka'), (320083, 'Eva'), (5425, 'Nidhi'), (27804, 'Ysaline'), (359374, 'Anna Lena'), (876, 'Lutfiye'), (2706, 'Nives'), (8507, 'Danielle Rose'), (2177, 'Anita'), (1235, 'Maia'), (405, 'Eleonora'), (269, 'Paula Andrea'), (29852, 'Sung Hee'), (403127, 'Paola'), (117, 'Doga Selen'), (443695, 'Iveta'), (628, 'Jazzamay'), (13141, 'Chinami'), (791, 'Aymet'), (5216, 'Alicja'), (377, 'Lusine'), (2133, 'Ornella'), (72682, 'Maria Joao'), (11623, 'Lizette'), (15248, 'Yuliana'), (1589, 'Lucrezia'), (15, 'Moulika'), (3187, 'Bunyawi'), (265, 'Alessondra'), (17185, 'Lucia'), (625, 'Ksenija'), (85, 'Kariann'), (112570, 'Teliana'), (83, 'Maileen'), (15401, 'Chihiro'), (20269, 'Yumi'), (2369, 'Aliona'), (1054, 'Suzy'), (1003, 'Karis'), (26624, 'Basak'), (447434, 'Nicole'), (16494, 'Nanuli'), (276, 'Chompoothip'), (2076949, 'Caroline'), (66271, 'Reka Luca'), (576, 'Guillermina'), (219, 'Adnya'), (2221, 'Vendula'), (464, 'Andrea Renee'), (5393, 'Kimberley'), (116, 'Clara'), (103, 'Elaine'), (75850, 'Anastasiya'), (1848, 'Georgia Andreea'), (63013, 'Nudnida'), (1483, 'Shu Ying'), (703, 'Aida'), (2929, 'Agni'), (891796, 'Julia'), (41925, 'Darija'), (24184, 'Aranza'), (118, 'Huijie'), (85022, 'Emma'), (362372, 'Marina'), (78265, 'Margarita'), (2487, 'Britt'), (41792, 'Teodora'), (76586, 'Michaela'), (484, 'Antonina'), (2515436, 'Jelena'), (1344, 'Brynn'), (2321, 'Ashvarya'), (2070, 'Manca'), (4258, 'Raluca Georgiana'), (10133, 'Ingrid Esperanza'), (33550, 'Nicola'), (2378, 'Shanshan'), (1213, 'Bianka'), (67017, 'Dinah'), (778, 'Marta Huqi'), (1002, 'Jenny'), (9318, 'Prerna'), (79958, 'Dia'), (201258, 'Mariana'), (37, 'Vinciane'), (1901, 'Agata'), (38086, 'Mari'), (12633, 'Indire'), (170, 'Nevena'), (5619, 'Dayana'), (920433, 'Andrea'), (24, 'Jaimy Gayle'), (43550, 'Myrtille'), (3613355, 'Maria'), (2371, 'Ho Ching'), (2782, 'Hanna'), (108, 'Sohyun'), (168, 'Rebeca'), (56853, 'Oceane'), (355, 'Jodie Anna'), (750, 'Leolia'), (7999, 'Gracia'), (74, 'Zinovia'), (676, 'Breaunna'), (3623, 'Varunya'), (934, 'Plobrung'), (23968, 'Miyu'), (19065, 'Despina'), (542, 'Meng Ning'), (83, 'Akiho'), (164900, 'Lenka'), (801, 'Sherry'), (102623, 'Gabriela'), (101, 'Anca'), (242, 'You Na'), (760, 'Nour'), (30304, 'Justyna'), (764, 'Tanaporn'), (6547, 'Elena Teodora'), (4962, 'Kotomi'), (26585, 'Chang'), (37384, 'Paula Cristina'), (117825, 'Sharon'), (296736, 'Maria Elena'), (52, 'Ilay'), (500, 'Lindsey'), (267679, 'Marta'), (41, 'Eva Marie'), (7874, 'Usue Maitane'), (142, 'Nelise'), (62861, 'Chanel'), (413, 'Ushna'), (2634, 'Riya'), (16621, 'Valeriya'), (22978, 'Quirine'), (11608, 'Arabela'), (201, 'Mihoki'), (9634, 'Shilin'), (359013, 'Jill'), (49784, 'Sabina'), (2531, 'Nicky'), (3825, 'Miriam'), (191, 'Alexandria'), (525, 'Maegan'), (465, 'Karolayne'), (53480, 'Sally'), (77, 'Vicky'), (3165, 'Ronit'), (224, 'Hao Ching'), (242619, 'Michaella'), (8284, 'Lisanne'), (462, 'Kirsten Andrea'), (9120, 'Nika'), (1484, 'Andreea'), (464, 'Jara'), (16790, 'Marcela'), (253320, 'Alla'), (1092, 'Jordana'), (43, 'Emilia'), (26059, 'Kyung Mi'), (704, 'Kassandra'), (1306087, 'Francesca'), (18, 'Constanze'), (1417, 'Da Hye'), (678793, 'Anabel'), (8700, 'Oleksandra'), (72, 'Andressa Cristina'), (1856, 'Yelena'), (49412, 'Stanislava'), (123, 'Boba'), (39, 'Arthi'), (7147, 'Etsuko'), (3361, 'Tjasa'), (773929, 'Olga'), (33054, 'Allie'), (70504, 'Chin Wei'), (1013, 'Luca'), (3809, 'Zarah'), (510, 'Priscila'), (80, 'Fatyha'), (215, 'Deria'), (923, 'Jessy'), (93730, 'Katarzyna'), (92, 'Aina'), (3594, 'Sunam'), (27462, 'Jacqueline'), (254520, 'Karin'), (101, 'Merel'), (91117, 'Lina'), (2738, 'Dhruthi'), (12693, 'Yurina'), (404915, 'Yaroslava'), (102, 'Man Ying Maggie'), (21599, 'Ankita'), (60646, 'Yi Fan'), (480, 'Eliza'), (3748, 'Khristina'), (10191, 'Hilda'), (1339, 'Marrit'), (3121, 'Dana'), (19173, 'Mai'), (907, 'Constanza'), (54, 'Anke'), (43862, 'Jasmina'), (144, 'Seira'), (7431, 'Tomoko'), (42773, 'Chiaki'), (8203, 'Priscilla'), (126, 'Stefani'), (85, 'Ahlam'), (102140, 'Shelby'), (8608, 'Harriet'), (413759, 'Maria Jose'), (1227, 'Claudia Antonia'), (59671, 'Nao'), (235, 'Alessandra'), (905, 'Blair'), (1050, 'Taisiya'), (221, 'Inger'), (52889, 'Emily'), (3466, 'Matilda'), (1093, 'Gabrielle Faith'), (3453, 'Ju Eun'), (15102, 'Kinnie'), (2609, 'Melina'), (804, 'Josie'), (1958404, 'Petra'), (596901, 'Alize'), (5173, 'Ayano'), (19092, 'Bernarda'), (114104, 'Monique'), (3, 'Arina Gabriela'), (74453, 'Andreja'), (612072, 'Timea'), (960, 'Elke'), (42527, 'Vasilisa'), (136, 'Yidi'), (60908, 'Pemra'), (1039, 'Helen'), (308, 'Rona'), (308, 'Katrine Isabel'), (1358928, 'Na'), (47282, 'So Jung'), (467, 'Kady'), (159155, 'Valeria'), (8305, 'Luciana'), (165013, 'Rebecca'), (201856, 'Renata'), (336, 'Shuyue'), (648, 'Yawna'), (47854, 'Valentyna'), (32445, 'Mayo'), (11721, 'Azra'), (54340, 'Varatchaya'), (1363, 'Shao Yuan'), (4356, 'Charlotte'), (3592, 'Yoon Young'), (141257, 'Maria Fernanda'), (30, 'Brindtha'), (5818, 'Klaartje'), (38, 'Cameron'), (5007, 'Jaimee'), (3908, 'Ester'), (45, 'Talya'), (717, 'Xiaorong'), (149, 'Dina'), (2133, 'Macarena'), (322202, 'Tamira'), (823, 'Ena'), (934, 'Claudia Gianina'), (1832, 'Petia'), (45884, 'Catherine Cartan'), (226, 'Mariaryeni'), (1002, 'Corina'), (597, 'Ryann'), (244807, 'Lauren'), (887, 'Amelie'), (30669, 'Vanesa'), (193362, 'Tereza'), (13389, 'Alexis'), (3471, 'Ingrid'), (1401125, 'Nadia'), (976, 'Eudice Wong'), (526, 'Ella'), (3029, 'Emina'), (3208, 'Paulina'), (37817, 'Kai Lin'), (12727, 'Andreea Roxana'), (363, 'Oliwia'), (20132, 'Chayenne'), (955267, 'Alexandra'), (29250, 'Nastja'), (148728, 'Kristyna'), (116548, 'Ajla'), (3657, 'Michika'), (702, 'Mara'), (2275, 'Sadafmoh'), (14123, 'Milana'), (385636, 'Melanie'), (185, 'Maria Agustina'), (44497, 'Mallory'), (268372, 'Jana'), (4743, 'Iris'), (17078, 'Ya Hsuan'), (11569, 'Georgina'), (298, 'Violetta'), (3894, 'Bernice'), (34796, 'Chieh Yu'), (23411, 'Liga'), (72, 'Nastassia'), (9, 'Warona'), (2094, 'Ivania'), (4709, 'Elisabeth'), (2287, 'Eleanor'), (251, 'Naz'), (12728, 'Emelyn'), (40410, 'Ines'), (90451, 'Carina'), (1465, 'Boyan'), (608309, 'Stephanie'), (6573, 'Pernilla'), (19989, 'Yi'), (24, 'Emilija'), (12, 'Anastasiia'), (49, 'Ronke'), (200, 'Melissa'), (49980, 'Ashley'), (677, 'Angeliki'), (114, 'June'), (128, 'Livia'), (13037, 'Marcella'), (22578, 'Vlada'), (304, 'Tamari'), (65, 'Emma Christine'), (10539, 'Sofie'), (994, 'Franziska'), (3470, 'Borislava'), (3714, 'Paula Catalina'), (19446, 'Aryna'), (48, 'Georgiana'), (10167, 'Lou'), (95, 'Sing Le'), (4611, 'Shivika'), (38116, 'Remi'), (9593, 'Mana'), (2641, 'Saska'), (1188, 'Patcharin'), (454, 'Victoire'), (8744, 'Xin'), (1955, 'Joana'), (33624, 'Audrey'), (1098, 'Mia Nicole'), (861, 'Janneke'), (467, 'Ida'), (1034, 'Sai Samhitha'), (21, 'Betina'), (160164, 'Michelle'), (472, 'Erica'), (610820, 'Jie'), (403, 'Kwan Yau'), (53610, 'Sheng Nan'), (9780, 'Di'), (1536, 'Kana'), (1788, 'Mayar'), (13761, 'Ellen'), (385, 'Alana'), (65152, 'Nastassja'), (706, 'Thai Sa Grana'), (568191, 'Klara'), (294, 'Haine'), (39, 'Laylo'), (275, 'Yanni'), (811, 'Habiba'), (366, 'Yijia'), (24542, 'Miki'), (2935, 'Giuliana'), (69, 'Esen'), (333150, 'Jarmila'), (814, 'Berta'), (107880, 'Anna Karolina'), (33822, 'Laura Ioana'), (78461, 'Sarah'), (11201, 'Sviatlana'), (140108, 'Aiko'), (1365, 'Andreea Amalia'), (279, 'Nermeen'), (253, 'Ivone'), (625836, 'Kaia'), (33672, 'Su Jeong'), (15, 'Jiakang'), (1433335, 'Anastasia'), (1259, 'Yue'), (2592, 'Rachael'), (455, 'Dominique'), (13978, 'Jil Belen'), (6168, 'Greetje'), (228538, 'Akgul'), (536, 'Elizabeta'), (761, 'Jainy'), (109256, 'Xinyun'), (733, 'Lee'), (93, 'Manya'), (8676, 'Ting Jr'), (40341, 'Lin'), (38651, 'Gail'), (6404, 'Pilar'), (26209, 'Jade'), (879, 'Wushuang'), (440, 'Naima'), (249446, 'Edina'), (73589, 'Noppawan'), (5944, 'Harmony'), (1034, 'Cynthia'), (3085, 'Steffi'), (1728, 'Yuriko'), (15198, 'Valentini'), (159, 'Spurti'), (238803, 'Alberta'), (3133, 'Irene'), (291, 'Vanja'), (7444, 'Ayla'), (21, 'Julia Mansano'), (3445, 'Lu'), (283166, 'Bojana'), (288, 'Ana Gabriela'), (266251, 'Zuzana'), (87, 'Siyu'), (1165205, 'Daniela'), (5493, 'Karina Ildor'), (10947, 'Jan'), (1990, 'Amina'), (254491, 'Yvonne'), (39270, 'Jovana'), (172, 'Annie'), (908, 'Jazmin'), (376, 'Estela'), (17020, 'Romana Caroline'), (331434, 'Mirjana'), (99, 'Anne Marie'), (413, 'Hana'), (359, 'Frances'), (14578, 'Xenia'), (724638, 'Simona'), (4980, 'Josephine'), (6, 'Madina'), (67459, 'Carly'), (0, 'Damilola'), (96, 'Sophia'), (330, 'Karyn'), (414, 'Jin Ju'), (2421, 'Ana Bianca'), (3127, 'Karla'), (253471, 'Romina'), (484, 'Olena'), (70, 'Savannah'), (47867, 'Ye Ra'), (574, 'Camille'), (3200, 'Kyle'), (24, 'Rui'), (106520, 'Giulia'), (34795, 'Tatiana'), (105, 'Shou Na'), (443, 'Ramu'), (142, 'Shelly'), (141, 'Assia'), (1289, 'Tatsiana'), (56817, 'Federica'), (1176, 'Kaja'), (354, 'Sanae'), (120, 'Wen Ling'), (163036, 'Darya'), (371662, 'Bethanie'), (96852, 'Arina'), (15, 'Luna'), (3298, 'Denise'), (4196, 'Yan'), (89361, 'Florencia'), (8174, 'Carmen'), (97400, 'Natalia'), (1420, 'Ziyue'), (390148, 'Agnes'), (15, 'Chaoyi'), (1795, 'Noelle'), (1082, 'Nora'), (1367, 'Ana Victoria'), (2446, 'Eetee'), (545, 'Danijela'), (351, 'Belen'), (68925, 'Jing Jing'), (3073, 'Malou'), (30136, 'Ganna'), (697, 'Linnea'), (21152, 'Storm'), (22977, 'Sherazad'), (476768, 'Madison'), (5604, 'Whitney'), (134, 'Dewi'), (169, 'Lidia'), (20142, 'Kanae'), (26950, 'Ilona'), (352458, 'Sloane'), (57585, 'Tina'), (10859, 'Pia'), (39102, 'Yana'), (1380, 'Yixuan'), (843, 'Tamachan'), (8592, 'Ji Young'), (918746, 'Dominika'), (587309, 'Monica'), (40633, 'Wen Hsin'), (16276, 'Susanne'), (736, 'Treta'), (461, 'Sarahi'), (17975, 'Sanaz'), (5803, 'Rebeka'), (1822, 'Luisa Marie'), (56596, 'Nadiya'), (156, 'Afroditi'), (33, 'Anne Sophie'), (210101, 'Kveta'), (3942, 'Despoina'), (43020, 'Tetyana'), (48117, 'Jia Jing'), (12379, 'Macall'), (9180, 'Sofya'), (12519, 'Chun Mei'), (2526, 'Natia'), (143422, 'Janette'), (4580, 'Kim'), (602453, 'Yanina'), (1744, 'Sri Vaishnavi'), (27011, 'Evelyn'), (1187, 'Ludmilla'), (1036, 'Voni'), (317, 'Cristina Madalina'), (250056, 'Catalina'), (6650, 'Anna Arina'), (4643, 'Hanyu'), (269, 'Astrid Wanja'), (964, 'Emily J'), (42925, 'Lesley'), (249, 'Kamilla'), (480, 'Sonia'), (4789, 'Xiao'), (111, 'Rosa'), (344, 'Suzan'), (11260, 'Fanny'), (476, 'Tinatin'), (4766, 'Ingrid Alexandra'), (2020, 'Samira'), (116857, 'Qiang'), (1005319, 'Ekaterina'), (279, 'Milena'), (3002, 'Jiaxi'), (511, 'I Hsuan'), (1583, 'Lisa Marie'), (24279, 'Yuxuan'), (3, 'Marijana'), (155, 'Alory Regina Elorriaga'), (5387, 'Raveena'), (1254, 'Vladislava'), (5356, 'Erin'), (15, 'Joanne'), (55981, 'Misa'), (50, 'Ege'), (44, 'Federica Joe'), (290, 'Ghislaine'), (314747, 'Elina'), (54798, 'Tara'), (416, 'Kaitlin'), (681, 'Se Jin'), (28098, 'Nathalia'), (456422, 'Tsvetana'), (10360, 'Sina'), (275255, 'Urszula'), (2216, 'Liz Tatiane'), (3193, 'Karman'), (491, 'Nikol'), (2127, 'Tea'), (6, 'Loudmilla'), (8180, 'Hae Sung'), (4612, 'Jia Qi'), (6159, 'Chiara'), (880, 'Rosalie'), (39523, 'Mailen'), (672, 'Leonie'), (112562, 'Katalin'), (235721, 'Coco'), (1352, 'Xiaoxi'), (115293, 'Abigail'), (556, 'Rio'), (11873, 'Akari'), (1270, 'Sarah Beth'), (110290, 'Zi'), (84543, 'Veronica'), (27580, 'Hiroko'), (716, 'Siqi'), (382, 'Oyku'), (96, 'Jiaxue'), (32, 'Yarden'), (32, 'Moyuka'), (1960, 'Lilla'), (75, 'Yosr'), (4499, 'Sonja'), (1225, 'Ioana'), (27061, 'Beatrice'), (210, 'Maud'), (79511, 'Viktorija'), (17967, 'Anhelina'), (7772, 'Elena Gabriela'), (410, 'Karina Kristina'), (219, 'Maureen'), (4987, 'Catherine'), (5057, 'Xiaodi'), (3905, 'Kaitlyn'), (3, 'Himari'), (40, 'Ralina'), (172431, 'Paula'), (1236, 'Costanza'), (41575, 'Amandine'), (45115, 'Leticia'), (39418, 'Justine'), (285, 'Yoko'), (1446, 'Julyette Maria Josephine'), (274936, 'Su Wei'), (57745, 'Alice'), (4216, 'Linda'), (17514, 'Patrycja'), (958, 'Cemre'), (468, 'Gabriela Nicole'), (980, 'Ariadna'), (241, 'Pamela'), (207, 'Lauryn'), (8589, 'Daiana'), (21340, 'Piia'), (16303, 'Natela'), (272, 'Mirjam'), (4060, 'Mariam'), (410, 'Kelsey'), (168, 'Denise Antonela'), (275364, 'Chanelle'), (1222, 'Hye Min'), (1388, 'Maria Paulina'), (2922, 'Brianna'), (87844, 'Iryna'), (8072, 'Stamatia'), (39, 'Chanikarn'), (70613, 'Grace'), (6777, 'Chelsey'), (76747, 'Polina'), (157, 'Amira'), (596, 'Michele Alexandra'), (294, 'Kei'), (240195, 'Greta'), (1678, 'Veronica M'), (62252, 'Risa'), (49122, 'Chi Chi'), (1997, 'Margarida'), (354, 'Desirae'), (111, 'Shangqing'), (40, 'Mei Xu'), (4232828, 'Serena'), (18371, 'Sofiya'), (272889, 'Sania'), (5880, 'Kelly S'), (206981, 'Evgeniya'), (325216, 'Polona'), (1261, 'Dabin'), (105, 'Vincenza'), (56212, 'Kumiko'), (646, 'Quinn'), (12829, 'Alexia'), (26077, 'Tammi'), (21205, 'Miharu'), (281, 'Ye Xin'), (12554, 'Elyne'), (15, 'Mihaela Lorena'), (30, 'Lyann'), (15365, 'Natasha'), (679, 'Chia Hsien'), (119797, 'Cagla'), (84, 'Yukako'), (23668, 'Maya'), (6179, 'Gabriella'), (24, 'Hollie'), (12906, 'Kamila'), (28, 'Roosh'), (1016, 'Peggy'), (18, 'Terri'), (63998, 'Bianca'), (150, 'Dajana'), (2875425, 'Venus'), (90, 'Viktoriia'), (10107, 'Kazusa'), (1026, 'Marisa'), (17587, 'Fernanda'), (4380, 'Naiktha'), (15970, 'Kathinka'), (170617, 'Daria'), (78204, 'Sacha'), (882, 'Eliessa'), (5214, 'Abbie'), (3621, 'Anouk'), (1312, 'Seone'), (9116, 'Tessah'), (715, 'Madeleine'), (238, 'Aselya'), (905, 'Margaux'), (27, 'Yasmina'), (270102, 'Kimiko'), (195, 'Saana'), (5269, 'Anne Liz'), (72, 'Janja'), (1067, 'Maja'), (224, 'Nattawadee'), (25166, 'Constance'), (13843, 'Irina Maria'), (809611, 'Roberta'), (8918, 'Vivienne'), (27, 'Sarlota'), (742, 'Akilah'), (1828, 'Yukun'), (151, 'Tingting'), (3, 'Phenomena'), (97, 'Katyarina'), (48811, 'Ani'), (154599, 'Jessica'), (155143, 'Yulia'), (911, 'Romy'), (9536, 'Neda'), (5, 'Chelsea'), (33, 'Lorenza'), (5155, 'Ashling'), (26226, 'Viktoriya'), (511, 'Magalie'), (36889, 'Carolina'), (14129, 'Makoto'), (39782, 'Liezel'), (3426, 'Jeannine'), (383077, 'Kirsten'), (6078, 'Laetitia'), (209, 'Parris'), (451414, 'Aleksandra'), (456, 'Lamis'), (22840, 'Miyabi'), (1132514, 'Angelique'), (2266, 'Madrie'), (3018, 'Verena'), (6809, 'Lidziya'), (18, 'Gulchekhra'), (106, 'Victoria Ariadna'), (21261, 'Fatma'), (910, 'Karoline'), (640, 'Akvile'), (8900, 'Pei Chi'), (1229, 'Tanya'), (33, 'Nataliya'), (1936, 'Karine'), (153, 'Martha'), (294, 'Maria Jesus'), (281, 'Yuan'), (1607, 'Daneika'), (230262, 'Tatjana'), (3642, 'Rutuja'), (1375, 'Jaeda'), (161, 'Ramya'), (46908, 'Anais'), (3374, 'Chun Yan'), (236, 'Shiran'), (141257, 'Rika'), (23620, 'Deniz'), (134, 'Sneha'), (141876, 'Claire'), (1427, 'Anna Maria'), (2025, 'Noelia'), (467, 'Simran Kaur'), (894, 'Keri'), (14213, 'Carol'), (7755, 'Fang Ying'), (1626, 'Sylvia'), (10865, 'Fatima'), (206, 'Almudena'), (20196, 'Melis'), (1671, 'Luisa'), (72, 'Mi Zhuoma'), (6525, 'Freya'), (1626, 'Mira'), (84446, 'Akiko'), (85425, 'Maryna'), (1676, 'Imane Maelle'), (137327, 'Belinda'), (571, 'Ayan'), (122331, 'Regina'), (1679, 'Hayley'), (21, 'Zeynep  Sena'), (15218, 'Caitlin'), (484140, 'Sofia'), (439179, 'Eleni'), (10178, 'Marianna'), (177458, 'Lara'), (99, 'Zhima'), (309, 'Mitsumi'), (4093, 'Julieta Lara'), (1000, 'Gaelle'), (38501, 'Ayu Fani'), (97, 'Laura Sofia'), (2438, 'Christine'), (1987, 'Viktoryia'), (1103, 'Elizabeth Anita Alexandria'), (201173, 'Nina'), (688, 'Mallaurie'), (45, 'Idia'), (1748, 'Yasmine'), (134, 'Nonna'), (64, 'Vita'), (597, 'Shuo'), (7996, 'Ayaka'), (9627, 'Nicolette'), (315, 'Xiyu'), (5422, 'Alix'), (12474, 'Yuka'), (5866, 'Kamonwan'), (4, 'Mariona'), (268277, 'Anastasija'), (578964, 'Laura'), (12525, 'Janina'), (182, 'Yoo Ri'), (1945, 'Napatsakorn'), (52, 'En Pei'), (4128, 'Pavla'), (142, 'Jasmine Amber'), (202, 'Aneta'), (203782, 'Misaki'), (18824, 'Celine'), (3928, 'Helene'), (605, 'Andie K'), (9355, 'Karina'), (289, 'Carson'), (27997, 'Lena'), (1978, 'Eden'), (143, 'Se Hyun'), (24523, 'Nungnadda'), (88369, 'Irena'), (497, 'Stefana'), (6688, 'Isabel'), (3811, 'Olesya'), (52, 'Ahsha'), (20989, 'Eugeniya'), (1453, 'Ylona Georgiana'), (284, 'Meritxell'), (71, 'Aldana'), (138, 'Maurien'), (649, 'Natella'), (40, 'Lorraine M'), (119756, 'Olivia'), (56242, 'Ons'), (73192, 'Veronika'), (565, 'Molly'), (4831, 'Kimberly'), (36, 'Ange Oby'), (993, 'Alicia'), (179, 'Weronika Jasmina'), (1063, 'Hongrui'), (117472, 'Masa'), (21624, 'Antonia'), (114098, 'Donna'), (172004, 'Kai Chen'), (2403, 'Ioana Diana'), (3255, 'Shweta'), (313187, 'Pauline'), (906, 'Satsuki'), (9846, 'Dejana'), (395, 'Mahitha'), (395, 'Iana'), (1884, 'Min'), (61196, 'Aliaksandra'), (87, 'Leticia Garcia'), (42, 'Milagros'), (304, 'Abbi'), (49767, 'Sachia'), (240762, 'Cara'), (984, 'Rianna'), (1214, 'Pranjala'), (107, 'Mila'), (662, 'Blessing'), (259, 'Nam Yeon'), (37981, 'Natsumi'), (65522, 'Denisa'), (39352, 'Ipek'), (221695, 'Silvia'), (24, 'Yihong'), (19223, 'Na Ri'), (9001, 'Syna'), (2400, 'Ulyana'), (11954, 'Cecilia'), (702, 'Zeel'), (714, 'Isabela'), (13010, 'Ivonne'), (26, 'Beauty'), (39960, 'Shiho'), (2122, 'Shakhlo'), (2258, 'Zuzanna'), (38850, 'Taylor'), (280, 'Antonela'), (338, 'Valentina'), (2864, 'Gozal'), (17577, 'Krista'), (701, 'Komola'), (9227, 'Destanee'), (22, 'Layne'), (1892, 'Maria Constanza De Las Mercedes'), (1446, 'Panna'), (6341, 'Svenja'), (237, 'Kaylah'), (11694, 'Wing Yau Venise'), (192296, 'Severine'), (677, 'Giada'), (266197, 'Sandra'), (159, 'Andrina'), (641, 'Qianqian'), (15, 'Mananchaya'), (24569, 'Mi'), (2570, 'Vladyslava'), (30035, 'Katie'), (505, 'Yuki'), (581, 'Sybille'), (480, 'Anushka'), (225987, 'Lesia'), (85, 'Dilara'), (7367, 'Hua Chen'), (5027, 'Nadezda'), (63, 'Jule'), (6256, 'Csilla'), (688, 'Sinead'), (15955, 'Ana Sofia'), (2961, 'Sowjanya'), (1469, 'Seda'), (277, 'Chengyiyi'), (21, 'Avgusta'), (5566, 'Ria'), (822, 'Jawairiah'), (148, 'Maria Camila'), (2191, 'Yuki Kristina'), (323527, 'Alison'), (165477, 'Erika'), (512490, 'Karolina'), (312, 'Blanca'), (336, 'Rosie'), (69242, 'Mihaela'), (870, 'Hyojung'), (55, 'NA'), (64, 'Jada'), (142454, 'Lindsay'), (27, 'Sabina Elena'), (957, 'Ratnika'), (202780, 'Heather'), (156, 'Maria Lourdes'), (21417, 'Korina'), (16886, 'Rocio'), (48, 'Mercedes'), (110, 'Agne'), (78, 'Hazal'), (2662, 'Liubov'), (86, 'Ki Ryang'), (71072, 'Anett'), (2661, 'Nadja'), (25183, 'Alyona'), (36714, 'Vivian'), (9064, 'Mayya'), (4052, 'Alona'), (340, 'Melisa'), (1906587, 'Svetlana'), (160945, 'Katerina'), (316, 'Sasa'), (42, 'Tatia'), (226, 'Aimee'), (601693, 'Kristina'), (228, 'Andjela'), (6810, 'Sabrina'), (255, 'Vaniya'), (406, 'Inci'), (780, 'Sabastiani'), (49207, 'Anna Giulia'), (410, 'Gulben'), (43755, 'Patricia Maria'), (25496, 'Marie'), (114687, 'Marie Eve'), (744, 'Eveliina'), (34647, 'Kristie'), (371140, 'Ksenia'), (102260, 'Corinna'), (48857, 'Dalila'), (19048, 'Angelina'), (457043, 'Sorana'), (154484, 'Mariya'), (47651, 'Nigina'), (8832, 'Alena'), (272, 'Kimika'), (9147, 'Camelia Elena'), (302957, 'Galina'), (19495, 'Ximena'), (141281, 'Kathrin'), (2034, 'Qiu Yu'), (664, 'Phillis'), (33388, 'Fangzhou'), (490, 'Adeliya'), (1258, 'Emiliana'), (836, 'Anhzelika'), (60702, 'Amra'), (24897, 'Stefania'), (8448, 'Rishika'), (1424, 'Alba'), (1083, 'Astra'), (10630, 'Tori'), (12, 'Mouna'), (363, 'Wiktoria'), (14838, 'Aki'), (7323, 'Patty'), (417, 'Meiling'), (4368, 'Hirono'), (1437656, 'Samantha'), (407, 'Megumi'), (966, 'Yeong Won'), (363, 'Katharine'), (613, 'Wendy Qi Wen'), (15071, 'Yuuki'), (2772, 'Zoe'), (7165, 'Tess'), (39, 'Gulnaz'), (913829, 'Shuai'), (9, 'Rana'), (15935, 'Dalma'), (169, 'Selin'), (11393, 'Alina'), (75, 'Sean'), (73, 'Yang'), (228, 'Rafaela'), (102693, 'Mervana'), (147, 'Paige Mary'), (245, 'Angela'), (181, 'Pei Ju'), (10616, 'Amy'), (1864, 'Tornado Alicia'), (7, 'Zhibek'), (40060, 'Tamaryn'), (502, 'Susan'), (71, 'Vishesh'), (11572, 'Katy'), (1622, 'Clemence'), (371035, 'Lourdes'), (522, 'Libi'), (84184, 'Richel'), (26185, 'Na Lae'), (59775, 'Evgenia'), (1657, 'Anette'), (24, 'Christie'), (7486, 'Cristiana'), (96, 'Aishwarya'), (78, 'Ferny'), (15190, 'Chloe'), (18219, 'Fiona'), (296, 'Maria Del Rosario'), (639, 'Dan Ni'), (687, 'Guiomar'), (27, 'Vilma Y'), (4914, 'Chalena'), (42676, 'Sachie'), (4122, 'Jessika'), (101816, 'Yurika'), (3724, 'Kanami'), (12, 'Brienne'), (11714, 'Camilla'), (5425, 'Ioana Loredana'), (40823, 'Danielle'), (39989, 'Estelle'), (2484, 'Giorgia'), (1899, 'Kristy'), (1501, 'Zsofia'), (837, 'Lynn'), (1247887, 'Elena'), (180, 'Miranda'), (662926, 'Shahar'), (96, 'Meiqi'), (3763, 'Vaszilisza'), (20869, 'Cory Ann'), (245139, 'Mathilde'), (2877, 'Zoe Gwen'), (48788, 'Asia'), (21685, 'Francoise'), (247237, 'Stefanie'), (39687, 'Yafan'), (12708, 'Aminat'), (10087, 'Vanda'), (29214, 'Romana'), (464, 'Sari'), (11653, 'Wan Ting'), (1333, 'Nozomi'), (2710, 'Josepha'), (611, 'Jil Nora'), (1578, 'Alejandra'), (648, 'Ashmitha'), (18781, 'Vojislava'), (316, 'Malene'), (34453, 'Jasmin'), (669546, 'Carla'), (178, 'Sarvinoz'), (107595, 'Ying Ying'), (9036, 'Kyoka'), (3633, 'Haruka'), (1589674, 'Ana'), (33, 'Daphne'), (72, 'Abir'), (169371, 'Annika'), (58279, 'Oksana'), (1923, 'Dasha'), (292, 'Ina'), (5372, 'Ofri'), (2061, 'Momoko'), (77519, 'Luksika'), (12304, 'Clothilde'), (30, 'Zhou'), (30, 'Damira'), (38793, 'Roxane'), (324, 'Kelia'), (1917, 'Magali'), (1235, 'Anastasia Evgenyevna'), (90, 'Elodie'), (5687, 'Prarthana G'), (2434, 'Maddison'), (126811, 'Estrella'), (1696, 'Li'), (158, 'Agustina Elena'), (115, 'Nina Isabella'), (452, 'Yu Jin'), (154, 'Arlinda'), (184, 'Yujia'), (24, 'Pei Hsuan'), (1977, 'Mirabelle'), (2221, 'Clelia'), (358, 'Chisa'), (72, 'Liniques'), (60, 'Tamar'), (157, 'Francisca'), (1929137, 'Vera'), (9202, 'Raluca Elena'), (515, 'Katya'), (1726, 'Chiraz'), (9, 'Frederikke'), (59997, 'Liana Gabriela'), (176, 'Mi Jeong'), (10751, 'Ai'), (440, 'Genevieve'), (290299, 'Melinda'), (27118, 'Ulrikke'), (62938, 'Madalina'), (7179, 'Ji Hee'), (614, 'Nikki'), (120995, 'Natalie'), (13697, 'Kayla'), (1546, 'Ylena'), (123243, 'Zarina'), (34, 'Kate'), (2141, 'Ana Paula'), (102, 'Mary Ann'), (22, 'Nikita'), (286, 'Julita'), (17597, 'Danica'), (282445, 'Mona'), (309990, 'Ayumi'), (9600, 'Georgia'), (40, 'Olaya'), (699, 'Radina'), (120, 'Abiodun'), (709, 'Desiree'), (14277, 'Guadalupe'), (23564, 'Montserrat'), (202697, 'Casey'), (81222, 'Jennifer'), (13064, 'Sarah Rebecca'), (1558, 'Noel'), (107, 'Adrienn'), (2358, 'Alice Andrada'), (193767, 'Mandy'), (238, 'Gyulnara'), (1801033, 'Agnieszka'), (519208, 'Virginie'), (2433, 'Ainhoa'), (6591, 'Sun Jung'), (198, 'Shakhnoza'), (8268, 'Sylwia'), (24, 'Ya'), (99836, 'Margalita'), (74, 'Iulia Maria'), (1445, 'Xi Yao'), (541, 'Emiliya'), (33, 'Intissar'), (1358, 'Ineke'), (2127, 'Szabina'), (12, 'Damini'), (682, 'Yuenu'), (6542, 'Lucy'), (21728, 'Agustina'), (1240, 'Monika'), (2, 'Olawaseun'), (3783, 'Ying'), (18210, 'So Ra'), (653, 'Mary'), (9631, 'Hao Chen'), (136, 'Camila Vital'), (1381, 'Yolande'), (255, 'Larikah'), (243, 'Pippa'), (46124, 'Shuko'), (225, 'May'), (64, 'Reina'), (4314, 'Marine'), (8441, 'Bermet'), (129, 'Colomba'), (52, 'Jia'), (4809, 'Klaudia'), (190997, 'Jamie'), (50184, 'Bibiane'), (229, 'Kanako'), (1458, 'Miriam Bianca'), (224, 'Sandy'), (98, 'Hortencia'), (3112, 'Manisha'), (1962, 'Anaeve'), (472, 'Joanna'), (98798, 'Beatriz'), (197904, 'Patricia'), (39307, 'Sophie'), (12, 'Maia A'), (167, 'Farah'), (30401, 'Raquel'), (537, 'Busra'), (1527, 'Ilze'), (383495, 'Aravane'), (376, 'Yekaterina'), (1149, 'Simone'), (5683, 'Charlene'), (7353, 'Dijana'), (1277, 'Sang Hee'), (1011058, 'Flavia')","SELECT sum( T1.ranking_points), T2.first_name FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id  GROUP BY T2.first_name","(10322, 'Iva'), (683, 'Qianhui'), (72, 'Carolyn'), (756, 'Magy'), (2142854, 'Victoria'), (6948, 'Ionela Andreea'), (2280, 'Kajsa'), (333, 'Tijana'), (1401, 'Rita'), (30191, 'Viktoria'), (683, 'Marcela Guimaraes'), (148, 'Sarai Delfina'), (336, 'Sofico'), (18, 'Shiori'), (6146, 'Valerie'), (97, 'Melany Solange'), (310215, 'Christina'), (594281, 'Tamarine'), (1108372, 'Lucie'), (21, 'Ana Luisa'), (13643, 'Angelica'), (5592, 'Makiho'), (30972, 'Nicha'), (11216, 'Eduarda'), (15, 'Jin'), (32169, 'Karen'), (3880, 'Emi'), (27, 'Carlota'), (15, 'Sunae'), (1633, 'Louise'), (293366, 'Irina Camelia'), (36, 'Justina'), (71, 'Yasmyn'), (772, 'Yuanyi'), (8146, 'Nicoleta Catalina'), (119279, 'Diana'), (6650, 'Seung Yeon'), (7, 'Axana'), (4619, 'Adrijana'), (23976, 'Doroteja'), (106927, 'Vitalia'), (281, 'Laura D'), (50700, 'Louisa'), (128183, 'Junri'), (63, 'Milica'), (23195, 'Riko'), (62977, 'Elizaveta'), (18, 'Jamilya'), (4703, 'Dunja'), (8145, 'Ting Fei'), (58741, 'Ashleigh'), (148, 'Schena'), (412872, 'Garbine'), (121, 'Zhuoma'), (27452, 'Rushmi'), (24062, 'Keren'), (135, 'Lizaveta'), (23897, 'Lavinia'), (914981, 'Sara'), (1096, 'Oana'), (88542, 'Heidi'), (177170, 'Kurumi'), (13686, 'Natalija'), (51803, 'An Sophie'), (916, 'Iga'), (87, 'Zaineb'), (276, 'Sirui'), (10705, 'Xinyu'), (17819, 'Jesika'), (323, 'Malika'), (762, 'India'), (12388, 'Kim Alice'), (567, 'Eleonore'), (553107, 'Johanna'), (1180, 'Miriana'), (1272285, 'Marion'), (2052, 'Zalina'), (156531, 'Julie'), (7797, 'Hulya'), (1624, 'Marlies'), (8939, 'Dalia'), (16663, 'Daniella'), (1553, 'Jiahui'), (4535, 'Xu Liu'), (469, 'Rachel'), (1090, 'Marianne'), (214121, 'Kiki'), (7605, 'Deborah'), (100848, 'Ivana'), (64525, 'Ling'), (206, 'Mariia'), (117, 'Shir'), (35957, 'Aleksandrina'), (103659, 'Magda'), (1894, 'Katherine Gabriela'), (128509, 'Yayuk'), (148701, 'Raluca'), (83476, 'Isabella'), (26897, 'Ekaterine'), (320, 'Suellen'), (1440, 'Emilie'), (559, 'Yuqi'), (48, 'Leylah Annie'), (66, 'Salma'), (377, 'Theresa'), (444303, 'Katarina'), (14709, 'Ran'), (34570, 'Eri'), (162, 'Muge'), (42, 'Wan Yi'), (26280, 'Peangtarn'), (111, 'Caroline B'), (120, 'Hsin Yuan'), (7998, 'Gaia'), (4543, 'Tyra'), (13717, 'Agnese'), (543, 'Ivette'), (13, 'Giorgie'), (51, 'Andra Maria'), (3627, 'Carolina Meligeni Rodrigues'), (392, 'Draginja'), (531, 'Si Qi'), (776, 'Karola Patricia'), (590911, 'Sabine'), (7843, 'Katherine'), (78513, 'Nikola'), (109192, 'Martina'), (96, 'Minami'), (647811, 'Anne'), (1614, 'Domenica'), (31741, 'Gioia'), (1544, 'Sultan'), (206375, 'Yuliya'), (2217, 'Ai Wen'), (54, 'Maftuna'), (1236, 'Kylie'), (802, 'Asiya'), (36, 'Eugenia'), (1103, 'Robyn'), (18211, 'Elixane'), (13254, 'Megan'), (163, 'Mafalda'), (401857, 'Magdalena'), (942, 'Kerstin'), (4777, 'Isabelle'), (299698, 'Irina'), (1609, 'Emmanuelle'), (6288, 'Yevgeniya'), (230, 'Micaela'), (898, 'Fatimah'), (166760, 'Brenda'), (95, 'Cecilie Lundgaard'), (12402, 'Tena'), (15001, 'Chantal'), (96, 'Mami'), (9093, 'Carolin'), (288, 'Ailen'), (36696, 'Ana Clara'), (13241, 'Nathaly'), (138782, 'Alexa'), (857, 'Naoko'), (2489, 'Malin'), (1077, 'Carmen Raluca'), (1225, 'Erina'), (555, 'Kristina N'), (11218, 'Ema'), (24595, 'Katharina'), (286, 'Lesedi Sheya'), (169500, 'Vesna'), (109, 'Dorien'), (7898, 'Lisa Maria'), (3, 'Judith'), (6, 'Muazzez'), (1884, 'Trang'), (160, 'Dagmara'), (31620, 'Cindy'), (204801, 'Eugenie'), (304, 'Lulu'), (3094, 'Nan Nan'), (741, 'Rashmi'), (13006, 'Poojashree'), (8079, 'Ellie'), (9, 'Adva'), (4294, 'Oana Georgeta'), (522, 'Sharon Sanchana'), (653, 'Kennedy'), (52274, 'Conny'), (83659, 'Tadeja'), (96, 'Smriti'), (113359, 'Saisai'), (173, 'Leslie'), (2362, 'Libby'), (2927, 'Mizuno'), (6, 'Shreya'), (998, 'Yukina'), (1119, 'Brittany'), (71645, 'Vanessa'), (9938, 'Min Hwa'), (435038, 'Kateryna'), (122, 'Hikari'), (99, 'Diana Maria'), (11596, 'Anja'), (595, 'Laili'), (22, 'Caty'), (20368, 'Elizabeth'), (775, 'Guzal'), (713, 'Ebony'), (1192, 'Demi'), (46355, 'Jin A'), (1297, 'Gloria'), (390, 'Maxine'), (163239, 'Naomi'), (68, 'Aastha'), (68207, 'Amanda'), (2524, 'Alessia'), (291, 'Ivanka'), (5416, 'Jaqueline Adina'), (6369, 'Dianne'), (2166, 'Zhanlan'), (100, 'Jiatian'), (147, 'Madeline'), (229391, 'Yung Jan'), (919, 'Kanika'), (645, 'Ludmila'), (12295, 'Robin'), (18286, 'Marketa'), (7975, 'Ching Wen'), (857, 'Dariya'), (106762, 'Claudine'), (32581, 'Claudia'), (4787, 'Margot'), (4106, 'Sharmada'), (75414, 'Cristina Andreea'), (2061, 'Saray'), (202172, 'Camila'), (33, 'Marcelina'), (667, 'Chi Fan'), (59412, 'Cristina'), (126, 'Apichaya'), (11032, 'Benedetta'), (1920, 'Beatriz Maria'), (594217, 'Lisa'), (61839, 'Yi Miao'), (54172, 'Lyudmyla'), (8406, 'Kaori'), (17382, 'Indy'), (129, 'Juliana Rocha'), (7062, 'Brooke'), (289, 'Giovanna'), (159, 'Amrita'), (219, 'Agata Jadwiga'), (1142, 'Ilka'), (106375, 'Maria Teresa'), (6564, 'Seo Kyung'), (9, 'Yu Tong'), (1017069, 'Anna'), (99, 'Asha'), (28045, 'Adriana'), (171, 'Melissa Ishuan'), (2249, 'Theo'), (299530, 'Vania'), (14942, 'Lena Marie'), (187, 'Chantelle'), (13041, 'Vivien'), (434692, 'Arantxa'), (62, 'Ann'), (9926, 'Valentine'), (75, 'Beatriz Magdalena'), (187, 'Xin Yu'), (1152, 'Bhuvana'), (401409, 'Varvara'), (10507, 'Albina'), (677, 'Yoshimi'), (87263, 'Elitsa'), (562, 'Carlotta'), (4705, 'Kelly'), (54140, 'Tamara'), (538, 'Clementina Eugenia'), (907, 'Anna Katalina'), (636, 'Elizaveta Anna'), (53401, 'Barbara'), (2338, 'Anamika'), (725, 'Brandy'), (997, 'Vladica'), (102022, 'Kyra'), (1991, 'Jillian'), (7027, 'Dea'), (1397, 'Stephanie Mariel'), (1858, 'Mi Rae'), (4197, 'Lea'), (22443, 'Yi Jing'), (2850, 'Berfu'), (8301, 'Hyun Hui'), (323, 'Maria Andrea'), (141, 'Deeon'), (45, 'Yuval'), (29442, 'Annalisa'), (33301, 'Chia Jung'), (298, 'Kseniia'), (1873, 'Haruna'), (4053, 'Cornelia'), (369810, 'Alisa'), (26779, 'Chen'), (75337, 'Tetiana'), (1535, 'Nagi'), (21360, 'Yue Yue'), (164, 'Donika'), (5051, 'Tayisiya'), (160, 'Anda'), (14212, 'Natasa'), (14865, 'Jasmine'), (154, 'Mahak'), (324, 'Suzuho'), (11320, 'Maiko'), (427, 'Mihika'), (152, 'Leah'), (141, 'Ah'), (43779, 'Elise'), (143, 'Gebriela'), (90, 'Michela'), (6470, 'Vladimira'), (4941, 'Ao'), (414, 'Juliana'), (803, 'Rosalia'), (980, 'Nazari'), (3497, 'Ola'), (6906, 'Morgane'), (40, 'Johana'), (2820, 'Snehadevi S'), (20481, 'Marija'), (9338, 'Sakiko'), (208108, 'Sesil'), (20236, 'Zhaoxuan'), (14608, 'Manon'), (515957, 'Barbora'), (11251, 'Yasmin'), (259116, 'Nuria'), (87958, 'Danka'), (320083, 'Eva'), (5425, 'Nidhi'), (27804, 'Ysaline'), (359374, 'Anna Lena'), (876, 'Lutfiye'), (2706, 'Nives'), (8507, 'Danielle Rose'), (2177, 'Anita'), (1235, 'Maia'), (405, 'Eleonora'), (269, 'Paula Andrea'), (29852, 'Sung Hee'), (117, 'Doga Selen'), (403127, 'Paola'), (443695, 'Iveta'), (628, 'Jazzamay'), (13141, 'Chinami'), (791, 'Aymet'), (5216, 'Alicja'), (377, 'Lusine'), (2133, 'Ornella'), (72682, 'Maria Joao'), (11623, 'Lizette'), (15248, 'Yuliana'), (1589, 'Lucrezia'), (15, 'Moulika'), (3187, 'Bunyawi'), (265, 'Alessondra'), (17185, 'Lucia'), (625, 'Ksenija'), (85, 'Kariann'), (83, 'Maileen'), (112570, 'Teliana'), (15401, 'Chihiro'), (20269, 'Yumi'), (2369, 'Aliona'), (1054, 'Suzy'), (1003, 'Karis'), (26624, 'Basak'), (447434, 'Nicole'), (16494, 'Nanuli'), (276, 'Chompoothip'), (66271, 'Reka Luca'), (2076949, 'Caroline'), (576, 'Guillermina'), (219, 'Adnya'), (2221, 'Vendula'), (464, 'Andrea Renee'), (5393, 'Kimberley'), (103, 'Elaine'), (116, 'Clara'), (75850, 'Anastasiya'), (1848, 'Georgia Andreea'), (703, 'Aida'), (63013, 'Nudnida'), (1483, 'Shu Ying'), (2929, 'Agni'), (891796, 'Julia'), (41925, 'Darija'), (24184, 'Aranza'), (118, 'Huijie'), (85022, 'Emma'), (362372, 'Marina'), (78265, 'Margarita'), (2487, 'Britt'), (41792, 'Teodora'), (76586, 'Michaela'), (484, 'Antonina'), (2515436, 'Jelena'), (1344, 'Brynn'), (2070, 'Manca'), (2321, 'Ashvarya'), (4258, 'Raluca Georgiana'), (10133, 'Ingrid Esperanza'), (33550, 'Nicola'), (2378, 'Shanshan'), (1213, 'Bianka'), (67017, 'Dinah'), (1002, 'Jenny'), (778, 'Marta Huqi'), (9318, 'Prerna'), (79958, 'Dia'), (201258, 'Mariana'), (37, 'Vinciane'), (1901, 'Agata'), (38086, 'Mari'), (12633, 'Indire'), (170, 'Nevena'), (5619, 'Dayana'), (920433, 'Andrea'), (24, 'Jaimy Gayle'), (43550, 'Myrtille'), (108, 'Sohyun'), (2371, 'Ho Ching'), (2782, 'Hanna'), (3613355, 'Maria'), (168, 'Rebeca'), (56853, 'Oceane'), (355, 'Jodie Anna'), (750, 'Leolia'), (7999, 'Gracia'), (74, 'Zinovia'), (676, 'Breaunna'), (3623, 'Varunya'), (934, 'Plobrung'), (23968, 'Miyu'), (19065, 'Despina'), (542, 'Meng Ning'), (83, 'Akiho'), (164900, 'Lenka'), (801, 'Sherry'), (102623, 'Gabriela'), (101, 'Anca'), (242, 'You Na'), (760, 'Nour'), (30304, 'Justyna'), (764, 'Tanaporn'), (6547, 'Elena Teodora'), (4962, 'Kotomi'), (26585, 'Chang'), (37384, 'Paula Cristina'), (117825, 'Sharon'), (296736, 'Maria Elena'), (52, 'Ilay'), (500, 'Lindsey'), (267679, 'Marta'), (41, 'Eva Marie'), (7874, 'Usue Maitane'), (142, 'Nelise'), (62861, 'Chanel'), (413, 'Ushna'), (2634, 'Riya'), (16621, 'Valeriya'), (22978, 'Quirine'), (11608, 'Arabela'), (201, 'Mihoki'), (9634, 'Shilin'), (359013, 'Jill'), (2531, 'Nicky'), (49784, 'Sabina'), (3825, 'Miriam'), (191, 'Alexandria'), (465, 'Karolayne'), (525, 'Maegan'), (53480, 'Sally'), (77, 'Vicky'), (3165, 'Ronit'), (224, 'Hao Ching'), (242619, 'Michaella'), (462, 'Kirsten Andrea'), (8284, 'Lisanne'), (9120, 'Nika'), (1484, 'Andreea'), (464, 'Jara'), (16790, 'Marcela'), (253320, 'Alla'), (1092, 'Jordana'), (43, 'Emilia'), (26059, 'Kyung Mi'), (704, 'Kassandra'), (1306087, 'Francesca'), (18, 'Constanze'), (1417, 'Da Hye'), (678793, 'Anabel'), (8700, 'Oleksandra'), (72, 'Andressa Cristina'), (1856, 'Yelena'), (49412, 'Stanislava'), (123, 'Boba'), (39, 'Arthi'), (3361, 'Tjasa'), (7147, 'Etsuko'), (773929, 'Olga'), (33054, 'Allie'), (70504, 'Chin Wei'), (1013, 'Luca'), (3809, 'Zarah'), (80, 'Fatyha'), (510, 'Priscila'), (215, 'Deria'), (923, 'Jessy'), (93730, 'Katarzyna'), (92, 'Aina'), (3594, 'Sunam'), (27462, 'Jacqueline'), (254520, 'Karin'), (101, 'Merel'), (91117, 'Lina'), (2738, 'Dhruthi'), (12693, 'Yurina'), (404915, 'Yaroslava'), (102, 'Man Ying Maggie'), (21599, 'Ankita'), (60646, 'Yi Fan'), (480, 'Eliza'), (3748, 'Khristina'), (10191, 'Hilda'), (3121, 'Dana'), (1339, 'Marrit'), (19173, 'Mai'), (907, 'Constanza'), (54, 'Anke'), (43862, 'Jasmina'), (144, 'Seira'), (7431, 'Tomoko'), (42773, 'Chiaki'), (8203, 'Priscilla'), (126, 'Stefani'), (85, 'Ahlam'), (102140, 'Shelby'), (8608, 'Harriet'), (1227, 'Claudia Antonia'), (413759, 'Maria Jose'), (59671, 'Nao'), (235, 'Alessandra'), (905, 'Blair'), (1050, 'Taisiya'), (221, 'Inger'), (52889, 'Emily'), (3466, 'Matilda'), (3453, 'Ju Eun'), (1093, 'Gabrielle Faith'), (15102, 'Kinnie'), (2609, 'Melina'), (804, 'Josie'), (1958404, 'Petra'), (596901, 'Alize'), (5173, 'Ayano'), (19092, 'Bernarda'), (114104, 'Monique'), (3, 'Arina Gabriela'), (74453, 'Andreja'), (612072, 'Timea'), (960, 'Elke'), (136, 'Yidi'), (42527, 'Vasilisa'), (60908, 'Pemra'), (1039, 'Helen'), (308, 'Katrine Isabel'), (308, 'Rona'), (1358928, 'Na'), (47282, 'So Jung'), (467, 'Kady'), (159155, 'Valeria'), (8305, 'Luciana'), (165013, 'Rebecca'), (201856, 'Renata'), (336, 'Shuyue'), (648, 'Yawna'), (47854, 'Valentyna'), (32445, 'Mayo'), (11721, 'Azra'), (54340, 'Varatchaya'), (1363, 'Shao Yuan'), (4356, 'Charlotte'), (3592, 'Yoon Young'), (141257, 'Maria Fernanda'), (30, 'Brindtha'), (5818, 'Klaartje'), (38, 'Cameron'), (5007, 'Jaimee'), (3908, 'Ester'), (45, 'Talya'), (717, 'Xiaorong'), (149, 'Dina'), (2133, 'Macarena'), (823, 'Ena'), (322202, 'Tamira'), (934, 'Claudia Gianina'), (1832, 'Petia'), (45884, 'Catherine Cartan'), (226, 'Mariaryeni'), (1002, 'Corina'), (597, 'Ryann'), (244807, 'Lauren'), (887, 'Amelie'), (30669, 'Vanesa'), (193362, 'Tereza'), (13389, 'Alexis'), (3471, 'Ingrid'), (1401125, 'Nadia'), (976, 'Eudice Wong'), (526, 'Ella'), (3029, 'Emina'), (3208, 'Paulina'), (37817, 'Kai Lin'), (12727, 'Andreea Roxana'), (363, 'Oliwia'), (20132, 'Chayenne'), (29250, 'Nastja'), (955267, 'Alexandra'), (148728, 'Kristyna'), (3657, 'Michika'), (116548, 'Ajla'), (702, 'Mara'), (2275, 'Sadafmoh'), (14123, 'Milana'), (385636, 'Melanie'), (185, 'Maria Agustina'), (44497, 'Mallory'), (268372, 'Jana'), (4743, 'Iris'), (17078, 'Ya Hsuan'), (11569, 'Georgina'), (298, 'Violetta'), (3894, 'Bernice'), (34796, 'Chieh Yu'), (72, 'Nastassia'), (23411, 'Liga'), (9, 'Warona'), (2094, 'Ivania'), (4709, 'Elisabeth'), (2287, 'Eleanor'), (251, 'Naz'), (12728, 'Emelyn'), (40410, 'Ines'), (90451, 'Carina'), (1465, 'Boyan'), (608309, 'Stephanie'), (6573, 'Pernilla'), (24, 'Emilija'), (19989, 'Yi'), (12, 'Anastasiia'), (49, 'Ronke'), (200, 'Melissa'), (49980, 'Ashley'), (677, 'Angeliki'), (114, 'June'), (128, 'Livia'), (13037, 'Marcella'), (22578, 'Vlada'), (304, 'Tamari'), (65, 'Emma Christine'), (10539, 'Sofie'), (994, 'Franziska'), (3470, 'Borislava'), (3714, 'Paula Catalina'), (19446, 'Aryna'), (48, 'Georgiana'), (95, 'Sing Le'), (10167, 'Lou'), (4611, 'Shivika'), (38116, 'Remi'), (9593, 'Mana'), (2641, 'Saska'), (1188, 'Patcharin'), (454, 'Victoire'), (8744, 'Xin'), (1955, 'Joana'), (33624, 'Audrey'), (1098, 'Mia Nicole'), (861, 'Janneke'), (467, 'Ida'), (1034, 'Sai Samhitha'), (21, 'Betina'), (160164, 'Michelle'), (472, 'Erica'), (610820, 'Jie'), (403, 'Kwan Yau'), (53610, 'Sheng Nan'), (9780, 'Di'), (1536, 'Kana'), (1788, 'Mayar'), (13761, 'Ellen'), (385, 'Alana'), (65152, 'Nastassja'), (706, 'Thai Sa Grana'), (294, 'Haine'), (568191, 'Klara'), (39, 'Laylo'), (275, 'Yanni'), (811, 'Habiba'), (366, 'Yijia'), (24542, 'Miki'), (2935, 'Giuliana'), (69, 'Esen'), (333150, 'Jarmila'), (814, 'Berta'), (107880, 'Anna Karolina'), (33822, 'Laura Ioana'), (78461, 'Sarah'), (11201, 'Sviatlana'), (140108, 'Aiko'), (1365, 'Andreea Amalia'), (279, 'Nermeen'), (253, 'Ivone'), (625836, 'Kaia'), (33672, 'Su Jeong'), (15, 'Jiakang'), (1433335, 'Anastasia'), (1259, 'Yue'), (2592, 'Rachael'), (455, 'Dominique'), (13978, 'Jil Belen'), (6168, 'Greetje'), (228538, 'Akgul'), (536, 'Elizabeta'), (761, 'Jainy'), (109256, 'Xinyun'), (733, 'Lee'), (93, 'Manya'), (8676, 'Ting Jr'), (40341, 'Lin'), (6404, 'Pilar'), (38651, 'Gail'), (26209, 'Jade'), (879, 'Wushuang'), (440, 'Naima'), (249446, 'Edina'), (5944, 'Harmony'), (73589, 'Noppawan'), (1034, 'Cynthia'), (3085, 'Steffi'), (1728, 'Yuriko'), (15198, 'Valentini'), (159, 'Spurti'), (238803, 'Alberta'), (3133, 'Irene'), (291, 'Vanja'), (7444, 'Ayla'), (21, 'Julia Mansano'), (3445, 'Lu'), (283166, 'Bojana'), (288, 'Ana Gabriela'), (266251, 'Zuzana'), (87, 'Siyu'), (1165205, 'Daniela'), (5493, 'Karina Ildor'), (10947, 'Jan'), (1990, 'Amina'), (254491, 'Yvonne'), (39270, 'Jovana'), (172, 'Annie'), (908, 'Jazmin'), (376, 'Estela'), (17020, 'Romana Caroline'), (331434, 'Mirjana'), (99, 'Anne Marie'), (413, 'Hana'), (359, 'Frances'), (14578, 'Xenia'), (4980, 'Josephine'), (724638, 'Simona'), (6, 'Madina'), (67459, 'Carly'), (0, 'Damilola'), (96, 'Sophia'), (330, 'Karyn'), (414, 'Jin Ju'), (2421, 'Ana Bianca'), (3127, 'Karla'), (253471, 'Romina'), (484, 'Olena'), (70, 'Savannah'), (47867, 'Ye Ra'), (574, 'Camille'), (3200, 'Kyle'), (24, 'Rui'), (106520, 'Giulia'), (34795, 'Tatiana'), (105, 'Shou Na'), (443, 'Ramu'), (142, 'Shelly'), (141, 'Assia'), (1289, 'Tatsiana'), (56817, 'Federica'), (1176, 'Kaja'), (354, 'Sanae'), (120, 'Wen Ling'), (163036, 'Darya'), (371662, 'Bethanie'), (96852, 'Arina'), (15, 'Luna'), (4196, 'Yan'), (3298, 'Denise'), (8174, 'Carmen'), (89361, 'Florencia'), (97400, 'Natalia'), (1420, 'Ziyue'), (390148, 'Agnes'), (15, 'Chaoyi'), (1795, 'Noelle'), (1082, 'Nora'), (1367, 'Ana Victoria'), (2446, 'Eetee'), (545, 'Danijela'), (351, 'Belen'), (68925, 'Jing Jing'), (3073, 'Malou'), (30136, 'Ganna'), (697, 'Linnea'), (21152, 'Storm'), (22977, 'Sherazad'), (476768, 'Madison'), (5604, 'Whitney'), (134, 'Dewi'), (169, 'Lidia'), (20142, 'Kanae'), (26950, 'Ilona'), (352458, 'Sloane'), (57585, 'Tina'), (10859, 'Pia'), (39102, 'Yana'), (1380, 'Yixuan'), (843, 'Tamachan'), (8592, 'Ji Young'), (918746, 'Dominika'), (40633, 'Wen Hsin'), (587309, 'Monica'), (16276, 'Susanne'), (736, 'Treta'), (461, 'Sarahi'), (17975, 'Sanaz'), (5803, 'Rebeka'), (1822, 'Luisa Marie'), (156, 'Afroditi'), (56596, 'Nadiya'), (33, 'Anne Sophie'), (210101, 'Kveta'), (3942, 'Despoina'), (43020, 'Tetyana'), (48117, 'Jia Jing'), (12379, 'Macall'), (9180, 'Sofya'), (12519, 'Chun Mei'), (2526, 'Natia'), (143422, 'Janette'), (4580, 'Kim'), (602453, 'Yanina'), (1744, 'Sri Vaishnavi'), (27011, 'Evelyn'), (1187, 'Ludmilla'), (1036, 'Voni'), (317, 'Cristina Madalina'), (250056, 'Catalina'), (6650, 'Anna Arina'), (4643, 'Hanyu'), (269, 'Astrid Wanja'), (964, 'Emily J'), (42925, 'Lesley'), (249, 'Kamilla'), (480, 'Sonia'), (111, 'Rosa'), (4789, 'Xiao'), (344, 'Suzan'), (11260, 'Fanny'), (476, 'Tinatin'), (4766, 'Ingrid Alexandra'), (2020, 'Samira'), (116857, 'Qiang'), (1005319, 'Ekaterina'), (279, 'Milena'), (3002, 'Jiaxi'), (511, 'I Hsuan'), (1583, 'Lisa Marie'), (24279, 'Yuxuan'), (3, 'Marijana'), (155, 'Alory Regina Elorriaga'), (5387, 'Raveena'), (1254, 'Vladislava'), (5356, 'Erin'), (15, 'Joanne'), (55981, 'Misa'), (50, 'Ege'), (44, 'Federica Joe'), (290, 'Ghislaine'), (314747, 'Elina'), (54798, 'Tara'), (416, 'Kaitlin'), (681, 'Se Jin'), (28098, 'Nathalia'), (456422, 'Tsvetana'), (10360, 'Sina'), (275255, 'Urszula'), (2216, 'Liz Tatiane'), (3193, 'Karman'), (491, 'Nikol'), (2127, 'Tea'), (6, 'Loudmilla'), (8180, 'Hae Sung'), (4612, 'Jia Qi'), (6159, 'Chiara'), (880, 'Rosalie'), (39523, 'Mailen'), (672, 'Leonie'), (112562, 'Katalin'), (235721, 'Coco'), (1352, 'Xiaoxi'), (115293, 'Abigail'), (556, 'Rio'), (11873, 'Akari'), (1270, 'Sarah Beth'), (110290, 'Zi'), (84543, 'Veronica'), (27580, 'Hiroko'), (716, 'Siqi'), (382, 'Oyku'), (96, 'Jiaxue'), (32, 'Yarden'), (32, 'Moyuka'), (1960, 'Lilla'), (75, 'Yosr'), (4499, 'Sonja'), (1225, 'Ioana'), (27061, 'Beatrice'), (210, 'Maud'), (79511, 'Viktorija'), (17967, 'Anhelina'), (7772, 'Elena Gabriela'), (219, 'Maureen'), (410, 'Karina Kristina'), (4987, 'Catherine'), (5057, 'Xiaodi'), (3905, 'Kaitlyn'), (3, 'Himari'), (40, 'Ralina'), (172431, 'Paula'), (1236, 'Costanza'), (41575, 'Amandine'), (45115, 'Leticia'), (39418, 'Justine'), (285, 'Yoko'), (1446, 'Julyette Maria Josephine'), (274936, 'Su Wei'), (57745, 'Alice'), (4216, 'Linda'), (17514, 'Patrycja'), (958, 'Cemre'), (468, 'Gabriela Nicole'), (980, 'Ariadna'), (241, 'Pamela'), (207, 'Lauryn'), (8589, 'Daiana'), (21340, 'Piia'), (16303, 'Natela'), (272, 'Mirjam'), (4060, 'Mariam'), (410, 'Kelsey'), (168, 'Denise Antonela'), (275364, 'Chanelle'), (1222, 'Hye Min'), (2922, 'Brianna'), (1388, 'Maria Paulina'), (87844, 'Iryna'), (8072, 'Stamatia'), (39, 'Chanikarn'), (70613, 'Grace'), (6777, 'Chelsey'), (157, 'Amira'), (76747, 'Polina'), (294, 'Kei'), (596, 'Michele Alexandra'), (240195, 'Greta'), (1678, 'Veronica M'), (62252, 'Risa'), (49122, 'Chi Chi'), (1997, 'Margarida'), (354, 'Desirae'), (40, 'Mei Xu'), (111, 'Shangqing'), (4232828, 'Serena'), (18371, 'Sofiya'), (272889, 'Sania'), (5880, 'Kelly S'), (206981, 'Evgeniya'), (325216, 'Polona'), (1261, 'Dabin'), (105, 'Vincenza'), (56212, 'Kumiko'), (646, 'Quinn'), (12829, 'Alexia'), (26077, 'Tammi'), (21205, 'Miharu'), (281, 'Ye Xin'), (12554, 'Elyne'), (15, 'Mihaela Lorena'), (30, 'Lyann'), (15365, 'Natasha'), (679, 'Chia Hsien'), (119797, 'Cagla'), (84, 'Yukako'), (23668, 'Maya'), (6179, 'Gabriella'), (24, 'Hollie'), (12906, 'Kamila'), (28, 'Roosh'), (1016, 'Peggy'), (18, 'Terri'), (63998, 'Bianca'), (150, 'Dajana'), (2875425, 'Venus'), (90, 'Viktoriia'), (10107, 'Kazusa'), (1026, 'Marisa'), (17587, 'Fernanda'), (4380, 'Naiktha'), (15970, 'Kathinka'), (170617, 'Daria'), (78204, 'Sacha'), (882, 'Eliessa'), (5214, 'Abbie'), (3621, 'Anouk'), (1312, 'Seone'), (9116, 'Tessah'), (715, 'Madeleine'), (238, 'Aselya'), (905, 'Margaux'), (27, 'Yasmina'), (270102, 'Kimiko'), (195, 'Saana'), (5269, 'Anne Liz'), (72, 'Janja'), (1067, 'Maja'), (224, 'Nattawadee'), (25166, 'Constance'), (13843, 'Irina Maria'), (809611, 'Roberta'), (8918, 'Vivienne'), (27, 'Sarlota'), (742, 'Akilah'), (1828, 'Yukun'), (151, 'Tingting'), (3, 'Phenomena'), (97, 'Katyarina'), (48811, 'Ani'), (154599, 'Jessica'), (155143, 'Yulia'), (911, 'Romy'), (9536, 'Neda'), (5, 'Chelsea'), (33, 'Lorenza'), (5155, 'Ashling'), (26226, 'Viktoriya'), (511, 'Magalie'), (36889, 'Carolina'), (14129, 'Makoto'), (39782, 'Liezel'), (3426, 'Jeannine'), (6078, 'Laetitia'), (383077, 'Kirsten'), (209, 'Parris'), (451414, 'Aleksandra'), (456, 'Lamis'), (22840, 'Miyabi'), (2266, 'Madrie'), (1132514, 'Angelique'), (3018, 'Verena'), (6809, 'Lidziya'), (18, 'Gulchekhra'), (106, 'Victoria Ariadna'), (21261, 'Fatma'), (910, 'Karoline'), (640, 'Akvile'), (8900, 'Pei Chi'), (33, 'Nataliya'), (1229, 'Tanya'), (1936, 'Karine'), (153, 'Martha'), (294, 'Maria Jesus'), (281, 'Yuan'), (1607, 'Daneika'), (3642, 'Rutuja'), (230262, 'Tatjana'), (1375, 'Jaeda'), (161, 'Ramya'), (3374, 'Chun Yan'), (46908, 'Anais'), (236, 'Shiran'), (141257, 'Rika'), (23620, 'Deniz'), (134, 'Sneha'), (141876, 'Claire'), (1427, 'Anna Maria'), (2025, 'Noelia'), (467, 'Simran Kaur'), (894, 'Keri'), (7755, 'Fang Ying'), (14213, 'Carol'), (1626, 'Sylvia'), (10865, 'Fatima'), (206, 'Almudena'), (1671, 'Luisa'), (20196, 'Melis'), (72, 'Mi Zhuoma'), (6525, 'Freya'), (1626, 'Mira'), (84446, 'Akiko'), (1676, 'Imane Maelle'), (85425, 'Maryna'), (137327, 'Belinda'), (571, 'Ayan'), (122331, 'Regina'), (1679, 'Hayley'), (21, 'Zeynep  Sena'), (15218, 'Caitlin'), (484140, 'Sofia'), (439179, 'Eleni'), (10178, 'Marianna'), (177458, 'Lara'), (99, 'Zhima'), (309, 'Mitsumi'), (4093, 'Julieta Lara'), (1000, 'Gaelle'), (38501, 'Ayu Fani'), (97, 'Laura Sofia'), (2438, 'Christine'), (1987, 'Viktoryia'), (1103, 'Elizabeth Anita Alexandria'), (201173, 'Nina'), (688, 'Mallaurie'), (45, 'Idia'), (1748, 'Yasmine'), (134, 'Nonna'), (64, 'Vita'), (597, 'Shuo'), (7996, 'Ayaka'), (9627, 'Nicolette'), (315, 'Xiyu'), (5422, 'Alix'), (12474, 'Yuka'), (4, 'Mariona'), (5866, 'Kamonwan'), (268277, 'Anastasija'), (578964, 'Laura'), (12525, 'Janina'), (182, 'Yoo Ri'), (1945, 'Napatsakorn'), (52, 'En Pei'), (4128, 'Pavla'), (142, 'Jasmine Amber'), (202, 'Aneta'), (203782, 'Misaki'), (18824, 'Celine'), (3928, 'Helene'), (605, 'Andie K'), (9355, 'Karina'), (289, 'Carson'), (27997, 'Lena'), (1978, 'Eden'), (143, 'Se Hyun'), (24523, 'Nungnadda'), (88369, 'Irena'), (497, 'Stefana'), (6688, 'Isabel'), (3811, 'Olesya'), (52, 'Ahsha'), (20989, 'Eugeniya'), (1453, 'Ylona Georgiana'), (284, 'Meritxell'), (71, 'Aldana'), (138, 'Maurien'), (649, 'Natella'), (40, 'Lorraine M'), (119756, 'Olivia'), (56242, 'Ons'), (73192, 'Veronika'), (565, 'Molly'), (4831, 'Kimberly'), (36, 'Ange Oby'), (993, 'Alicia'), (179, 'Weronika Jasmina'), (1063, 'Hongrui'), (117472, 'Masa'), (21624, 'Antonia'), (114098, 'Donna'), (172004, 'Kai Chen'), (2403, 'Ioana Diana'), (3255, 'Shweta'), (313187, 'Pauline'), (906, 'Satsuki'), (9846, 'Dejana'), (395, 'Iana'), (395, 'Mahitha'), (1884, 'Min'), (61196, 'Aliaksandra'), (87, 'Leticia Garcia'), (42, 'Milagros'), (304, 'Abbi'), (49767, 'Sachia'), (240762, 'Cara'), (984, 'Rianna'), (1214, 'Pranjala'), (107, 'Mila'), (662, 'Blessing'), (259, 'Nam Yeon'), (37981, 'Natsumi'), (65522, 'Denisa'), (39352, 'Ipek'), (221695, 'Silvia'), (24, 'Yihong'), (19223, 'Na Ri'), (9001, 'Syna'), (2400, 'Ulyana'), (11954, 'Cecilia'), (702, 'Zeel'), (714, 'Isabela'), (13010, 'Ivonne'), (26, 'Beauty'), (39960, 'Shiho'), (2258, 'Zuzanna'), (2122, 'Shakhlo'), (38850, 'Taylor'), (280, 'Antonela'), (338, 'Valentina'), (2864, 'Gozal'), (17577, 'Krista'), (701, 'Komola'), (9227, 'Destanee'), (22, 'Layne'), (1892, 'Maria Constanza De Las Mercedes'), (1446, 'Panna'), (6341, 'Svenja'), (237, 'Kaylah'), (11694, 'Wing Yau Venise'), (192296, 'Severine'), (677, 'Giada'), (266197, 'Sandra'), (159, 'Andrina'), (641, 'Qianqian'), (15, 'Mananchaya'), (24569, 'Mi'), (2570, 'Vladyslava'), (30035, 'Katie'), (505, 'Yuki'), (581, 'Sybille'), (480, 'Anushka'), (225987, 'Lesia'), (85, 'Dilara'), (7367, 'Hua Chen'), (63, 'Jule'), (5027, 'Nadezda'), (688, 'Sinead'), (6256, 'Csilla'), (15955, 'Ana Sofia'), (2961, 'Sowjanya'), (1469, 'Seda'), (277, 'Chengyiyi'), (21, 'Avgusta'), (5566, 'Ria'), (822, 'Jawairiah'), (148, 'Maria Camila'), (2191, 'Yuki Kristina'), (323527, 'Alison'), (165477, 'Erika'), (512490, 'Karolina'), (312, 'Blanca'), (336, 'Rosie'), (69242, 'Mihaela'), (870, 'Hyojung'), (55, 'NA'), (64, 'Jada'), (142454, 'Lindsay'), (27, 'Sabina Elena'), (957, 'Ratnika'), (202780, 'Heather'), (156, 'Maria Lourdes'), (21417, 'Korina'), (16886, 'Rocio'), (48, 'Mercedes'), (110, 'Agne'), (78, 'Hazal'), (2662, 'Liubov'), (86, 'Ki Ryang'), (71072, 'Anett'), (2661, 'Nadja'), (25183, 'Alyona'), (9064, 'Mayya'), (36714, 'Vivian'), (4052, 'Alona'), (340, 'Melisa'), (1906587, 'Svetlana'), (160945, 'Katerina'), (316, 'Sasa'), (42, 'Tatia'), (226, 'Aimee'), (601693, 'Kristina'), (228, 'Andjela'), (6810, 'Sabrina'), (406, 'Inci'), (255, 'Vaniya'), (780, 'Sabastiani'), (49207, 'Anna Giulia'), (410, 'Gulben'), (43755, 'Patricia Maria'), (25496, 'Marie'), (114687, 'Marie Eve'), (744, 'Eveliina'), (34647, 'Kristie'), (371140, 'Ksenia'), (102260, 'Corinna'), (48857, 'Dalila'), (19048, 'Angelina'), (457043, 'Sorana'), (154484, 'Mariya'), (47651, 'Nigina'), (8832, 'Alena'), (272, 'Kimika'), (9147, 'Camelia Elena'), (302957, 'Galina'), (19495, 'Ximena'), (141281, 'Kathrin'), (2034, 'Qiu Yu'), (664, 'Phillis'), (33388, 'Fangzhou'), (490, 'Adeliya'), (1258, 'Emiliana'), (836, 'Anhzelika'), (60702, 'Amra'), (24897, 'Stefania'), (8448, 'Rishika'), (1424, 'Alba'), (1083, 'Astra'), (10630, 'Tori'), (12, 'Mouna'), (363, 'Wiktoria'), (14838, 'Aki'), (7323, 'Patty'), (417, 'Meiling'), (4368, 'Hirono'), (1437656, 'Samantha'), (407, 'Megumi'), (363, 'Katharine'), (966, 'Yeong Won'), (613, 'Wendy Qi Wen'), (15071, 'Yuuki'), (2772, 'Zoe'), (7165, 'Tess'), (39, 'Gulnaz'), (9, 'Rana'), (913829, 'Shuai'), (15935, 'Dalma'), (169, 'Selin'), (11393, 'Alina'), (75, 'Sean'), (228, 'Rafaela'), (73, 'Yang'), (102693, 'Mervana'), (147, 'Paige Mary'), (245, 'Angela'), (181, 'Pei Ju'), (10616, 'Amy'), (1864, 'Tornado Alicia'), (7, 'Zhibek'), (40060, 'Tamaryn'), (502, 'Susan'), (71, 'Vishesh'), (11572, 'Katy'), (1622, 'Clemence'), (371035, 'Lourdes'), (522, 'Libi'), (84184, 'Richel'), (26185, 'Na Lae'), (59775, 'Evgenia'), (1657, 'Anette'), (7486, 'Cristiana'), (24, 'Christie'), (96, 'Aishwarya'), (78, 'Ferny'), (15190, 'Chloe'), (18219, 'Fiona'), (296, 'Maria Del Rosario'), (639, 'Dan Ni'), (687, 'Guiomar'), (27, 'Vilma Y'), (4914, 'Chalena'), (42676, 'Sachie'), (4122, 'Jessika'), (3724, 'Kanami'), (12, 'Brienne'), (101816, 'Yurika'), (11714, 'Camilla'), (5425, 'Ioana Loredana'), (40823, 'Danielle'), (39989, 'Estelle'), (2484, 'Giorgia'), (1899, 'Kristy'), (1501, 'Zsofia'), (837, 'Lynn'), (180, 'Miranda'), (1247887, 'Elena'), (662926, 'Shahar'), (96, 'Meiqi'), (3763, 'Vaszilisza'), (20869, 'Cory Ann'), (245139, 'Mathilde'), (2877, 'Zoe Gwen'), (48788, 'Asia'), (21685, 'Francoise'), (247237, 'Stefanie'), (39687, 'Yafan'), (12708, 'Aminat'), (10087, 'Vanda'), (29214, 'Romana'), (464, 'Sari'), (11653, 'Wan Ting'), (1333, 'Nozomi'), (2710, 'Josepha'), (611, 'Jil Nora'), (1578, 'Alejandra'), (648, 'Ashmitha'), (18781, 'Vojislava'), (316, 'Malene'), (34453, 'Jasmin'), (669546, 'Carla'), (178, 'Sarvinoz'), (107595, 'Ying Ying'), (9036, 'Kyoka'), (3633, 'Haruka'), (1589674, 'Ana'), (33, 'Daphne'), (72, 'Abir'), (169371, 'Annika'), (58279, 'Oksana'), (1923, 'Dasha'), (292, 'Ina'), (5372, 'Ofri'), (2061, 'Momoko'), (77519, 'Luksika'), (12304, 'Clothilde'), (30, 'Zhou'), (30, 'Damira'), (38793, 'Roxane'), (324, 'Kelia'), (1917, 'Magali'), (1235, 'Anastasia Evgenyevna'), (90, 'Elodie'), (2434, 'Maddison'), (5687, 'Prarthana G'), (126811, 'Estrella'), (1696, 'Li'), (158, 'Agustina Elena'), (115, 'Nina Isabella'), (452, 'Yu Jin'), (154, 'Arlinda'), (184, 'Yujia'), (24, 'Pei Hsuan'), (1977, 'Mirabelle'), (2221, 'Clelia'), (358, 'Chisa'), (72, 'Liniques'), (60, 'Tamar'), (157, 'Francisca'), (9202, 'Raluca Elena'), (1929137, 'Vera'), (515, 'Katya'), (1726, 'Chiraz'), (9, 'Frederikke'), (176, 'Mi Jeong'), (59997, 'Liana Gabriela'), (10751, 'Ai'), (440, 'Genevieve'), (290299, 'Melinda'), (27118, 'Ulrikke'), (62938, 'Madalina'), (7179, 'Ji Hee'), (614, 'Nikki'), (120995, 'Natalie'), (1546, 'Ylena'), (13697, 'Kayla'), (123243, 'Zarina'), (34, 'Kate'), (2141, 'Ana Paula'), (102, 'Mary Ann'), (22, 'Nikita'), (286, 'Julita'), (17597, 'Danica'), (282445, 'Mona'), (309990, 'Ayumi'), (40, 'Olaya'), (9600, 'Georgia'), (699, 'Radina'), (120, 'Abiodun'), (709, 'Desiree'), (14277, 'Guadalupe'), (23564, 'Montserrat'), (202697, 'Casey'), (81222, 'Jennifer'), (13064, 'Sarah Rebecca'), (1558, 'Noel'), (107, 'Adrienn'), (2358, 'Alice Andrada'), (193767, 'Mandy'), (238, 'Gyulnara'), (1801033, 'Agnieszka'), (519208, 'Virginie'), (2433, 'Ainhoa'), (6591, 'Sun Jung'), (198, 'Shakhnoza'), (8268, 'Sylwia'), (24, 'Ya'), (99836, 'Margalita'), (74, 'Iulia Maria'), (1445, 'Xi Yao'), (541, 'Emiliya'), (33, 'Intissar'), (1358, 'Ineke'), (2127, 'Szabina'), (12, 'Damini'), (682, 'Yuenu'), (6542, 'Lucy'), (21728, 'Agustina'), (1240, 'Monika'), (2, 'Olawaseun'), (3783, 'Ying'), (18210, 'So Ra'), (653, 'Mary'), (9631, 'Hao Chen'), (136, 'Camila Vital'), (1381, 'Yolande'), (243, 'Pippa'), (255, 'Larikah'), (46124, 'Shuko'), (225, 'May'), (64, 'Reina'), (4314, 'Marine'), (8441, 'Bermet'), (129, 'Colomba'), (52, 'Jia'), (4809, 'Klaudia'), (190997, 'Jamie'), (50184, 'Bibiane'), (229, 'Kanako'), (1458, 'Miriam Bianca'), (224, 'Sandy'), (98, 'Hortencia'), (3112, 'Manisha'), (1962, 'Anaeve'), (472, 'Joanna'), (98798, 'Beatriz'), (197904, 'Patricia'), (39307, 'Sophie'), (12, 'Maia A'), (167, 'Farah'), (30401, 'Raquel'), (537, 'Busra'), (1527, 'Ilze'), (383495, 'Aravane'), (376, 'Yekaterina'), (5683, 'Charlene'), (1149, 'Simone'), (7353, 'Dijana'), (1277, 'Sang Hee'), (1011058, 'Flavia')",medium,True,1,
244,wta_1,find the number of players for each country.,"SELECT count(*) ,  country_code FROM players GROUP BY country_code","(79, 'DEN'), (342, 'NED'), (8, 'GUD'), (3, 'SAM'), (1, 'UAE'), (44, 'SIN'), (3, 'NCA'), (63, 'ALG'), (150, 'VEN'), (39, 'CUB'), (4, 'rc='), (236, 'AUT'), (169, 'HUN'), (243, 'SUI'), (68, 'IRL'), (3, 'ECA'), (660, 'GBR'), (232, 'ISR'), (33, 'ESA'), (48, 'EST'), (1, 'NA'), (56, 'HKG'), (247, 'BEL'), (25, 'MNE'), (1, 'ANG'), (145, 'SLO'), (456, 'CZE'), (31, 'LTU'), (163, 'GRE'), (2, 'MON'), (1, 'MGL'), (17, 'MLT'), (29, 'TRI'), (7, 'SEN'), (1, 'GRN'), (853, 'ESP'), (57, 'TUN'), (4, 'GHA'), (19, 'JAM'), (144, 'BLR'), (422, 'ROU'), (35, 'MAS'), (6, 'AHO'), (283, 'RSA'), (15, 'MRI'), (6, 'TJK'), (19, 'VIE'), (3, 'RHO'), (48, 'YUG'), (3, 'LES'), (38, 'DOM'), (15, 'LIE'), (12, 'TKM'), (24, 'CRC'), (10, 'AZE'), (68, 'NOR'), (16, 'SCG'), (45, 'MDA'), (1, 'AND'), (97, 'BOL'), (7, 'IRQ'), (22, 'URS'), (2, 'TOG'), (181, 'INA'), (26, 'ZIM'), (478, 'IND'), (11, 'LIB'), (112, 'EGY'), (8, 'CMR'), (142, 'POR'), (91, 'GEO'), (456, 'ARG'), (4, 'BRU'), (240, 'CRO'), (2217, 'USA'), (224, 'SRB'), (37, 'LUX'), (27, 'ARM'), (3, 'OMA'), (810, 'RUS'), (13, 'NAM'), (75, 'BIH'), (99, 'KAZ'), (103, 'FIN'), (1, 'PNG'), (17, 'BOT'), (18, 'PAK'), (2, 'ALB'), (22, 'PAN'), (1, 'ZAM'), (23, 'KGZ'), (20, 'BER'), (5, 'BRN'), (56, 'PAR'), (104, 'NZL'), (833, 'GER'), (56, 'LAT'), (311, 'UKR'), (5, 'BDI'), (171, 'THA'), (6, 'JOR'), (2, 'CGO'), (240, 'COL'), (70, 'PHI'), (266, 'POL'), (5, 'FIJ'), (203, 'TUR'), (324, 'SWE'), (247, 'SVK'), (22, 'CYP'), (8, 'ANT'), (4, 'MRN'), (80, 'NGR'), (20, 'BAR'), (114, 'CHI'), (742, 'AUS'), (736, 'FRA'), (8, 'HON'), (181, 'BUL'), (11, 'UNK'), (391, 'CHN'), (43, 'PUR'), (97, 'MAR'), (1, 'TTO'), (21, 'SYR'), (21, 'MAD'), (331, 'CAN'), (456, 'BRA'), (15, 'IRI'), (146, 'TPE'), (23, 'MKD'), (22, 'FRG'), (12, 'POC'), (18, 'ISL'), (5, 'HAI'), (90, 'ECU'), (274, 'KOR'), (32, 'SRI'), (76, 'PER'), (29, 'GUA'), (17, 'REU'), (22, 'BAH'), (866, 'ITA'), (2, 'BEN'), (21, 'TCH'), (23, 'KEN'), (823, 'JPN'), (56, 'URU'), (4, 'SMR'), (416, 'MEX'), (1, 'QAT'), (123, 'UZB'), (8, 'ETH'), (3, 'KUW')","SELECT count( *), T1.country_code FROM players AS T1  GROUP BY T1.country_code","(79, 'DEN'), (342, 'NED'), (8, 'GUD'), (3, 'SAM'), (1, 'UAE'), (44, 'SIN'), (3, 'NCA'), (63, 'ALG'), (150, 'VEN'), (39, 'CUB'), (4, 'rc='), (236, 'AUT'), (169, 'HUN'), (243, 'SUI'), (68, 'IRL'), (3, 'ECA'), (660, 'GBR'), (232, 'ISR'), (33, 'ESA'), (48, 'EST'), (1, 'NA'), (56, 'HKG'), (247, 'BEL'), (25, 'MNE'), (1, 'ANG'), (145, 'SLO'), (456, 'CZE'), (31, 'LTU'), (163, 'GRE'), (2, 'MON'), (1, 'MGL'), (17, 'MLT'), (29, 'TRI'), (7, 'SEN'), (1, 'GRN'), (853, 'ESP'), (57, 'TUN'), (4, 'GHA'), (19, 'JAM'), (144, 'BLR'), (422, 'ROU'), (35, 'MAS'), (6, 'AHO'), (283, 'RSA'), (15, 'MRI'), (6, 'TJK'), (19, 'VIE'), (3, 'RHO'), (48, 'YUG'), (3, 'LES'), (38, 'DOM'), (15, 'LIE'), (12, 'TKM'), (24, 'CRC'), (10, 'AZE'), (68, 'NOR'), (16, 'SCG'), (45, 'MDA'), (1, 'AND'), (97, 'BOL'), (7, 'IRQ'), (22, 'URS'), (2, 'TOG'), (181, 'INA'), (26, 'ZIM'), (478, 'IND'), (11, 'LIB'), (112, 'EGY'), (8, 'CMR'), (142, 'POR'), (91, 'GEO'), (456, 'ARG'), (4, 'BRU'), (240, 'CRO'), (2217, 'USA'), (224, 'SRB'), (37, 'LUX'), (27, 'ARM'), (3, 'OMA'), (810, 'RUS'), (13, 'NAM'), (75, 'BIH'), (99, 'KAZ'), (103, 'FIN'), (1, 'PNG'), (17, 'BOT'), (18, 'PAK'), (2, 'ALB'), (22, 'PAN'), (1, 'ZAM'), (23, 'KGZ'), (20, 'BER'), (5, 'BRN'), (56, 'PAR'), (104, 'NZL'), (833, 'GER'), (56, 'LAT'), (311, 'UKR'), (5, 'BDI'), (171, 'THA'), (6, 'JOR'), (2, 'CGO'), (240, 'COL'), (70, 'PHI'), (266, 'POL'), (5, 'FIJ'), (203, 'TUR'), (324, 'SWE'), (247, 'SVK'), (22, 'CYP'), (8, 'ANT'), (4, 'MRN'), (80, 'NGR'), (20, 'BAR'), (114, 'CHI'), (742, 'AUS'), (736, 'FRA'), (8, 'HON'), (181, 'BUL'), (11, 'UNK'), (391, 'CHN'), (43, 'PUR'), (97, 'MAR'), (1, 'TTO'), (21, 'SYR'), (21, 'MAD'), (331, 'CAN'), (456, 'BRA'), (15, 'IRI'), (146, 'TPE'), (23, 'MKD'), (22, 'FRG'), (12, 'POC'), (18, 'ISL'), (5, 'HAI'), (90, 'ECU'), (274, 'KOR'), (32, 'SRI'), (76, 'PER'), (29, 'GUA'), (17, 'REU'), (22, 'BAH'), (866, 'ITA'), (2, 'BEN'), (21, 'TCH'), (23, 'KEN'), (823, 'JPN'), (56, 'URU'), (4, 'SMR'), (416, 'MEX'), (1, 'QAT'), (123, 'UZB'), (8, 'ETH'), (3, 'KUW')",medium,True,1,
245,wta_1,find the code of the country where has the greatest number of players.,SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1,"('USA',)",SELECT T1.country_code FROM players AS T1  GROUP BY T1.country_code  ORDER BY count( *) DESC LIMIT 1,"('USA',)",hard,True,1,
246,wta_1,Find the codes of countries that have more than 50 players.,SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50,"('DEN',), ('NED',), ('ALG',), ('VEN',), ('AUT',), ('HUN',), ('SUI',), ('IRL',), ('GBR',), ('ISR',), ('HKG',), ('BEL',), ('SLO',), ('CZE',), ('GRE',), ('ESP',), ('TUN',), ('BLR',), ('ROU',), ('RSA',), ('NOR',), ('BOL',), ('INA',), ('IND',), ('EGY',), ('POR',), ('GEO',), ('ARG',), ('CRO',), ('USA',), ('SRB',), ('RUS',), ('BIH',), ('KAZ',), ('FIN',), ('PAR',), ('NZL',), ('GER',), ('LAT',), ('UKR',), ('THA',), ('COL',), ('PHI',), ('POL',), ('TUR',), ('SWE',), ('SVK',), ('NGR',), ('CHI',), ('AUS',), ('FRA',), ('BUL',), ('CHN',), ('MAR',), ('CAN',), ('BRA',), ('TPE',), ('ECU',), ('KOR',), ('PER',), ('ITA',), ('JPN',), ('URU',), ('MEX',), ('UZB',)",SELECT T1.country_code FROM players AS T1  GROUP BY T1.country_code HAVING count( *) > 50,"('DEN',), ('NED',), ('ALG',), ('VEN',), ('AUT',), ('HUN',), ('SUI',), ('IRL',), ('GBR',), ('ISR',), ('HKG',), ('BEL',), ('SLO',), ('CZE',), ('GRE',), ('ESP',), ('TUN',), ('BLR',), ('ROU',), ('RSA',), ('NOR',), ('BOL',), ('INA',), ('IND',), ('EGY',), ('POR',), ('GEO',), ('ARG',), ('CRO',), ('USA',), ('SRB',), ('RUS',), ('BIH',), ('KAZ',), ('FIN',), ('PAR',), ('NZL',), ('GER',), ('LAT',), ('UKR',), ('THA',), ('COL',), ('PHI',), ('POL',), ('TUR',), ('SWE',), ('SVK',), ('NGR',), ('CHI',), ('AUS',), ('FRA',), ('BUL',), ('CHN',), ('MAR',), ('CAN',), ('BRA',), ('TPE',), ('ECU',), ('KOR',), ('PER',), ('ITA',), ('JPN',), ('URU',), ('MEX',), ('UZB',)",easy,True,1,
247,wta_1,Find the total number of tours for each ranking date.,"SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date","(14667, 20130128), (14545, 20130527), (16345, 20161121), (1065, 20000320), (3282, 20040223), (1188, 20000703), (0, 19881031), (2571, 20030317), (9611, 20090803), (147, 19960624), (1253, 20001016), (11594, 20101018), (5862, 20060612), (0, 19880919), (13628, 20120109), (1224, 20000828), (29, 19910624), (1853, 20020805), (14820, 20130909), (1173, 20001106), (172, 19961007), (1232, 20001009), (96, 19950626), (11290, 20100920), (15568, 20150420), (688, 19981005), (1263, 20010924), (363, 19971201), (0, 19890306), (459, 19980511), (7790, 20080310), (722, 19990125), (225, 19970602), (13342, 20110919), (0, 19890327), (1430, 20020121), (30, 19900910), (44, 19911209), (0, 19881010), (16303, 20170501), (861, 19990906), (15800, 20150921), (3257, 20040202), (0, 19880905), (7448, 20070618), (9064, 20090126), (723, 19990208), (459, 19980525), (75, 19931213), (0, 19870622), (2955, 20040524), (337, 19971110), (12267, 20110307), (2728, 20030602), (45, 19911216), (273, 19970929), (62, 19930503), (10726, 20100712), (1853, 20020729), (14438, 20120924), (13411, 20111017), (14516, 20130513), (0, 19870706), (44, 19930517), (7602, 20070910), (3831, 20040920), (68, 19940919), (15637, 20140113), (12867, 20110704), (0, 19880808), (0, 19871109), (9682, 20090831), (13542, 20111205), (45, 19930315), (0, 19880425), (777, 19990531), (8565, 20140217), (138, 19951218), (14389, 20120827), (3211, 20031215), (16230, 20170320), (171, 19960902), (45, 19930329), (11125, 20100830), (131, 19951016), (4160, 20050117), (2505, 20021021), (65, 19940606), (30, 19910909), (30, 19900806), (5357, 20051114), (6953, 20070101), (0, 19870330), (57, 19940523), (6026, 20060717), (14569, 20130617), (1027, 20010219), (185, 19970101), (2462, 20020923), (5452, 20051212), (213, 19961118), (16268, 20170814), (0, 19880523), (663, 19980921), (1187, 20040510), (0, 19880509), (3211, 20031222), (6896, 20061127), (45, 19911230), (225, 19970505), (0, 19880627), (10412, 20100329), (3592, 20040802), (1489, 20040419), (16226, 20170424), (1834, 20020708), (13667, 20120130), (5798, 20060605), (29, 19891225), (0, 19881017), (30, 19900618), (45, 19930118), (96, 19950612), (29, 19890522), (62, 19930510), (2526, 20021007), (9077, 20081215), (12303, 20110328), (14695, 20130304), (29, 19890619), (29, 19900528), (10430, 20100301), (29, 19910812), (989, 20000103), (2497, 20021209), (0, 19871116), (223, 19970324), (363, 19971117), (11845, 20101122), (16124, 20170508), (62, 19921102), (15776, 20150810), (29, 19900108), (7686, 20070924), (394, 19980105), (16388, 20160502), (13174, 20110829), (5683, 20060515), (13299, 20110912), (2497, 20021230), (5090, 20050822), (29, 19891009), (14264, 20120730), (10204, 20091123), (952, 20010416), (723, 19990215), (12686, 20110627), (75, 19930927), (12467, 20110516), (9808, 20090914), (11026, 20100823), (927, 19991004), (29, 19900115), (45, 19930301), (13140, 20110822), (7495, 20070709), (1412, 20011112), (2497, 20030113), (29, 19900402), (394, 19980216), (728, 19990315), (1448, 20020318), (14389, 20120903), (131, 19950925), (4160, 20050110), (8527, 20080908), (13964, 20120423), (14612, 20121126), (118, 19950807), (7058, 20070319), (29, 19900521), (68, 19940912), (14016, 20120507), (10272, 20091221), (15623, 20150518), (5401, 20051128), (11617, 20101025), (29, 19910722), (10318, 20091228), (14087, 20120528), (45, 19930322), (1201, 20010827), (0, 19880822), (1925, 20020812), (29, 19890130), (29, 19900416), (171, 19960722), (5175, 20050926), (69, 19950515), (4333, 20050328), (147, 19960422), (5644, 20060417), (29, 19910311), (0, 19880418), (0, 19871214), (3277, 20040405), (60, 19940829), (16372, 20170102), (314, 19971027), (9474, 20090720), (147, 19960304), (16270, 20170417), (394, 19980223), (8996, 20081110), (10412, 20100322), (941, 19991025), (7966, 20080630), (16351, 20160523), (1149, 20010723), (45, 19930215), (0, 19870126), (171, 19960715), (171, 19960812), (543, 19980608), (988, 20010430), (29, 19881121), (7139, 20070402), (9682, 20090824), (10372, 20100208), (8690, 20080922), (63, 19940214), (804, 19990607), (426, 19980406), (3587, 20040719), (13081, 20110808), (696, 19981019), (1422, 20020211), (2451, 20020909), (0, 19870518), (989, 20000110), (2777, 20030728), (2801, 20030901), (29, 19881226), (0, 19880307), (2732, 20030804), (6284, 20060904), (29, 19891030), (171, 19960805), (5452, 20051226), (6790, 20130401), (69, 19950327), (13938, 20120416), (459, 19980413), (10937, 20100809), (5257, 20051024), (0, 19880912), (853, 19990823), (1267, 20011008), (692, 19981123), (13443, 20111024), (6953, 20061218), (45, 19920615), (9087, 20090209), (30, 19901119), (9070, 20081229), (13603, 20120101), (29, 19920210), (961, 20001204), (213, 19961216), (43, 19930816), (11125, 20100906), (1205, 20000717), (1577, 20020520), (69, 19950130), (15475, 20150427), (9110, 20090420), (29, 19890529), (30, 19901015), (147, 19960603), (1038, 20000207), (69, 19950206), (131, 19951023), (30, 19910916), (4198, 20050207), (7473, 20070625), (3492, 20040628), (5441, 20060213), (9929, 20091005), (29, 19890828), (14462, 20130429), (45, 19920601), (44, 19930607), (829, 19990719), (663, 19980914), (45, 19920106), (223, 19970331), (0, 19880411), (7504, 20070827), (12181, 20110207), (62, 19921109), (0, 19880229), (30, 19910708), (29, 19890605), (29, 19891002), (16517, 20160307), (29, 19891127), (394, 19971215), (7017, 20070312), (9856, 20090921), (31, 19911028), (11907, 20101213), (75, 19940110), (6925, 20070205), (2587, 20030414), (4071, 20041108), (209, 19970203), (97, 19950710), (65, 19940620), (3987, 20041018), (964, 20001218), (0, 19880328), (8325, 20080804), (60, 19940725), (879, 19990920), (29, 19890814), (7503, 20070820), (10756, 20100719), (964, 20001211), (394, 19980209), (0, 19871019), (9057, 20090323), (1577, 20020429), (459, 19980518), (459, 19980601), (57, 19940509), (2549, 20030310), (4011, 20041101), (1175, 20010813), (90, 19920914), (30, 19900820), (9121, 20090413), (45, 19930111), (569, 19980615), (185, 19970113), (941, 19991108), (6808, 20061030), (138, 19951225), (15512, 20131209), (45, 19920504), (147, 19960408), (6893, 20061120), (29, 19891016), (16293, 20160627), (16184, 20170626), (14679, 20130805), (15545, 20150413), (125, 19960205), (394, 19980119), (5020, 20050815), (9140, 20090518), (29, 19890206), (65, 19940627), (90, 19920921), (4160, 20041227), (43, 19930913), (58, 19931025), (6284, 20060828), (29, 19900205), (3645, 20040809), (1265, 20000918), (7711, 20071029), (989, 20000117), (147, 19960226), (16305, 20170213), (7707, 20071008), (14472, 20121001), (3020, 20031027), (14652, 20130204), (964, 20001225), (2966, 20031013), (69, 19941226), (29, 19900430), (225, 19970609), (1276, 20000731), (5452, 20051219), (4147, 20041129), (46, 19920713), (7197, 20070423), (45, 19920420), (12398, 20110411), (147, 19960513), (8639, 20080915), (69, 19941107), (7761, 20080303), (633, 19980720), (62, 19930712), (14610, 20121203), (1245, 20001023), (0, 19870525), (961, 20010423), (11904, 20110101), (0, 19880104), (12201, 20110221), (118, 19950724), (4926, 20050801), (69, 19941128), (62, 19921005), (13610, 20120102), (59, 19941031), (15557, 20150302), (977, 20010205), (4379, 20050425), (1312, 20011105), (1093, 20000424), (1573, 20020401), (1448, 20020325), (73, 19920810), (989, 20000101), (43, 19930802), (29, 19890626), (2520, 20021014), (30, 19900730), (29, 19890116), (69, 19941205), (0, 19870413), (125, 19960219), (692, 19981109), (45, 19911223), (29, 19891106), (209, 19970217), (9057, 20090330), (13482, 20111114), (45, 19920622), (29, 19890717), (7341, 20070521), (194, 19960909), (9087, 20090202), (30, 19910304), (394, 19980101), (1160, 20000612), (13949, 20121231), (861, 19990830), (1783, 20020701), (7711, 20080121), (8090, 20080526), (1027, 20010312), (60, 19940808), (2613, 20040503), (4705, 20050613), (6436, 20061002), (13443, 20111107), (16325, 20160815), (69, 19950109), (2671, 20030512), (5944, 20060703), (6926, 20070108), (4211, 20050214), (703, 19981207), (2930, 20030929), (10025, 20091026), (1065, 20000327), (2847, 20030915), (15028, 20131007), (0, 19880620), (30, 19901112), (9111, 20090427), (69, 19950306), (964, 20010101), (7659, 20071217), (58, 19931004), (961, 20001120), (62, 19921019), (7522, 20070806), (8898, 20081027), (14223, 20120716), (14331, 20120813), (0, 19890213), (3456, 20040614), (44, 19930101), (1577, 20020513), (16191, 20151012), (175, 19961021), (14667, 20130121), (29, 19891204), (804, 19990705), (1574, 20020415), (29, 19910527), (688, 19981012), (0, 19870803), (16446, 20160411), (29, 19910422), (0, 19880125), (5944, 20060626), (69, 19950220), (4489, 20050516), (722, 19990104), (10634, 20100628), (75, 19940117), (29, 19910318), (30, 19900723), (30, 19910225), (0, 19870921), (14015, 20120514), (5237, 20051017), (14651, 20130211), (8585, 20140120), (6816, 20061106), (15098, 20131104), (1574, 20020422), (12686, 20110620), (69, 19950101), (14585, 20121105), (692, 19981116), (62, 19921207), (69, 19950424), (2361, 20040517), (394, 19980112), (1835, 20020715), (14034, 20120521), (299, 19971013), (13465, 20111031), (30, 19901022), (44, 19930531), (13818, 20120326), (3206, 20040119), (8417, 20080901), (5452, 20060101), (12343, 20110404), (941, 19991115), (30, 19900924), (29, 19910729), (44, 19940418), (2528, 20030224), (3647, 20040816), (16316, 20160919), (75, 19931206), (69, 19950417), (29, 19891113), (3592, 20040726), (15741, 20150525), (172, 19960916), (29, 19910513), (0, 19880829), (29, 19890731), (723, 19990301), (5331, 20051031), (7197, 20070416), (3092, 20031124), (631, 19980824), (4160, 20041213), (7716, 20080204), (1204, 20000710), (14172, 20120625), (13983, 20120430), (1430, 20020128), (6930, 20070212), (43, 19930830), (15810, 20150622), (29, 19900122), (16111, 20170306), (16204, 20170515), (29, 19900305), (0, 19870202), (29, 19890508), (57, 19940516), (16207, 20170220), (69, 19950529), (69, 19941003), (2507, 20030210), (30, 19910211), (1312, 20011029), (5654, 20060508), (131, 19950828), (3279, 20040301), (131, 19950821), (1201, 20010903), (15578, 20150406), (138, 19960101), (7478, 20070716), (9925, 20091012), (16290, 20170522), (69, 19950508), (7917, 20080428), (9153, 20090525), (10221, 20091207), (1094, 20010618), (29, 19891218), (1430, 20020101), (703, 19990101), (2496, 20020930), (0, 19870608), (426, 19980330), (3286, 20040322), (2505, 20021028), (0, 19870420), (16305, 20160926), (14138, 20120618), (14172, 20120702), (1422, 20020204), (14525, 20121022), (2571, 20030324), (44, 19911104), (1437, 20011203), (1106, 20000605), (90, 19920928), (29, 19910408), (16301, 20170828), (2759, 20030721), (29, 19890918), (45, 19920120), (1038, 20000228), (30, 19900813), (8002, 20080512), (9255, 20090622), (14487, 20130506), (16294, 20161128), (1437, 20011126), (69, 19950501), (1424, 20020311), (12999, 20110801), (125, 19960129), (30, 19910218), (899, 19990927), (1915, 20020819), (1027, 20010226), (4371, 20050411), (13536, 20111212), (30, 19910128), (14751, 20130722), (69, 19940926), (2111, 20020826), (8794, 20081013), (29, 19900319), (11460, 20101004), (29, 19890904), (147, 19960311), (4286, 20050221), (6304, 20060911), (273, 19970922), (16379, 20170116), (459, 19980420), (8030, 20080609), (29, 19910805), (16361, 20160606), (5658, 20060424), (631, 19980817), (728, 19990329), (7743, 20080211), (14649, 20130218), (213, 19961111), (15832, 20150914), (829, 19990802), (9063, 20090223), (45, 19930125), (125, 19960122), (32, 19930208), (1101, 20010319), (15659, 20140224), (16157, 20170612), (0, 19870824), (1224, 20000821), (30, 19901008), (3286, 20040315), (45, 19920323), (1013, 20000131), (1149, 20010730), (69, 19950522), (1422, 20020218), (660, 19980907), (10613, 20100607), (10003, 20091019), (2753, 20030616), (2497, 20030120), (29, 19881212), (147, 19960617), (12522, 20110523), (0, 19880404), (16454, 20160418), (8113, 20080714), (29, 19890925), (14689, 20130715), (1065, 20000403), (2730, 20030707), (0, 19870727), (45, 19920518), (2719, 20030428), (90, 19920907), (4982, 20050808), (13719, 20120220), (4124, 20041115), (273, 19970811), (30, 19900827), (8417, 20080825), (62, 19921012), (4362, 20050404), (73, 19920803), (2614, 20030331), (11877, 20101129), (10634, 20100531), (14878, 20130923), (16279, 20170821), (16489, 20160425), (69, 19950123), (7682, 20071224), (29, 19910101), (16406, 20170109), (15701, 20131223), (14547, 20121029), (138, 19951113), (10373, 20100201), (30, 19910121), (1224, 20000904), (4859, 20050725), (8372, 20080811), (10116, 20091109), (10442, 20100315), (14545, 20130603), (223, 19970224), (1160, 20000619), (125, 19960212), (29, 19890710), (14451, 20130422), (914, 20010402), (7643, 20070917), (7873, 20080407), (3379, 20040426), (10630, 20100614), (30, 19910114), (3516, 20040712), (57, 19940530), (9063, 20090302), (62, 19921130), (5656, 20060501), (7711, 20080114), (75, 19940103), (870, 19990809), (69, 19941219), (961, 20001127), (9050, 20081201), (16138, 20151019), (16184, 20150831), (0, 19870720), (30, 19901224), (147, 19960701), (5362, 20051107), (6629, 20061016), (1276, 20000807), (62, 19921026), (13129, 20110815), (10137, 20091116), (964, 20010108), (12895, 20110711), (1188, 20000626), (0, 19890227), (633, 19980713), (2498, 20021104), (0, 19870504), (8731, 20080929), (13518, 20111121), (147, 19960401), (45, 19920406), (930, 20010409), (728, 19990322), (11913, 20101220), (0, 19871228), (0, 19870907), (6925, 20070129), (16249, 20161114), (209, 19970127), (62, 19921123), (147, 19960429), (29, 19890320), (62, 19921214), (45, 19930222), (633, 19980706), (7650, 20071203), (11687, 20101101), (119, 19920824), (1223, 20001002), (1106, 20000529), (29, 19900507), (0, 19870601), (12434, 20110418), (989, 19991220), (0, 19870928), (5798, 20060529), (11339, 20100927), (16454, 20160222), (1093, 20000410), (14866, 20130916), (29, 19890501), (693, 19981102), (30, 19910826), (62, 19930705), (14087, 20120604), (829, 19990726), (2497, 20030106), (14639, 20121210), (3492, 20040621), (1029, 20010521), (4286, 20050228), (1011, 20010514), (12303, 20110321), (10318, 20100104), (590, 19980629), (69, 19950227), (29, 19900219), (12682, 20110613), (75, 19940124), (45, 19920413), (62, 19940321), (69, 19950410), (62, 19930419), (0, 19870914), (3052, 20031110), (3206, 20040126), (5548, 20060313), (4160, 20050103), (8280, 20080728), (15708, 20131230), (9153, 20090601), (989, 19991227), (29, 19900312), (804, 19990621), (722, 19990118), (0, 19881003), (14554, 20130225), (29, 19910610), (63, 19940221), (29, 19910715), (9376, 20090713), (10238, 20091130), (28, 19890101), (147, 19960506), (1106, 20000522), (5721, 20060522), (14531, 20130520), (273, 19970804), (4727, 20050627), (7058, 20070326), (0, 19870831), (14286, 20120806), (60, 19940815), (13565, 20111219), (10999, 20100816), (7365, 20070528), (257, 19970721), (14480, 20121008), (4160, 20050124), (13618, 20120123), (5452, 20060123), (9059, 20090216), (9143, 20090511), (62, 19940314), (172, 19960930), (634, 19980810), (12482, 20110509), (13666, 20120206), (29, 19890109), (62, 19921116), (0, 19880314), (3214, 20031229), (213, 19961125), (1228, 20010910), (15908, 20150824), (15540, 20131216), (59, 19941024), (9053, 20090309), (11256, 20100913), (13618, 20120116), (16529, 20160215), (3785, 20040913), (13881, 20120402), (7659, 20071210), (966, 19991129), (723, 19990222), (4379, 20050502), (3282, 20040216), (363, 19971124), (44, 19930524), (5559, 20060320), (15101, 20131111), (69, 19950102), (8956, 20081103), (829, 19990712), (14591, 20130408), (3968, 20041025), (1073, 20010702), (1783, 20020610), (1730, 20020506), (8089, 20080707), (191, 19961104), (394, 19980126), (30, 19910902), (3705, 20040830), (9064, 20090112), (394, 19980309), (11904, 20101227), (12143, 20110131), (62, 19940307), (394, 19971222), (60, 19940801), (5425, 20060206), (7470, 20070723), (2535, 20040531), (13517, 20111128), (777, 19990517), (10320, 20100111), (964, 20010122), (634, 19980727), (5897, 20060619), (125, 19960108), (29, 19891211), (5100, 20050829), (761, 19990503), (2652, 20030505), (1291, 20011022), (6226, 20060814), (16336, 20161205), (0, 19880606), (1101, 20010326), (125, 19960115), (9642, 20090817), (29, 19890410), (69, 19941121), (13603, 20111226), (3214, 20040101), (29, 19910401), (30, 19910107), (45, 19920302), (273, 19970901), (1106, 20000515), (14650, 20130624), (12438, 20110502), (0, 19880201), (4816, 20050711), (7677, 20071105), (5452, 20060109), (0, 19871012), (7742, 20080218), (14621, 20121112), (13674, 20120213), (1122, 20000508), (30, 19900917), (15646, 20140127), (30, 19900709), (225, 19970519), (10634, 20100621), (44, 19920101), (16314, 20160620), (9598, 20090810), (29, 19900212), (69, 19941212), (131, 19951002), (1065, 20000306), (185, 19970120), (60, 19940822), (57, 19940502), (3957, 20041004), (394, 19971208), (5452, 20060102), (14714, 20130826), (147, 19960610), (1430, 20020107), (29, 19890911), (16161, 20170911), (76, 19930920), (989, 20000124), (2490, 20030217), (29, 19890703), (131, 19950904), (12422, 20110425), (45, 19930201), (1241, 20000911), (13174, 20110905), (43, 19930809), (4313, 20050307), (16147, 20170807), (5478, 20060220), (13966, 20130107), (69, 19950213), (225, 19970428), (213, 19961202), (15710, 20150511), (394, 19980323), (30, 19900716), (225, 19970414), (29, 19900409), (30, 19910204), (15025, 20131021), (6520, 20061009), (10404, 20100222), (16233, 20161010), (118, 19950717), (9064, 20090119), (0, 19880502), (977, 20010129), (0, 19880222), (14599, 20130812), (459, 19980427), (30, 19901001), (703, 19981228), (13791, 20120312), (45, 19920127), (7929, 20080505), (29, 19890102), (9066, 20090406), (60, 19940718), (225, 19970630), (16189, 20170619), (273, 19970825), (16586, 20160208), (138, 19951204), (29, 19890313), (29, 19910701), (1828, 20020722), (257, 19970728), (728, 19990419), (4727, 20050620), (31, 19911007), (223, 19970310), (118, 19950731), (0, 19880815), (14766, 20130729), (1231, 20010917), (804, 19990628), (60, 19940905), (0, 19871005), (225, 19970512), (0, 19880516), (12204, 20110214), (2517, 20030203), (0, 19870615), (45, 19920330), (45, 19921228), (61, 19940411), (2549, 20030303), (29, 19910520), (75, 19931129), (29, 19910617), (1577, 20020603), (1424, 20020304), (7175, 20070409), (31, 19911014), (223, 19970407), (62, 19940404), (1574, 20020408), (9310, 20090706), (5249, 20051010), (191, 19961028), (1430, 20020114), (3038, 20031103), (147, 19960415), (62, 19940131), (1783, 20020624), (29, 19900611), (5626, 20060410), (394, 19980202), (14072, 20120611), (3206, 20040112), (14250, 20120723), (7527, 20070813), (3986, 20041011), (3286, 20040329), (7674, 20071126), (2457, 20020916), (10272, 20091214), (29, 19900514), (459, 19980504), (0, 19880725), (2731, 20030630), (69, 19941114), (7687, 20071015), (75, 19931220), (7317, 20070514), (6988, 20070226), (0, 19870817), (7017, 20070305), (58, 19931108), (0, 19870713), (30, 19900702), (45, 19920203), (0, 19890403), (131, 19950911), (1135, 20010716), (16364, 20161107), (7832, 20080331), (0, 19870302), (723, 19990308), (5100, 20050905), (10389, 20100215), (15703, 20140106), (16649, 20170529), (14180, 20120709), (73, 19920817), (6926, 20070115), (7666, 20071119), (12927, 20110718), (69, 19941017), (75, 19931227), (4313, 20050314), (175, 19961014), (44, 19930621), (4522, 20050523), (0, 19870810), (1067, 20010604), (14402, 20120917), (14885, 20130930), (30, 19901105), (15334, 20131202), (69, 19941010), (873, 19990816), (3286, 20040308), (7682, 20071231), (185, 19961223), (5452, 20060116), (0, 19870406), (13791, 20120305), (29, 19910819), (62, 19930412), (12094, 20110124), (29, 19890807), (43, 19930906), (61, 19940328), (2497, 20021111), (3035, 20031020), (4145, 20041122), (7917, 20080421), (12522, 20110530), (15761, 20150803), (16145, 20170731), (1430, 20011231), (0, 19880321), (30, 19901210), (14649, 20121224), (703, 19981221), (5983, 20060710), (590, 19980622), (138, 19951127), (29, 19890424), (65, 19940613), (4198, 20050131), (16178, 20151005), (16518, 20160118), (1004, 20010212), (14651, 20130708), (45, 19930405), (29, 19890417), (11888, 20101206), (29, 19890612), (728, 19990405), (0, 19880530), (2497, 20030127), (9070, 20081222), (0, 19870209), (879, 19990913), (10442, 20100308), (1038, 20000214), (15151, 20131118), (16374, 20160509), (58, 19931101), (804, 19990614), (7448, 20070611), (11566, 20101011), (4160, 20041206), (16387, 20161212), (7970, 20080616), (10515, 20100412), (14624, 20121119), (7790, 20080317), (58, 19931018), (16597, 20170703), (257, 19970714), (12659, 20110606), (69, 19950313), (1175, 20010820), (9053, 20090316), (9682, 20090907), (10835, 20100802), (7664, 20071112), (7966, 20080623), (10543, 20100419), (14667, 20130114), (3913, 20040927), (941, 19991011), (337, 19971103), (273, 19970915), (16629, 20160201), (8387, 20080818), (2801, 20030825), (45, 19920113), (3065, 20031117), (11814, 20101115), (75, 19931115), (1094, 20010611), (728, 19990412), (9203, 20090608), (1122, 20000501), (693, 19981026), (2755, 20030818), (8022, 20080519), (966, 19991206), (14553, 20130610), (45, 19920608), (62, 19930426), (29, 19890821), (5559, 20060327), (67, 19940711), (29, 19881219), (964, 20010115), (1231, 20000925), (225, 19970623), (131, 19951106), (90, 19920831), (3661, 20040823), (62, 19930719), (29, 19881205), (30, 19901203), (9094, 20090504), (75, 19931122), (2728, 20030519), (4522, 20050530), (185, 19961230), (2587, 20030407), (1065, 20000313), (8235, 20080721), (0, 19871123), (16515, 20160229), (3705, 20040906), (15337, 20131125), (3190, 20031208), (5441, 20060130), (0, 19880111), (13382, 20110926), (0, 19880613), (44, 19911111), (28, 19900101), (46, 19920720), (7691, 20080128), (12267, 20110314), (96, 19950703), (10329, 20100118), (4379, 20050418), (2497, 20021118), (30, 19901029), (209, 19970210), (2497, 20021202), (6347, 20060918), (9003, 20081117), (13788, 20120227), (634, 19980803), (14389, 20120910), (147, 19960527), (45, 19920316), (2497, 20021125), (10061, 20091102), (1093, 20000417), (45, 19920309), (10685, 20100705), (44, 19930614), (0, 19880118), (29, 19891023), (0, 19871026), (5187, 20050912), (45, 19920706), (223, 19970317), (12067, 20110110), (69, 19950116), (0, 19880101), (13382, 20111010), (29, 19890515), (29, 19910415), (171, 19960819), (6953, 20061211), (8762, 20081006), (15071, 20131028), (62, 19921221), (73, 19940101), (2497, 20021216), (0, 19880215), (7889, 20080414), (0, 19870119), (0, 19871130), (69, 19950320), (0, 19880704), (44, 19930628), (118, 19950814), (7682, 20080107), (761, 19990510), (45, 19920427), (1067, 20010528), (1424, 20020225), (30, 19910923), (1288, 20011015), (7682, 20080101), (12060, 20110103), (5173, 20050919), (1287, 20011001), (1247, 20001030), (5528, 20060227), (29, 19900226), (394, 19980316), (15632, 20140203), (2753, 20030609), (941, 19991122), (1175, 20010806), (1224, 20000814), (10593, 20100517), (57, 19940425), (131, 19951009), (45, 19920224), (45, 19920525), (4470, 20050509), (185, 19970106), (6376, 20060925), (138, 19951211), (31, 19911202), (223, 19970303), (13902, 20120409), (29, 19900129), (29, 19910429), (225, 19970616), (4812, 20160111), (6289, 20060821), (1430, 20011224), (0, 19870511), (29, 19890123), (1073, 20010625), (44, 19911125), (2734, 20030811), (8090, 20080602), (6065, 20060724), (0, 19870629), (11735, 20101108), (14648, 20130101), (15072, 20131014), (0, 19880208), (67, 19940704), (7197, 20070430), (43, 19930823), (6133, 20060731), (69, 19950605), (225, 19970526), (6942, 20070219), (7832, 20080324), (69, 19950403), (7473, 20070702), (14449, 20130415), (10634, 20100524), (3265, 20040209), (5548, 20060306), (30, 19901217), (0, 19871207), (1027, 20010305), (29, 19910325), (62, 19940228), (15983, 20170717), (6807, 20061113), (2862, 20030922), (7233, 20070507), (45, 19920511), (0, 19880926), (964, 20001113), (1437, 20011210), (30, 19900903), (9070, 20090101), (10481, 20100405), (7365, 20070604), (722, 19990111), (45, 19930308), (728, 19990201), (13818, 20120319), (0, 19881024), (225, 19970421), (29, 19910506), (45, 19920629), (29, 19910603), (2755, 20030714), (5215, 20051003), (0, 19880711), (0, 19890220), (96, 19950619), (273, 19970908), (6926, 20070122), (4792, 20050704), (2111, 20020902), (9239, 20090615), (1011, 20010507), (147, 19960325), (1113, 20010709), (14740, 20130819), (30, 19901126), (147, 19960318), (171, 19960826), (131, 19951030), (752, 19990426), (2798, 20030908), (273, 19970818), (13372, 20111003), (394, 19980302), (15741, 20150608), (45, 19920217), (10329, 20100125), (164, 19970707), (4333, 20050321), (2961, 20031006), (9064, 20090105), (172, 19960923), (660, 19980831), (0, 19871221), (6730, 20061023), (2608, 20030421), (15637, 20140210), (3433, 20040607), (30, 19901231), (0, 19871102), (14513, 20121015), (4847, 20050718), (1860, 20030526), (131, 19950918), (1430, 20011217), (7697, 20071001), (7528, 20070730), (989, 19991213), (9076, 20081208), (30, 19900625), (8836, 20081020), (0, 19870427), (0, 19880718), (394, 19971229), (171, 19960729), (2497, 20030101), (709, 19981130), (941, 19991101), (7731, 20080225), (777, 19990524), (45, 19920727), (16349, 20161031), (14727, 20130311), (10590, 20100503), (147, 19960520), (1212, 20000724), (4160, 20050101), (5391, 20051121), (16293, 20151102), (3286, 20040412), (9918, 20090928), (6931, 20061204), (9589, 20090727), (14361, 20120820), (58, 19931011), (10580, 20100426), (138, 19951120), (29, 19900326), (1412, 20011119), (1803, 20020617), (703, 19981214), (2497, 20021223), (29, 19900423), (45, 19930104), (62, 19930726), (10318, 20100101), (0, 19881114), (12094, 20110117), (3120, 20031201), (14796, 20130902), (1038, 20000221), (9255, 20090629), (5626, 20060403), (10817, 20100726), (7638, 20071022), (29, 19881128), (44, 19911118), (5452, 20051205), (3498, 20040705), (14633, 20121217), (4160, 20041220), (16138, 20170724), (13048, 20130318), (30, 19910930), (314, 19971020), (2731, 20030623), (6151, 20060807), (213, 19961209), (29, 19890724), (10576, 20100510), (7504, 20070903), (683, 19980928), (29, 19891120), (4682, 20050606), (0, 19881107), (0, 19880801), (1577, 20020527), (964, 19991018), (6953, 20061225), (9019, 20081124), (12254, 20110228), (171, 19960708), (3206, 20040105), (63, 19940207), (29, 19900604), (273, 19971006), (31, 19911021), (13006, 20110725)","SELECT sum( T1.tours), T1.ranking_date FROM rankings AS T1  GROUP BY T1.ranking_date","(14667, 20130128), (14545, 20130527), (16345, 20161121), (1065, 20000320), (3282, 20040223), (1188, 20000703), (0, 19881031), (147, 19960624), (2571, 20030317), (9611, 20090803), (1253, 20001016), (11594, 20101018), (5862, 20060612), (0, 19880919), (13628, 20120109), (1224, 20000828), (29, 19910624), (1853, 20020805), (14820, 20130909), (1173, 20001106), (172, 19961007), (1232, 20001009), (96, 19950626), (11290, 20100920), (15568, 20150420), (688, 19981005), (1263, 20010924), (363, 19971201), (0, 19890306), (7790, 20080310), (459, 19980511), (722, 19990125), (225, 19970602), (13342, 20110919), (0, 19890327), (1430, 20020121), (30, 19900910), (44, 19911209), (0, 19881010), (16303, 20170501), (861, 19990906), (15800, 20150921), (3257, 20040202), (0, 19880905), (7448, 20070618), (9064, 20090126), (723, 19990208), (459, 19980525), (75, 19931213), (0, 19870622), (2955, 20040524), (337, 19971110), (12267, 20110307), (2728, 20030602), (45, 19911216), (273, 19970929), (62, 19930503), (10726, 20100712), (1853, 20020729), (14438, 20120924), (13411, 20111017), (14516, 20130513), (0, 19870706), (44, 19930517), (7602, 20070910), (68, 19940919), (3831, 20040920), (15637, 20140113), (12867, 20110704), (0, 19880808), (0, 19871109), (9682, 20090831), (13542, 20111205), (45, 19930315), (0, 19880425), (777, 19990531), (8565, 20140217), (138, 19951218), (14389, 20120827), (3211, 20031215), (16230, 20170320), (171, 19960902), (45, 19930329), (11125, 20100830), (4160, 20050117), (131, 19951016), (2505, 20021021), (65, 19940606), (30, 19900806), (5357, 20051114), (6953, 20070101), (30, 19910909), (0, 19870330), (6026, 20060717), (57, 19940523), (14569, 20130617), (1027, 20010219), (185, 19970101), (2462, 20020923), (213, 19961118), (5452, 20051212), (16268, 20170814), (0, 19880523), (663, 19980921), (1187, 20040510), (0, 19880509), (3211, 20031222), (6896, 20061127), (45, 19911230), (225, 19970505), (0, 19880627), (10412, 20100329), (3592, 20040802), (1489, 20040419), (16226, 20170424), (1834, 20020708), (13667, 20120130), (5798, 20060605), (0, 19881017), (29, 19891225), (30, 19900618), (45, 19930118), (96, 19950612), (29, 19890522), (62, 19930510), (2526, 20021007), (9077, 20081215), (12303, 20110328), (14695, 20130304), (29, 19890619), (29, 19900528), (10430, 20100301), (989, 20000103), (2497, 20021209), (0, 19871116), (29, 19910812), (223, 19970324), (363, 19971117), (11845, 20101122), (16124, 20170508), (62, 19921102), (15776, 20150810), (7686, 20070924), (29, 19900108), (394, 19980105), (16388, 20160502), (13174, 20110829), (5683, 20060515), (13299, 20110912), (29, 19891009), (2497, 20021230), (5090, 20050822), (14264, 20120730), (10204, 20091123), (952, 20010416), (723, 19990215), (12686, 20110627), (75, 19930927), (12467, 20110516), (9808, 20090914), (11026, 20100823), (927, 19991004), (45, 19930301), (29, 19900115), (13140, 20110822), (7495, 20070709), (1412, 20011112), (2497, 20030113), (728, 19990315), (394, 19980216), (29, 19900402), (1448, 20020318), (14389, 20120903), (131, 19950925), (4160, 20050110), (8527, 20080908), (13964, 20120423), (14612, 20121126), (118, 19950807), (7058, 20070319), (68, 19940912), (29, 19900521), (14016, 20120507), (10272, 20091221), (15623, 20150518), (5401, 20051128), (11617, 20101025), (29, 19910722), (10318, 20091228), (14087, 20120528), (45, 19930322), (1201, 20010827), (0, 19880822), (29, 19890130), (1925, 20020812), (29, 19900416), (171, 19960722), (4333, 20050328), (5175, 20050926), (69, 19950515), (147, 19960422), (5644, 20060417), (29, 19910311), (0, 19880418), (0, 19871214), (3277, 20040405), (60, 19940829), (16372, 20170102), (314, 19971027), (147, 19960304), (9474, 20090720), (16270, 20170417), (394, 19980223), (8996, 20081110), (10412, 20100322), (7966, 20080630), (16351, 20160523), (941, 19991025), (1149, 20010723), (45, 19930215), (0, 19870126), (171, 19960715), (171, 19960812), (543, 19980608), (988, 20010430), (29, 19881121), (7139, 20070402), (9682, 20090824), (10372, 20100208), (63, 19940214), (8690, 20080922), (804, 19990607), (426, 19980406), (3587, 20040719), (696, 19981019), (13081, 20110808), (1422, 20020211), (2451, 20020909), (0, 19870518), (989, 20000110), (2777, 20030728), (29, 19881226), (2801, 20030901), (29, 19891030), (0, 19880307), (2732, 20030804), (6284, 20060904), (69, 19950327), (5452, 20051226), (6790, 20130401), (171, 19960805), (13938, 20120416), (459, 19980413), (10937, 20100809), (5257, 20051024), (0, 19880912), (853, 19990823), (1267, 20011008), (692, 19981123), (13443, 20111024), (6953, 20061218), (45, 19920615), (9087, 20090209), (30, 19901119), (9070, 20081229), (13603, 20120101), (29, 19920210), (961, 20001204), (213, 19961216), (43, 19930816), (11125, 20100906), (1205, 20000717), (1577, 20020520), (69, 19950130), (15475, 20150427), (9110, 20090420), (29, 19890529), (30, 19901015), (147, 19960603), (1038, 20000207), (69, 19950206), (131, 19951023), (30, 19910916), (4198, 20050207), (7473, 20070625), (3492, 20040628), (5441, 20060213), (9929, 20091005), (29, 19890828), (14462, 20130429), (45, 19920601), (44, 19930607), (829, 19990719), (45, 19920106), (223, 19970331), (663, 19980914), (0, 19880411), (7504, 20070827), (12181, 20110207), (62, 19921109), (0, 19880229), (29, 19890605), (29, 19891002), (30, 19910708), (16517, 20160307), (394, 19971215), (29, 19891127), (7017, 20070312), (9856, 20090921), (31, 19911028), (11907, 20101213), (75, 19940110), (6925, 20070205), (2587, 20030414), (209, 19970203), (4071, 20041108), (65, 19940620), (97, 19950710), (3987, 20041018), (964, 20001218), (0, 19880328), (8325, 20080804), (60, 19940725), (879, 19990920), (29, 19890814), (7503, 20070820), (10756, 20100719), (964, 20001211), (394, 19980209), (0, 19871019), (9057, 20090323), (1577, 20020429), (459, 19980518), (459, 19980601), (2549, 20030310), (57, 19940509), (4011, 20041101), (1175, 20010813), (90, 19920914), (30, 19900820), (9121, 20090413), (569, 19980615), (45, 19930111), (185, 19970113), (941, 19991108), (6808, 20061030), (138, 19951225), (15512, 20131209), (45, 19920504), (147, 19960408), (29, 19891016), (6893, 20061120), (16293, 20160627), (16184, 20170626), (14679, 20130805), (15545, 20150413), (125, 19960205), (394, 19980119), (5020, 20050815), (9140, 20090518), (29, 19890206), (65, 19940627), (90, 19920921), (4160, 20041227), (43, 19930913), (58, 19931025), (6284, 20060828), (3645, 20040809), (29, 19900205), (1265, 20000918), (7711, 20071029), (989, 20000117), (147, 19960226), (16305, 20170213), (7707, 20071008), (14472, 20121001), (3020, 20031027), (14652, 20130204), (964, 20001225), (2966, 20031013), (69, 19941226), (225, 19970609), (29, 19900430), (1276, 20000731), (5452, 20051219), (4147, 20041129), (46, 19920713), (7197, 20070423), (45, 19920420), (12398, 20110411), (147, 19960513), (8639, 20080915), (69, 19941107), (7761, 20080303), (633, 19980720), (62, 19930712), (14610, 20121203), (1245, 20001023), (0, 19870525), (961, 20010423), (11904, 20110101), (0, 19880104), (12201, 20110221), (118, 19950724), (4926, 20050801), (69, 19941128), (62, 19921005), (13610, 20120102), (59, 19941031), (15557, 20150302), (977, 20010205), (4379, 20050425), (1312, 20011105), (1093, 20000424), (1573, 20020401), (1448, 20020325), (73, 19920810), (989, 20000101), (29, 19890626), (43, 19930802), (2520, 20021014), (30, 19900730), (29, 19890116), (0, 19870413), (69, 19941205), (125, 19960219), (692, 19981109), (45, 19911223), (29, 19891106), (209, 19970217), (9057, 20090330), (13482, 20111114), (45, 19920622), (29, 19890717), (7341, 20070521), (194, 19960909), (9087, 20090202), (30, 19910304), (394, 19980101), (1160, 20000612), (13949, 20121231), (861, 19990830), (1783, 20020701), (7711, 20080121), (8090, 20080526), (1027, 20010312), (60, 19940808), (2613, 20040503), (4705, 20050613), (6436, 20061002), (13443, 20111107), (16325, 20160815), (69, 19950109), (2671, 20030512), (5944, 20060703), (6926, 20070108), (4211, 20050214), (703, 19981207), (2930, 20030929), (10025, 20091026), (1065, 20000327), (2847, 20030915), (15028, 20131007), (0, 19880620), (30, 19901112), (69, 19950306), (9111, 20090427), (964, 20010101), (7659, 20071217), (58, 19931004), (961, 20001120), (62, 19921019), (7522, 20070806), (8898, 20081027), (14223, 20120716), (14331, 20120813), (0, 19890213), (3456, 20040614), (44, 19930101), (1577, 20020513), (16191, 20151012), (175, 19961021), (14667, 20130121), (804, 19990705), (29, 19891204), (29, 19910527), (1574, 20020415), (688, 19981012), (0, 19870803), (16446, 20160411), (29, 19910422), (0, 19880125), (5944, 20060626), (69, 19950220), (4489, 20050516), (722, 19990104), (10634, 20100628), (75, 19940117), (29, 19910318), (30, 19910225), (30, 19900723), (0, 19870921), (14015, 20120514), (5237, 20051017), (14651, 20130211), (8585, 20140120), (6816, 20061106), (15098, 20131104), (1574, 20020422), (12686, 20110620), (69, 19950101), (14585, 20121105), (69, 19950424), (62, 19921207), (692, 19981116), (2361, 20040517), (394, 19980112), (1835, 20020715), (14034, 20120521), (299, 19971013), (13465, 20111031), (30, 19901022), (44, 19930531), (13818, 20120326), (3206, 20040119), (8417, 20080901), (941, 19991115), (5452, 20060101), (12343, 20110404), (30, 19900924), (29, 19910729), (2528, 20030224), (3647, 20040816), (16316, 20160919), (44, 19940418), (75, 19931206), (69, 19950417), (3592, 20040726), (29, 19891113), (15741, 20150525), (172, 19960916), (29, 19910513), (29, 19890731), (0, 19880829), (723, 19990301), (5331, 20051031), (7197, 20070416), (631, 19980824), (3092, 20031124), (4160, 20041213), (7716, 20080204), (1204, 20000710), (14172, 20120625), (13983, 20120430), (1430, 20020128), (6930, 20070212), (43, 19930830), (15810, 20150622), (29, 19900122), (16111, 20170306), (16204, 20170515), (0, 19870202), (29, 19900305), (29, 19890508), (57, 19940516), (16207, 20170220), (69, 19950529), (69, 19941003), (2507, 20030210), (30, 19910211), (1312, 20011029), (5654, 20060508), (131, 19950828), (131, 19950821), (3279, 20040301), (1201, 20010903), (15578, 20150406), (138, 19960101), (7478, 20070716), (9925, 20091012), (16290, 20170522), (69, 19950508), (7917, 20080428), (9153, 20090525), (10221, 20091207), (1094, 20010618), (29, 19891218), (1430, 20020101), (703, 19990101), (2496, 20020930), (426, 19980330), (0, 19870608), (3286, 20040322), (2505, 20021028), (0, 19870420), (16305, 20160926), (14138, 20120618), (14172, 20120702), (1422, 20020204), (14525, 20121022), (2571, 20030324), (1437, 20011203), (44, 19911104), (1106, 20000605), (29, 19910408), (90, 19920928), (16301, 20170828), (2759, 20030721), (29, 19890918), (45, 19920120), (1038, 20000228), (30, 19900813), (8002, 20080512), (9255, 20090622), (14487, 20130506), (16294, 20161128), (1437, 20011126), (69, 19950501), (1424, 20020311), (12999, 20110801), (125, 19960129), (30, 19910218), (899, 19990927), (1915, 20020819), (1027, 20010226), (4371, 20050411), (13536, 20111212), (30, 19910128), (14751, 20130722), (69, 19940926), (2111, 20020826), (8794, 20081013), (29, 19890904), (11460, 20101004), (29, 19900319), (147, 19960311), (4286, 20050221), (6304, 20060911), (273, 19970922), (16379, 20170116), (459, 19980420), (8030, 20080609), (29, 19910805), (16361, 20160606), (728, 19990329), (631, 19980817), (5658, 20060424), (7743, 20080211), (14649, 20130218), (213, 19961111), (15832, 20150914), (9063, 20090223), (829, 19990802), (45, 19930125), (125, 19960122), (32, 19930208), (1101, 20010319), (15659, 20140224), (16157, 20170612), (0, 19870824), (1224, 20000821), (30, 19901008), (3286, 20040315), (45, 19920323), (1013, 20000131), (1149, 20010730), (69, 19950522), (1422, 20020218), (660, 19980907), (10613, 20100607), (10003, 20091019), (2753, 20030616), (2497, 20030120), (29, 19881212), (147, 19960617), (12522, 20110523), (0, 19880404), (16454, 20160418), (8113, 20080714), (29, 19890925), (14689, 20130715), (1065, 20000403), (2730, 20030707), (0, 19870727), (45, 19920518), (2719, 20030428), (90, 19920907), (4982, 20050808), (13719, 20120220), (4124, 20041115), (273, 19970811), (30, 19900827), (8417, 20080825), (62, 19921012), (4362, 20050404), (73, 19920803), (2614, 20030331), (11877, 20101129), (10634, 20100531), (14878, 20130923), (16279, 20170821), (16489, 20160425), (69, 19950123), (7682, 20071224), (29, 19910101), (16406, 20170109), (15701, 20131223), (14547, 20121029), (138, 19951113), (30, 19910121), (10373, 20100201), (1224, 20000904), (4859, 20050725), (8372, 20080811), (10116, 20091109), (10442, 20100315), (223, 19970224), (14545, 20130603), (1160, 20000619), (125, 19960212), (29, 19890710), (14451, 20130422), (914, 20010402), (7643, 20070917), (7873, 20080407), (30, 19910114), (3379, 20040426), (10630, 20100614), (3516, 20040712), (57, 19940530), (9063, 20090302), (62, 19921130), (5656, 20060501), (7711, 20080114), (75, 19940103), (870, 19990809), (69, 19941219), (961, 20001127), (9050, 20081201), (16138, 20151019), (16184, 20150831), (0, 19870720), (30, 19901224), (147, 19960701), (5362, 20051107), (6629, 20061016), (1276, 20000807), (62, 19921026), (13129, 20110815), (10137, 20091116), (964, 20010108), (12895, 20110711), (0, 19890227), (1188, 20000626), (633, 19980713), (2498, 20021104), (0, 19870504), (8731, 20080929), (13518, 20111121), (147, 19960401), (45, 19920406), (728, 19990322), (930, 20010409), (11913, 20101220), (0, 19871228), (0, 19870907), (6925, 20070129), (16249, 20161114), (209, 19970127), (62, 19921123), (147, 19960429), (29, 19890320), (62, 19921214), (45, 19930222), (633, 19980706), (7650, 20071203), (11687, 20101101), (119, 19920824), (1223, 20001002), (1106, 20000529), (29, 19900507), (0, 19870601), (12434, 20110418), (0, 19870928), (989, 19991220), (5798, 20060529), (11339, 20100927), (16454, 20160222), (1093, 20000410), (14866, 20130916), (29, 19890501), (693, 19981102), (62, 19930705), (14087, 20120604), (30, 19910826), (829, 19990726), (2497, 20030106), (14639, 20121210), (3492, 20040621), (1029, 20010521), (4286, 20050228), (1011, 20010514), (12303, 20110321), (10318, 20100104), (590, 19980629), (69, 19950227), (12682, 20110613), (29, 19900219), (75, 19940124), (62, 19940321), (69, 19950410), (45, 19920413), (62, 19930419), (0, 19870914), (3052, 20031110), (3206, 20040126), (5548, 20060313), (4160, 20050103), (8280, 20080728), (15708, 20131230), (989, 19991227), (9153, 20090601), (29, 19900312), (804, 19990621), (722, 19990118), (0, 19881003), (29, 19910610), (63, 19940221), (14554, 20130225), (28, 19890101), (9376, 20090713), (10238, 20091130), (29, 19910715), (147, 19960506), (1106, 20000522), (5721, 20060522), (14531, 20130520), (273, 19970804), (4727, 20050627), (7058, 20070326), (0, 19870831), (14286, 20120806), (60, 19940815), (13565, 20111219), (10999, 20100816), (7365, 20070528), (257, 19970721), (14480, 20121008), (4160, 20050124), (13618, 20120123), (5452, 20060123), (9059, 20090216), (9143, 20090511), (62, 19940314), (172, 19960930), (634, 19980810), (12482, 20110509), (13666, 20120206), (29, 19890109), (62, 19921116), (0, 19880314), (213, 19961125), (3214, 20031229), (1228, 20010910), (15908, 20150824), (15540, 20131216), (59, 19941024), (9053, 20090309), (11256, 20100913), (13618, 20120116), (16529, 20160215), (3785, 20040913), (13881, 20120402), (7659, 20071210), (966, 19991129), (723, 19990222), (4379, 20050502), (3282, 20040216), (363, 19971124), (44, 19930524), (5559, 20060320), (15101, 20131111), (69, 19950102), (829, 19990712), (8956, 20081103), (14591, 20130408), (3968, 20041025), (1073, 20010702), (1783, 20020610), (1730, 20020506), (8089, 20080707), (191, 19961104), (394, 19980126), (3705, 20040830), (9064, 20090112), (30, 19910902), (394, 19980309), (11904, 20101227), (12143, 20110131), (62, 19940307), (394, 19971222), (60, 19940801), (5425, 20060206), (7470, 20070723), (777, 19990517), (2535, 20040531), (13517, 20111128), (10320, 20100111), (964, 20010122), (634, 19980727), (5897, 20060619), (125, 19960108), (29, 19891211), (5100, 20050829), (761, 19990503), (2652, 20030505), (1291, 20011022), (6226, 20060814), (16336, 20161205), (0, 19880606), (1101, 20010326), (125, 19960115), (9642, 20090817), (29, 19890410), (13603, 20111226), (69, 19941121), (3214, 20040101), (29, 19910401), (30, 19910107), (45, 19920302), (273, 19970901), (1106, 20000515), (14650, 20130624), (12438, 20110502), (0, 19880201), (4816, 20050711), (7677, 20071105), (5452, 20060109), (0, 19871012), (7742, 20080218), (14621, 20121112), (13674, 20120213), (1122, 20000508), (30, 19900917), (15646, 20140127), (30, 19900709), (225, 19970519), (10634, 20100621), (44, 19920101), (16314, 20160620), (9598, 20090810), (131, 19951002), (29, 19900212), (69, 19941212), (1065, 20000306), (185, 19970120), (60, 19940822), (3957, 20041004), (57, 19940502), (394, 19971208), (147, 19960610), (5452, 20060102), (14714, 20130826), (29, 19890911), (1430, 20020107), (16161, 20170911), (76, 19930920), (989, 20000124), (2490, 20030217), (29, 19890703), (131, 19950904), (12422, 20110425), (45, 19930201), (1241, 20000911), (13174, 20110905), (43, 19930809), (4313, 20050307), (16147, 20170807), (5478, 20060220), (13966, 20130107), (69, 19950213), (225, 19970428), (213, 19961202), (15710, 20150511), (394, 19980323), (30, 19900716), (225, 19970414), (30, 19910204), (29, 19900409), (15025, 20131021), (6520, 20061009), (10404, 20100222), (16233, 20161010), (118, 19950717), (9064, 20090119), (0, 19880502), (977, 20010129), (0, 19880222), (14599, 20130812), (459, 19980427), (30, 19901001), (13791, 20120312), (703, 19981228), (29, 19890102), (45, 19920127), (7929, 20080505), (9066, 20090406), (225, 19970630), (60, 19940718), (16189, 20170619), (273, 19970825), (16586, 20160208), (138, 19951204), (29, 19890313), (29, 19910701), (1828, 20020722), (257, 19970728), (728, 19990419), (4727, 20050620), (31, 19911007), (223, 19970310), (118, 19950731), (0, 19880815), (14766, 20130729), (1231, 20010917), (804, 19990628), (60, 19940905), (0, 19871005), (225, 19970512), (0, 19880516), (12204, 20110214), (2517, 20030203), (0, 19870615), (45, 19920330), (45, 19921228), (61, 19940411), (2549, 20030303), (29, 19910520), (75, 19931129), (29, 19910617), (1577, 20020603), (1424, 20020304), (7175, 20070409), (31, 19911014), (223, 19970407), (62, 19940404), (1574, 20020408), (9310, 20090706), (5249, 20051010), (191, 19961028), (1430, 20020114), (3038, 20031103), (62, 19940131), (147, 19960415), (1783, 20020624), (5626, 20060410), (29, 19900611), (394, 19980202), (14072, 20120611), (3206, 20040112), (14250, 20120723), (7527, 20070813), (3986, 20041011), (3286, 20040329), (7674, 20071126), (2457, 20020916), (10272, 20091214), (29, 19900514), (459, 19980504), (0, 19880725), (2731, 20030630), (7687, 20071015), (69, 19941114), (75, 19931220), (7317, 20070514), (6988, 20070226), (0, 19870817), (7017, 20070305), (58, 19931108), (0, 19870713), (30, 19900702), (45, 19920203), (131, 19950911), (0, 19890403), (1135, 20010716), (16364, 20161107), (7832, 20080331), (0, 19870302), (723, 19990308), (5100, 20050905), (10389, 20100215), (15703, 20140106), (16649, 20170529), (14180, 20120709), (73, 19920817), (7666, 20071119), (6926, 20070115), (69, 19941017), (12927, 20110718), (75, 19931227), (4313, 20050314), (175, 19961014), (44, 19930621), (4522, 20050523), (0, 19870810), (1067, 20010604), (14402, 20120917), (14885, 20130930), (69, 19941010), (30, 19901105), (15334, 20131202), (873, 19990816), (3286, 20040308), (7682, 20071231), (5452, 20060116), (185, 19961223), (0, 19870406), (13791, 20120305), (62, 19930412), (12094, 20110124), (29, 19910819), (29, 19890807), (61, 19940328), (43, 19930906), (2497, 20021111), (3035, 20031020), (4145, 20041122), (7917, 20080421), (12522, 20110530), (15761, 20150803), (16145, 20170731), (1430, 20011231), (0, 19880321), (30, 19901210), (14649, 20121224), (703, 19981221), (5983, 20060710), (590, 19980622), (29, 19890424), (138, 19951127), (65, 19940613), (4198, 20050131), (16178, 20151005), (16518, 20160118), (1004, 20010212), (14651, 20130708), (45, 19930405), (29, 19890417), (11888, 20101206), (29, 19890612), (728, 19990405), (0, 19880530), (2497, 20030127), (9070, 20081222), (0, 19870209), (879, 19990913), (10442, 20100308), (1038, 20000214), (15151, 20131118), (16374, 20160509), (58, 19931101), (804, 19990614), (7448, 20070611), (11566, 20101011), (4160, 20041206), (16387, 20161212), (7970, 20080616), (10515, 20100412), (14624, 20121119), (7790, 20080317), (58, 19931018), (16597, 20170703), (257, 19970714), (12659, 20110606), (69, 19950313), (1175, 20010820), (9053, 20090316), (9682, 20090907), (10835, 20100802), (7664, 20071112), (7966, 20080623), (10543, 20100419), (14667, 20130114), (3913, 20040927), (941, 19991011), (337, 19971103), (273, 19970915), (16629, 20160201), (8387, 20080818), (2801, 20030825), (45, 19920113), (3065, 20031117), (11814, 20101115), (75, 19931115), (1094, 20010611), (728, 19990412), (9203, 20090608), (1122, 20000501), (693, 19981026), (2755, 20030818), (8022, 20080519), (14553, 20130610), (966, 19991206), (45, 19920608), (62, 19930426), (29, 19890821), (5559, 20060327), (29, 19881219), (67, 19940711), (964, 20010115), (1231, 20000925), (225, 19970623), (90, 19920831), (131, 19951106), (62, 19930719), (3661, 20040823), (29, 19881205), (30, 19901203), (9094, 20090504), (75, 19931122), (2728, 20030519), (4522, 20050530), (2587, 20030407), (185, 19961230), (1065, 20000313), (8235, 20080721), (0, 19871123), (16515, 20160229), (3705, 20040906), (15337, 20131125), (3190, 20031208), (5441, 20060130), (0, 19880111), (13382, 20110926), (0, 19880613), (44, 19911111), (28, 19900101), (46, 19920720), (7691, 20080128), (12267, 20110314), (96, 19950703), (10329, 20100118), (4379, 20050418), (2497, 20021118), (30, 19901029), (209, 19970210), (2497, 20021202), (6347, 20060918), (9003, 20081117), (13788, 20120227), (634, 19980803), (14389, 20120910), (147, 19960527), (45, 19920316), (2497, 20021125), (10061, 20091102), (1093, 20000417), (45, 19920309), (10685, 20100705), (44, 19930614), (29, 19891023), (0, 19880118), (0, 19871026), (5187, 20050912), (45, 19920706), (223, 19970317), (12067, 20110110), (69, 19950116), (0, 19880101), (13382, 20111010), (29, 19890515), (29, 19910415), (171, 19960819), (6953, 20061211), (8762, 20081006), (15071, 20131028), (62, 19921221), (73, 19940101), (2497, 20021216), (0, 19880215), (7889, 20080414), (0, 19870119), (0, 19871130), (69, 19950320), (0, 19880704), (44, 19930628), (118, 19950814), (7682, 20080107), (761, 19990510), (45, 19920427), (1067, 20010528), (1424, 20020225), (30, 19910923), (1288, 20011015), (7682, 20080101), (12060, 20110103), (5173, 20050919), (1287, 20011001), (1247, 20001030), (5528, 20060227), (29, 19900226), (394, 19980316), (15632, 20140203), (2753, 20030609), (941, 19991122), (1175, 20010806), (1224, 20000814), (10593, 20100517), (57, 19940425), (131, 19951009), (45, 19920224), (45, 19920525), (4470, 20050509), (185, 19970106), (6376, 20060925), (138, 19951211), (31, 19911202), (223, 19970303), (13902, 20120409), (29, 19900129), (29, 19910429), (225, 19970616), (4812, 20160111), (6289, 20060821), (1430, 20011224), (29, 19890123), (0, 19870511), (1073, 20010625), (44, 19911125), (2734, 20030811), (8090, 20080602), (6065, 20060724), (0, 19870629), (11735, 20101108), (14648, 20130101), (15072, 20131014), (0, 19880208), (67, 19940704), (7197, 20070430), (43, 19930823), (6133, 20060731), (69, 19950605), (225, 19970526), (69, 19950403), (6942, 20070219), (7832, 20080324), (7473, 20070702), (14449, 20130415), (10634, 20100524), (3265, 20040209), (5548, 20060306), (30, 19901217), (0, 19871207), (1027, 20010305), (29, 19910325), (62, 19940228), (15983, 20170717), (6807, 20061113), (2862, 20030922), (7233, 20070507), (45, 19920511), (0, 19880926), (964, 20001113), (1437, 20011210), (30, 19900903), (9070, 20090101), (10481, 20100405), (7365, 20070604), (722, 19990111), (45, 19930308), (728, 19990201), (13818, 20120319), (0, 19881024), (29, 19910506), (225, 19970421), (29, 19910603), (45, 19920629), (2755, 20030714), (5215, 20051003), (0, 19890220), (0, 19880711), (96, 19950619), (273, 19970908), (6926, 20070122), (4792, 20050704), (2111, 20020902), (9239, 20090615), (1011, 20010507), (147, 19960325), (1113, 20010709), (14740, 20130819), (30, 19901126), (147, 19960318), (171, 19960826), (131, 19951030), (752, 19990426), (2798, 20030908), (273, 19970818), (13372, 20111003), (394, 19980302), (15741, 20150608), (45, 19920217), (10329, 20100125), (164, 19970707), (4333, 20050321), (2961, 20031006), (9064, 20090105), (172, 19960923), (660, 19980831), (0, 19871221), (6730, 20061023), (2608, 20030421), (15637, 20140210), (30, 19901231), (3433, 20040607), (0, 19871102), (14513, 20121015), (4847, 20050718), (131, 19950918), (1860, 20030526), (1430, 20011217), (7697, 20071001), (7528, 20070730), (9076, 20081208), (989, 19991213), (30, 19900625), (8836, 20081020), (0, 19870427), (0, 19880718), (394, 19971229), (171, 19960729), (709, 19981130), (2497, 20030101), (7731, 20080225), (941, 19991101), (777, 19990524), (45, 19920727), (16349, 20161031), (14727, 20130311), (147, 19960520), (10590, 20100503), (1212, 20000724), (4160, 20050101), (5391, 20051121), (16293, 20151102), (3286, 20040412), (9918, 20090928), (6931, 20061204), (9589, 20090727), (14361, 20120820), (58, 19931011), (10580, 20100426), (138, 19951120), (29, 19900326), (1412, 20011119), (1803, 20020617), (703, 19981214), (2497, 20021223), (29, 19900423), (45, 19930104), (62, 19930726), (10318, 20100101), (0, 19881114), (12094, 20110117), (3120, 20031201), (14796, 20130902), (1038, 20000221), (9255, 20090629), (5626, 20060403), (10817, 20100726), (29, 19881128), (7638, 20071022), (5452, 20051205), (44, 19911118), (3498, 20040705), (14633, 20121217), (4160, 20041220), (16138, 20170724), (13048, 20130318), (30, 19910930), (2731, 20030623), (314, 19971020), (6151, 20060807), (29, 19890724), (213, 19961209), (10576, 20100510), (7504, 20070903), (683, 19980928), (29, 19891120), (4682, 20050606), (0, 19881107), (0, 19880801), (1577, 20020527), (964, 19991018), (6953, 20061225), (9019, 20081124), (12254, 20110228), (171, 19960708), (3206, 20040105), (63, 19940207), (273, 19971006), (29, 19900604), (31, 19911021), (13006, 20110725)",medium,True,1,
248,wta_1,Find the number of matches happened in each year.,"SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR","(108, 2017), (158, 2016), (12, 2013)","SELECT count( *), T1.year FROM matches AS T1  GROUP BY T1.year","(108, 2017), (158, 2016), (12, 2013)",medium,True,1,
249,wta_1,Find the name and rank of the 3 youngest winners across all matches.,"SELECT DISTINCT winner_name ,  winner_rank, winner_age FROM matches ORDER BY winner_age LIMIT 3","('Madison Keys', 17, 20.91718), ('Madison Keys', 24, 21.089664), ('Madison Keys', 16, 21.319645)","SELECT DISTINCT T1.winner_name, T1.winner_rank FROM matches AS T1    ORDER BY T1.winner_age ASC LIMIT 1",,medium,False,0,
250,wta_1,How many different winners both participated in the WTA Championships and were left handed?,SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L',"(2,)",SELECT DISTINCT count(DISTINCT T1.winner_name) FROM matches AS T1 WHERE T1.tourney_name = 'WTA Championships' and T1.winner_hand = 'L',"(2,)",medium,True,1,
251,wta_1,"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.","SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","('Serena', 'USA', 19810926)","SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id    ORDER BY T2.winner_rank_points DESC LIMIT 1","('Serena', 'USA', 19810926)",hard,True,1,
252,wta_1,Find the number of players for each hand type.,"SELECT count(*) ,  hand FROM players GROUP BY hand","(955, 'NA'), (14193, 'U'), (5028, 'R'), (487, 'L')","SELECT count( *), T1.hand FROM players AS T1  GROUP BY T1.hand","(955, 'NA'), (14193, 'U'), (5028, 'R'), (487, 'L')",medium,True,1,
253,battle_death,How many ships ended up being 'Captured'?,SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured',"(4,)",SELECT count( *) FROM ship AS T1 WHERE T1.disposition_of_ship = 'Captured',"(4,)",easy,True,1,
254,battle_death,List the name and tonnage ordered by in descending alphaetical order for the names.,"SELECT name ,  tonnage FROM ship ORDER BY name DESC","('Three Brothers', 't'), ('Mary', 't'), ('Lettice', 't'), ('HMS Avon', '391'), ('HMS Atalanta', '225'), ('Bon Accord', 't'), ('Bacchus', 't')","SELECT T1.name, T1.tonnage FROM ship AS T1     ORDER BY T1.name DESC","('Three Brothers', 't'), ('Mary', 't'), ('Lettice', 't'), ('HMS Avon', '391'), ('HMS Atalanta', '225'), ('Bon Accord', 't'), ('Bacchus', 't')",medium,True,1,
255,battle_death,"List the name, date and result of each battle.","SELECT name ,  date FROM battle","('Battle of Adrianople', '14 April 1205'), ('Battle of Serres', 'June 1205'), ('Battle of Rusion', '31 January 1206'), ('Battle of Rodosto', 'February 1206'), ('Battle of Messinopolis', '4 September 1207'), ('Battle of Boruy', 'June 1205'), ('Battle of Philippopolis', '31 June 1208'), ('Siege of Constantinople', '1235')","SELECT T1.name, T1.date FROM battle AS T1","('Battle of Adrianople', '14 April 1205'), ('Battle of Serres', 'June 1205'), ('Battle of Rusion', '31 January 1206'), ('Battle of Rodosto', 'February 1206'), ('Battle of Messinopolis', '4 September 1207'), ('Battle of Boruy', 'June 1205'), ('Battle of Philippopolis', '31 June 1208'), ('Siege of Constantinople', '1235')",medium,True,1,
256,battle_death,What is maximum and minimum death toll caused each time?,"SELECT max(killed) ,  min(killed) FROM death","(29, 0)","SELECT max( T1.killed), min( T1.killed) FROM death AS T1","(29, 0)",medium,True,1,
257,battle_death,What is the average number of injuries caused each time?,SELECT avg(injured) FROM death,"(1.076923076923,)",SELECT avg( T1.injured) FROM death AS T1,"(1.076923076923,)",easy,True,1,
258,battle_death,What are the death and injury situations caused by the ship with tonnage 't'?,"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'","(8, 0), (3, 0), (25, 0), (2, 0), (0, 0), (4, 5), (0, 0), (29, 0), (0, 0), (0, 0), (14, 0)","SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'","(8, 0), (3, 0), (25, 0), (2, 0), (0, 0), (4, 5), (0, 0), (29, 0), (0, 0), (0, 0), (14, 0)",medium,True,1,
259,battle_death,What are the name and results of the battles when the bulgarian commander is not 'Boril',"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'","('Battle of Adrianople', 'Bulgarian victory'), ('Battle of Serres', 'Bulgarian victory'), ('Battle of Rusion', 'Bulgarian victory'), ('Battle of Rodosto', 'Bulgarian victory'), ('Battle of Messinopolis', 'Bulgarian victory'), ('Siege of Constantinople', 'Two Year Truce')","SELECT T1.name, T1.result FROM battle AS T1 WHERE T1.bulgarian_commander != 'Boril'","('Battle of Adrianople', 'Bulgarian victory'), ('Battle of Serres', 'Bulgarian victory'), ('Battle of Rusion', 'Bulgarian victory'), ('Battle of Rodosto', 'Bulgarian victory'), ('Battle of Messinopolis', 'Bulgarian victory'), ('Siege of Constantinople', 'Two Year Truce')",medium,True,1,
260,battle_death,What are the different ids and names of the battles that lost any 'Brig' type shipes?,"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'","(4, 'Battle of Rodosto'), (5, 'Battle of Messinopolis'), (6, 'Battle of Boruy'), (7, 'Battle of Philippopolis'), (8, 'Siege of Constantinople')","SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'","(4, 'Battle of Rodosto'), (5, 'Battle of Messinopolis'), (6, 'Battle of Boruy'), (7, 'Battle of Philippopolis'), (8, 'Siege of Constantinople')",medium,True,1,
261,battle_death,What are the ids and names of the battles that led to more than 10 people killed in total.,"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10","(5, 'Battle of Messinopolis'), (8, 'Siege of Constantinople'), (6, 'Battle of Boruy')","SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id  GROUP BY T1.id HAVING sum( T3.killed) > 10","(5, 'Battle of Messinopolis'), (8, 'Siege of Constantinople'), (6, 'Battle of Boruy')",hard,True,1,
262,battle_death,What is the ship id and name that caused most total injuries?,"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1","(3, 'Mary')","SELECT T1.id, T1.name FROM ship AS T1 JOIN death AS T2 ON T1.id = T2.caused_by_ship_id  GROUP BY T2.caused_by_ship_id  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
263,battle_death,What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?,SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I',"('Battle of Adrianople',)",SELECT T1.name FROM battle AS T1 WHERE T1.bulgarian_commander = 'Kaloyan' and T1.latin_commander = 'Baldwin I',"('Battle of Adrianople',)",medium,True,1,
264,battle_death,How many different results are there for the battles?,SELECT count(DISTINCT RESULT) FROM battle,"(3,)",SELECT DISTINCT count(DISTINCT T1.result) FROM battle AS T1,"(3,)",easy,True,1,
265,battle_death,How many battles did not lose any ship with tonnage '225'?,SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );,"(7,)",SELECT count( *) FROM battle AS T1 WHERE T1.id NOT IN (SELECT T22.lost_in_battle FROM ship AS T22 WHERE T22.tonnage = '225'       ),"(7,)",extra,True,1,
266,battle_death,List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta',"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'","('Siege of Constantinople', '1235')","SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice'     INTERSECT SELECT T3.name, T3.date FROM battle AS T3 JOIN ship AS T4 ON T3.id = T4.lost_in_battle WHERE T4.name = 'HMS Atalanta'","('Siege of Constantinople', '1235')",extra,True,1,
267,battle_death,"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.","SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'","('Battle of Adrianople', 'Bulgarian victory', 'Kaloyan'), ('Battle of Serres', 'Bulgarian victory', 'Kaloyan'), ('Battle of Rusion', 'Bulgarian victory', 'Kaloyan')","SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle AS T1        EXCEPT SELECT T2.name, T2.result, T2.bulgarian_commander FROM battle AS T2 JOIN ship AS T3 ON T2.id = T3.lost_in_battle WHERE T3.location = 'English Channel'","('Battle of Adrianople', 'Bulgarian victory', 'Kaloyan'), ('Battle of Serres', 'Bulgarian victory', 'Kaloyan'), ('Battle of Rusion', 'Bulgarian victory', 'Kaloyan')",extra,True,1,
268,battle_death,What are the notes of the death events which has substring 'East'?,SELECT note FROM death WHERE note LIKE '%East%',"('East Champaran, Bihar',)",SELECT T1.note FROM death AS T1 WHERE T1.note like '%East%',"('East Champaran, Bihar',)",medium,True,1,
269,student_transcripts_tracking,what are all the addresses including line 1 and line 2?,"SELECT line_1 ,  line_2 FROM addresses","('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')","SELECT T1.line_1, T1.line_2 FROM addresses AS T1","('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')",medium,True,1,
270,student_transcripts_tracking,How many courses in total are listed?,SELECT count(*) FROM Courses,"(15,)",SELECT count( *) FROM courses AS T1,"(15,)",easy,True,1,
271,student_transcripts_tracking,How is the math course described?,SELECT course_description FROM Courses WHERE course_name  =  'math',"('q',)",SELECT T1.course_description FROM courses AS T1 WHERE T1.course_name = 'math',"('q',)",easy,True,1,
272,student_transcripts_tracking,What is the zip code of the address in the city Port Chelsea?,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',"('148',)",SELECT T1.zip_postcode FROM addresses AS T1 WHERE T1.city = 'Port Chelsea',"('148',)",easy,True,1,
273,student_transcripts_tracking,Which department offers the most number of degrees? List department name and id.,"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name ,  T1.department_id ORDER BY count(*) DESC LIMIT 1","('statistics', 8)","SELECT T1.department_name, T2.department_id FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id = T2.department_id  GROUP BY T2.department_id  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
274,student_transcripts_tracking,How many departments offer any degree?,SELECT count(DISTINCT department_id) FROM Degree_Programs,"(10,)",SELECT DISTINCT count(DISTINCT T1.department_id) FROM degree_programs AS T1,"(10,)",easy,True,1,
275,student_transcripts_tracking,How many different degree names are offered?,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,"(3,)",SELECT DISTINCT count(DISTINCT T1.degree_summary_name) FROM degree_programs AS T1,"(3,)",easy,True,1,
276,student_transcripts_tracking,How many degrees does the engineering department offer?,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',"(0,)",SELECT count( *) FROM degree_programs AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'engineer',"(0,)",medium,True,1,
277,student_transcripts_tracking,What are the names and descriptions of all the sections?,"SELECT section_name ,  section_description FROM Sections","('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')","SELECT T1.section_name, T1.section_description FROM sections AS T1","('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')",medium,True,1,
278,student_transcripts_tracking,What are the names and id of courses having at most 2 sections?,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2","('nlp', 8), ('ml', 10), ('cal', 7), ('dl', 9), ('ds', 1), ('fr', 5), ('en', 4), ('math', 2), ('la', 6), ('pl', 14), ('db', 12)","SELECT T1.course_name, T1.course_id FROM courses AS T1 JOIN sections AS T2 ON T1.course_id = T2.course_id  GROUP BY T2.course_id HAVING count( *) <= 2",,medium,False,0,
279,student_transcripts_tracking,List the section_name in reversed lexicographical order.,SELECT section_name FROM Sections ORDER BY section_name DESC,"('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)",SELECT T1.section_name FROM sections AS T1     ORDER BY T1.section_name DESC,"('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)",easy,True,1,
280,student_transcripts_tracking,What is the semester which most student registered in? Show both the name and the id.,"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","('summer 2010', 2)","SELECT T1.semester_name, T1.semester_id FROM semesters AS T1 JOIN student_enrolment AS T3 ON T1.semester_id = T3.semester_id  GROUP BY T3.semester_id  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
281,student_transcripts_tracking,What is the description of the department whose name has the substring the computer?,SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',"('error',)",SELECT T1.department_description FROM departments AS T1 WHERE T1.department_name like '%computer%',"('error',)",medium,True,1,
282,student_transcripts_tracking,"Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.","SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","('Reva', 'Golda', 'Osinski', 9), ('Jarvis', 'Aaliyah', 'Carroll', 4), ('Jordy', 'Osborne', 'Rempel', 14)","SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id  GROUP BY T1.student_id HAVING count( *) = 2","('Reva', 'Golda', 'Osinski', 9), ('Jarvis', 'Aaliyah', 'Carroll', 4), ('Jordy', 'Osborne', 'Rempel', 14)",medium,True,1,
283,student_transcripts_tracking,"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.","SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Reva', 'Golda', 'Osinski'), ('Stanford', 'Mona', 'Rogahn')","SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id = T2.student_id JOIN degree_programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'","('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Reva', 'Golda', 'Osinski'), ('Stanford', 'Mona', 'Rogahn')",hard,True,1,
284,student_transcripts_tracking,Find the kind of program which most number of students are enrolled in?,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,"('Bachelor',)",SELECT T1.degree_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id  GROUP BY T3.degree_program_id  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
285,student_transcripts_tracking,Find the program which most number of students are enrolled in. List both the id and the summary.,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1","(9, 'Bachelor')","SELECT T1.degree_program_id, T1.degree_summary_name FROM degree_programs AS T1 JOIN student_enrolment AS T3 ON T1.degree_program_id = T3.degree_program_id  GROUP BY T3.degree_program_id  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
286,student_transcripts_tracking,Which semesters do not have any student enrolled? List the semester name.,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),"('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)",SELECT T1.semester_name FROM semesters AS T1 WHERE T1.semester_id NOT IN (SELECT T22.semester_id FROM student_enrolment AS T22        ),"('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)",hard,True,1,
287,student_transcripts_tracking,What are all the course names of the courses which ever have students enrolled in?,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,"('ml',), ('en',), ('rs',), ('math',), ('la',), ('nlp',), ('os',), ('db',), ('ai',), ('pl',)",SELECT DISTINCT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id,"('ml',), ('en',), ('rs',), ('math',), ('la',), ('nlp',), ('os',), ('db',), ('ai',), ('pl',)",easy,True,1,
288,student_transcripts_tracking,What's the name of the course with most number of enrollments?,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,"('ml',)",SELECT T1.course_name FROM courses AS T1 JOIN student_enrolment_courses AS T2 ON T1.course_id = T2.course_id  GROUP BY T2.course_id  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
289,student_transcripts_tracking,Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,"('Weimann',), ('Gleichner',)",SELECT T1.last_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina'       EXCEPT SELECT DISTINCT T3.last_name FROM students AS T3 JOIN student_enrolment AS T4 ON T3.student_id = T4.student_id,"('Jaskolski',)",extra,False,0,
290,student_transcripts_tracking,Show the date and id of the transcript with at least 2 course results.,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.transcript_date, T1.transcript_id HAVING count(*)  >=  2","('1975-05-06 12:04:47', 8), ('2010-12-13 10:55:15', 6), ('2013-06-30 13:01:40', 5), ('1998-11-22 12:18:29', 15)","SELECT T1.transcript_date, T2.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T2.transcript_id HAVING count( *) >= 2",,extra,False,0,
291,student_transcripts_tracking,What is the phone number of the man with the first name Timmothy and the last name Ward?,SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward',"('(096)889-8954x524',)",SELECT T1.cell_mobile_number FROM students AS T1 WHERE T1.first_name = 'Timmothy' and T1.last_name = 'Ward',"('(096)889-8954x524',)",medium,True,1,
292,student_transcripts_tracking,"Who is the first student to register? List the first name, middle name and last name.","SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","('Timmothy', 'Anna', 'Ward')","SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1    ORDER BY T1.date_first_registered ASC LIMIT 1","('Timmothy', 'Anna', 'Ward')",medium,True,1,
293,student_transcripts_tracking,"Who is the earliest graduate of the school? List the first name, middle name and last name.","SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","('Timmothy', 'Anna', 'Ward')","SELECT T1.first_name, T1.middle_name, T1.last_name FROM students AS T1    ORDER BY T1.date_left ASC LIMIT 1","('Timmothy', 'Anna', 'Ward')",medium,True,1,
294,student_transcripts_tracking,Whose permanent address is different from his or her current address? List his or her first name.,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,"('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)","SELECT T1.first_name FROM students AS T1 WHERE T1.current_address_id != [0, 34, False]",,easy,False,0,
295,student_transcripts_tracking,Which address holds the most number of students currently? List the address id and all lines.,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id,  T1.line_1 ,  T1.line_2 ORDER BY count(*) DESC LIMIT 1","(9, '0643 Muller Vista', 'Suite 383')","SELECT T1.address_id, T1.line_1, T1.line_2 FROM addresses AS T1 JOIN students AS T2 ON T1.address_id = T2.permanent_address_id  GROUP BY T2.permanent_address_id  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
296,student_transcripts_tracking,"On average, when were the transcripts printed?",SELECT avg(extract(year from transcript_date)) FROM Transcripts,"(1989.933333333333,)",SELECT avg( T1.transcript_date) FROM transcripts AS T1,,easy,False,0,
297,student_transcripts_tracking,When is the first transcript released? List the date and details.,"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","('1975-05-06 12:04:47', 'NA')","SELECT T1.transcript_date, T1.other_details FROM transcripts AS T1    ORDER BY T1.transcript_date ASC LIMIT 1","('1975-05-06 12:04:47', 'NA')",medium,True,1,
298,student_transcripts_tracking,How many transcripts are released?,SELECT count(*) FROM Transcripts,"(15,)",SELECT count( *) FROM transcripts AS T1,"(15,)",easy,True,1,
299,student_transcripts_tracking,What is the last transcript release date?,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,"('2013-06-30 13:01:40',)",SELECT T1.transcript_date FROM transcripts AS T1    ORDER BY T1.transcript_date DESC LIMIT 1,"('2013-06-30 13:01:40',)",medium,True,1,
300,student_transcripts_tracking,How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.,"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1","(4, 0)","SELECT count( *), T1.student_course_id FROM transcript_contents AS T1  GROUP BY T1.student_course_id  ORDER BY count( *) DESC LIMIT 1","(4, 0)",hard,True,1,
301,student_transcripts_tracking,"Show the date of the transcript which shows the least number of results, also list the id.","SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T2.transcript_date, T1.transcript_id ORDER BY count(*) ASC LIMIT 1","('1975-10-28 15:16:51', 2)","SELECT T1.transcript_date, T2.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id = T2.transcript_id  GROUP BY T2.transcript_id  ORDER BY count( *) ASC LIMIT 1",,extra,False,0,
302,student_transcripts_tracking,Find the semester when both Master students and Bachelor students got enrolled in.,SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor',"(13,)",SELECT DISTINCT T1.semester_id FROM student_enrolment AS T1 JOIN degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Master'     INTERSECT SELECT DISTINCT T3.semester_id FROM student_enrolment AS T3 JOIN degree_programs AS T4 ON T3.degree_program_id = T4.degree_program_id WHERE T4.degree_summary_name = 'Bachelor',"(13,)",extra,True,1,
303,student_transcripts_tracking,How many different addresses do the students currently live?,SELECT count(DISTINCT current_address_id) FROM Students,"(9,)",SELECT DISTINCT count(DISTINCT T1.current_address_id) FROM students AS T1,"(9,)",easy,True,1,
304,student_transcripts_tracking,List all the student details in reversed lexicographical order.,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,"('voluptatem',), ('rerum',), ('quia',), ('qui',), ('omnis',), ('omnis',), ('non',), ('nesciunt',), ('laborum',), ('facilis',), ('et',), ('dolorum',), ('autem',), ('atque',), ('assumenda',)",SELECT T1.other_student_details FROM students AS T1     ORDER BY T1.other_student_details DESC,"('voluptatem',), ('rerum',), ('quia',), ('qui',), ('omnis',), ('omnis',), ('non',), ('nesciunt',), ('laborum',), ('facilis',), ('et',), ('dolorum',), ('autem',), ('atque',), ('assumenda',)",easy,True,1,
305,student_transcripts_tracking,Describe the section h.,SELECT section_description FROM Sections WHERE section_name  =  'h',"('et',)",SELECT T1.section_description FROM sections AS T1 WHERE T1.section_name = 'h',"('et',)",easy,True,1,
306,student_transcripts_tracking,Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582.,SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.permanent_address_id  =  T2.address_id WHERE T2.country  =  'Haiti' UNION SELECT first_name FROM Students WHERE cell_mobile_number  =  '09700166582',"('Delaney',), ('Hobart',), ('Jarvis',), ('Warren',)",SELECT T1.first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_id = T2.address_id WHERE T2.country = 'Haiti'      UNION SELECT T3.first_name FROM students AS T3 WHERE T3.cell_mobile_number = '09700166582',"('Delaney',), ('Hobart',), ('Jarvis',), ('Warren',)",extra,True,1,
307,tvshow,List the title of all cartoons in alphabetical order.,SELECT Title FROM Cartoon ORDER BY title,"('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)",SELECT T1.Title FROM cartoon AS T1     ORDER BY T1.Title ASC,"('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)",easy,True,1,
308,tvshow,List all cartoon directed by 'Ben Jones'.,SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';,"('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)",SELECT T1.Title FROM cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones',"('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)",easy,True,1,
309,tvshow,How many cartoons were written by 'Joseph Kuhr'?,SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';,"(2,)",SELECT count( *) FROM cartoon AS T1 WHERE T1.Written_by = 'Joseph Kuhr',"(2,)",easy,True,1,
310,tvshow,list all cartoon titles and their directors ordered by their air date,"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date","('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')","SELECT T1.Title, T1.Directed_by FROM cartoon AS T1     ORDER BY T1.Original_air_date ASC","('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')",medium,True,1,
311,tvshow,List the title of all cartoon directed by 'Ben Jones' or 'Brandon Vietti'.,SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';,"('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)",SELECT T1.Title FROM cartoon AS T1 WHERE T1.Directed_by = 'Ben Jones' or T1.Directed_by = 'Brandon Vietti',"('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)",medium,True,1,
312,tvshow,Which country has the most of TV Channels? List the country and number of TV Channels it has.,"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;","('Italy', 12)","SELECT T1.Country, count( *) FROM tv_channel AS T1  GROUP BY T1.Country  ORDER BY count( *) DESC LIMIT 1","('Italy', 12)",hard,True,1,
313,tvshow,List the number of different series names and contents in the TV Channel table.,"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;","(15, 1)","SELECT DISTINCT count(DISTINCT T1.series_name), count(DISTINCT T1.Content) FROM tv_channel AS T1","(15, 1)",medium,True,1,
314,tvshow,What is the content of TV Channel with serial name 'Sky Radio'?,SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';,"('music',)",SELECT T1.Content FROM tv_channel AS T1 WHERE T1.series_name = 'Sky Radio',"('music',)",easy,True,1,
315,tvshow,What is the Package Option of TV Channel with serial name 'Sky Radio'?,SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';,"('Sky Famiglia',)",SELECT T1.Package_Option FROM tv_channel AS T1 WHERE T1.series_name = 'Sky Radio',"('Sky Famiglia',)",easy,True,1,
316,tvshow,How many TV Channel using language English?,SELECT count(*) FROM TV_Channel WHERE LANGUAGE = 'English';,"(3,)",SELECT count( *) FROM tv_channel AS T1 WHERE T1.Language = 'English',"(3,)",easy,True,1,
317,tvshow,List the language used least number of TV Channel. List language and number of TV Channel.,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;","('English', 3)","SELECT T1.Language, count( *) FROM tv_channel AS T1  GROUP BY T1.Language  ORDER BY count( *) ASC LIMIT 1","('English', 3)",hard,True,1,
318,tvshow,What is the TV Channel that shows the cartoon 'The Rise of the Blue Beetle!'? List the TV Channel's series name.,SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!';,"('Sky Radio',)",SELECT T1.series_name FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = 'The Rise of the Blue Beetle!',"('Sky Radio',)",medium,True,1,
319,tvshow,List the title of all  Cartoons showed on TV Channel with series name 'Sky Radio'.,SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';,"('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)",SELECT T1.Title FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio',"('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)",medium,True,1,
320,tvshow,List the Episode of all TV series sorted by rating.,SELECT Episode FROM TV_series ORDER BY rating,"('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Blowback',), ('Emily',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)",SELECT T1.Episode FROM tv_series AS T1     ORDER BY T1.Rating ASC,"('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Blowback',), ('Emily',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)",easy,True,1,
321,tvshow,List top 3 highest Rating  TV series. List the TV series's Episode and Rating.,"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;","('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')","SELECT T1.Episode, T1.Rating FROM tv_series AS T1    ORDER BY T1.Rating DESC LIMIT 1","('A Love of a Lifetime', '5.8')",medium,False,0,
322,tvshow,What is minimum and maximum share of TV series?,"SELECT max(SHARE) , min(SHARE) FROM TV_series;","(9.0, 5.0)","SELECT max( T1.Share), min( T1.Share) FROM tv_series AS T1","(9.0, 5.0)",medium,True,1,
323,tvshow,What is the air date of TV series with Episode 'A Love of a Lifetime'?,SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"('September 24, 2007',)",SELECT T1.Air_Date FROM tv_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime',"('September 24, 2007',)",easy,True,1,
324,tvshow,What is Weekly Rank of TV series with Episode 'A Love of a Lifetime'?,SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';,"(43.0,)",SELECT T1.Weekly_Rank FROM tv_series AS T1 WHERE T1.Episode = 'A Love of a Lifetime',"(43.0,)",easy,True,1,
325,tvshow,What is the TV Channel of TV series with Episode 'A Love of a Lifetime'? List the TV Channel's series name.,SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime';,"('Sky Radio',)",SELECT T1.series_name FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = 'A Love of a Lifetime',"('Sky Radio',)",medium,True,1,
326,tvshow,List the Episode of all  TV series showed on TV Channel with series name 'Sky Radio'.,SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = 'Sky Radio';,"('A Love of a Lifetime',), ('Keepers',)",SELECT T1.Episode FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = 'Sky Radio',"('A Love of a Lifetime',), ('Keepers',)",medium,True,1,
327,tvshow,Find the number of cartoons directed by each of the listed directors.,"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by","(4, 'Brandon Vietti'), (4, 'Michael Chang'), (4, 'Ben Jones')","SELECT count( *), T1.Directed_by FROM cartoon AS T1  GROUP BY T1.Directed_by","(4, 'Brandon Vietti'), (4, 'Michael Chang'), (4, 'Ben Jones')",medium,True,1,
328,tvshow,Find the production code and channel of the most recently aired cartoon.,"SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1","(105.0, 705.0)","SELECT T1.Production_code, T1.Channel FROM cartoon AS T1    ORDER BY T1.Original_air_date ASC LIMIT 1","(105.0, 705.0)",medium,True,1,
329,tvshow,Find the package choice and series name of the TV channel that has high definition TV.,"SELECT package_option ,  series_name FROM TV_Channel WHERE high_definition_TV  =  'yes'","('Sky Famiglia + Sky HD', 'MTV Live HD')","SELECT T1.Package_Option, T1.series_name FROM tv_channel AS T1 WHERE T1.High_definition_TV = 'yes'","('Sky Famiglia + Sky HD', 'MTV Live HD')",medium,True,1,
330,tvshow,which countries' tv channels are playing some cartoon written by Todd Casey?,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"('Italy',), ('United Kingdom',)",SELECT T1.Country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey',"('Italy',), ('United Kingdom',)",medium,True,1,
331,tvshow,which countries' tv channels are not playing any cartoon written by Todd Casey?,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',"('Poland',)",SELECT T1.Country FROM tv_channel AS T1        EXCEPT SELECT T2.Country FROM tv_channel AS T2 JOIN cartoon AS T3 ON T2.id = T3.Channel WHERE T3.Written_by = 'Todd Casey',"('Poland',)",hard,True,1,
332,tvshow,Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?,"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'","('MTV Dance', 'United Kingdom')","SELECT T1.series_name, T1.Country FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Michael Chang'     INTERSECT SELECT T3.series_name, T3.Country FROM tv_channel AS T3 JOIN cartoon AS T4 ON T3.id = T4.Channel WHERE T4.Directed_by = 'Ben Jones'","('MTV Dance', 'United Kingdom')",extra,True,1,
333,tvshow,find the pixel aspect ratio and nation of the tv channels that do not use English.,"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'","('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')","SELECT T1.Pixel_aspect_ratio_PAR, T1.Country FROM tv_channel AS T1 WHERE T1.Language != 'English'","('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')",medium,True,1,
334,tvshow,find id of the tv channels that from the countries where have more than two tv channels.,SELECT id FROM tv_channel GROUP BY id HAVING count(*)  >  2,,SELECT T1.id FROM tv_channel AS T1  GROUP BY T1.id HAVING count( *) > 2,,easy,True,1,
335,tvshow,find the id of tv channels that do not play any cartoon directed by Ben Jones.,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',"(719.0,), (709.0,), (714.0,), (708.0,), (706.0,), (701.0,), (715.0,), (717.0,), (703.0,), (713.0,), (705.0,)",SELECT T1.id FROM tv_channel AS T1        EXCEPT SELECT T2.Channel FROM cartoon AS T2 WHERE T2.Directed_by = 'Ben Jones',"(719.0,), (709.0,), (714.0,), (708.0,), (706.0,), (701.0,), (715.0,), (717.0,), (703.0,), (713.0,), (705.0,)",hard,True,1,
336,tvshow,find the package option of the tv channel that do not have any cartoon directed by Ben Jones.,SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),"('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)",SELECT T1.Package_Option FROM tv_channel AS T1 WHERE T1.id NOT IN (SELECT T22.Channel FROM cartoon AS T22 WHERE T22.Directed_by = 'Ben Jones'       ),"('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)",hard,True,1,
337,poker_player,How many poker players are there?,SELECT count(*) FROM poker_player,"(5,)",SELECT count( *) FROM poker_player AS T1,"(5,)",easy,True,1,
338,poker_player,List the earnings of poker players in descending order.,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,"(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)",SELECT T1.Earnings FROM poker_player AS T1     ORDER BY T1.Earnings DESC,"(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)",easy,True,1,
339,poker_player,List the final tables made and the best finishes of poker players.,"SELECT Final_Table_Made ,  Best_Finish FROM poker_player","(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)","SELECT T1.Final_Table_Made, T1.Best_Finish FROM poker_player AS T1","(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)",medium,True,1,
340,poker_player,What is the average earnings of poker players?,SELECT avg(Earnings) FROM poker_player,"(301891.2,)",SELECT avg( T1.Earnings) FROM poker_player AS T1,"(301891.2,)",easy,True,1,
341,poker_player,What is the money rank of the poker player with the highest earnings?,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,"(58.0,)",SELECT T1.Money_Rank FROM poker_player AS T1    ORDER BY T1.Earnings DESC LIMIT 1,"(58.0,)",medium,True,1,
342,poker_player,What is the maximum number of final tables made among poker players with earnings less than 200000?,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,"(26.0,)",SELECT max( T1.Final_Table_Made) FROM poker_player AS T1 WHERE T1.Earnings < 200000,"(26.0,)",easy,True,1,
343,poker_player,What are the names of poker players?,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,"('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)",SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID,"('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)",easy,True,1,
344,poker_player,What are the names of poker players whose earnings is higher than 300000?,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,"('Aleksey Ostapenko',), ('Maksim Botin',)",SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000,"('Aleksey Ostapenko',), ('Maksim Botin',)",medium,True,1,
345,poker_player,List the names of poker players ordered by the final tables made in ascending order.,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,"('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)",SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID     ORDER BY T2.Final_Table_Made ASC,"('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)",medium,True,1,
346,poker_player,What is the birth date of the poker player with the lowest earnings?,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,"('August 8, 1986',)",SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Earnings ASC LIMIT 1,"('August 8, 1986',)",hard,True,1,
347,poker_player,What is the money rank of the tallest poker player?,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,"(68.0,)",SELECT T1.Money_Rank FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID    ORDER BY T2.Height DESC LIMIT 1,"(68.0,)",hard,True,1,
348,poker_player,What is the average earnings of poker players with height higher than 200?,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,"(309445.0,)",SELECT avg( T1.Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200,"(309445.0,)",medium,True,1,
349,poker_player,What are the names of poker players in descending order of earnings?,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,"('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)",SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID     ORDER BY T2.Earnings DESC,"('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)",medium,True,1,
350,poker_player,What are different nationalities of people and the corresponding number of people from each nation?,"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality","('Bulgaria', 1), ('Russia', 6)","SELECT T1.Nationality, count( *) FROM people AS T1  GROUP BY T1.Nationality","('Bulgaria', 1), ('Russia', 6)",medium,True,1,
351,poker_player,What is the most common nationality of people?,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,"('Russia',)",SELECT T1.Nationality FROM people AS T1  GROUP BY T1.Nationality  ORDER BY count( *) DESC LIMIT 1,"('Russia',)",hard,True,1,
352,poker_player,What are the nationalities that are shared by at least two people?,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,"('Russia',)",SELECT T1.Nationality FROM people AS T1  GROUP BY T1.Nationality HAVING count( *) >= 2,"('Russia',)",easy,True,1,
353,poker_player,List the names and birth dates of people in ascending alphabetical order of name.,"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')","SELECT T1.Name, T1.Birth_Date FROM people AS T1     ORDER BY T1.Name ASC","('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')",medium,True,1,
354,poker_player,Show names of people whose nationality is not 'Russia'.,SELECT Name FROM people WHERE Nationality != 'Russia',"('Teodor Salparov',)",SELECT T1.Name FROM people AS T1 WHERE T1.Nationality != 'Russia',"('Teodor Salparov',)",easy,True,1,
355,poker_player,List the names of people that are not poker players.,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),"('Roman Bragin',), ('Sergey Grankin',)",SELECT T1.Name FROM people AS T1 WHERE T1.People_ID NOT IN (SELECT T22.People_ID FROM poker_player AS T22        ),"('Roman Bragin',), ('Sergey Grankin',)",hard,True,1,
356,poker_player,How many distinct nationalities are there?,SELECT count(DISTINCT Nationality) FROM people,"(2,)",SELECT DISTINCT count(DISTINCT T1.Nationality) FROM people AS T1,"(2,)",easy,True,1,
357,world_1,What are the names of all the countries that became independent after 1950?,SELECT Name FROM country WHERE IndepYear  >  1950,"('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Zambia',), ('Zimbabwe',), ('Bermuda',), ('Bouvet Island',), ('Cocos (Keeling) Islands',), ('Cook Islands',), ('Christmas Island',), ('Cayman Islands',), ('Western Sahara',), ('Falkland Islands',), ('Faroe Islands',), ('Gibraltar',), ('Guadeloupe',), ('Greenland',), ('French Guiana',), ('Guam',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('British Indian Ocean Territory',), ('Macao',), ('Northern Mariana Islands',), ('Montserrat',), ('Martinique',), ('Mayotte',), ('New Caledonia',), ('Norfolk Island',), ('Niue',), ('Pitcairn',), ('Puerto Rico',), ('Palestine',), ('French Polynesia',), ('Réunion',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Saint Pierre and Miquelon',), ('Turks and Caicos Islands',), ('Tokelau',), ('East Timor',), ('United States Minor Outlying Islands',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Wallis and Futuna',), ('Aruba',), ('Anguilla',), ('Netherlands Antilles',), ('American Samoa',), ('Antarctica',), ('French Southern territories',)",SELECT T1.Name FROM country AS T1 WHERE T1.IndepYear > 1950,"('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Zambia',), ('Zimbabwe',), ('Bermuda',), ('Bouvet Island',), ('Cocos (Keeling) Islands',), ('Cook Islands',), ('Christmas Island',), ('Cayman Islands',), ('Western Sahara',), ('Falkland Islands',), ('Faroe Islands',), ('Gibraltar',), ('Guadeloupe',), ('Greenland',), ('French Guiana',), ('Guam',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('British Indian Ocean Territory',), ('Macao',), ('Northern Mariana Islands',), ('Montserrat',), ('Martinique',), ('Mayotte',), ('New Caledonia',), ('Norfolk Island',), ('Niue',), ('Pitcairn',), ('Puerto Rico',), ('Palestine',), ('French Polynesia',), ('Réunion',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Saint Pierre and Miquelon',), ('Turks and Caicos Islands',), ('Tokelau',), ('East Timor',), ('United States Minor Outlying Islands',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Wallis and Futuna',), ('Aruba',), ('Anguilla',), ('Netherlands Antilles',), ('American Samoa',), ('Antarctica',), ('French Southern territories',)",easy,True,1,
358,world_1,How many countries have a republic as their form of government?,SELECT count(*) FROM country WHERE GovernmentForm  =  'Republic',"(122,)",SELECT count( *) FROM country AS T1 WHERE T1.GovernmentForm = 'Republic',"(122,)",easy,True,1,
359,world_1,What is the total surface area of the countries in the Caribbean region?,SELECT sum(SurfaceArea) FROM country WHERE Region  =  'Caribbean',"(234423.0,)",SELECT sum( T1.SurfaceArea) FROM country AS T1 WHERE T1.Region = 'Caribbean',"(234423.0,)",easy,True,1,
360,world_1,Which continent is Anguilla in?,SELECT Continent FROM country WHERE Name  =  'Anguilla',"('North America',)",SELECT T1.Continent FROM country AS T1 WHERE T1.Name = 'Anguilla',"('North America',)",easy,True,1,
361,world_1,Which region is the city Kabul located in?,SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  'Kabul',"('Southern and Central Asia',)",SELECT T1.Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Kabul',"('Southern and Central Asia',)",medium,True,1,
362,world_1,Which language is the most popular in Aruba?,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba' ORDER BY Percentage DESC LIMIT 1,"('Papiamento',)",SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'   ORDER BY T1.Percentage DESC LIMIT 1,"('Papiamento',)",extra,True,1,
363,world_1,What are the population and life expectancies in Brazil?,"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  'Brazil'","(170115000, 62.9)","SELECT T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Name = 'Brazil'","(170115000, 62.9)",medium,True,1,
364,world_1,What are the region and population of Angola?,"SELECT Population ,  Region FROM country WHERE Name  =  'Angola'","(12878000, 'Central Africa')","SELECT T1.Population, T1.Region FROM country AS T1 WHERE T1.Name = 'Angola'","(12878000, 'Central Africa')",medium,True,1,
365,world_1,What is the average expected life expectancy for countries in the region of Central Africa?,SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa',"(50.311111111111,)",SELECT avg( T1.LifeExpectancy) FROM country AS T1 WHERE T1.Region = 'Central Africa',"(50.311111111111,)",easy,True,1,
366,world_1,What is the name of country that has the shortest life expectancy in Asia?,SELECT Name FROM country WHERE Continent  =  'Asia' ORDER BY LifeExpectancy LIMIT 1,"('Afghanistan',)",SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.LifeExpectancy ASC LIMIT 1,"('Afghanistan',)",hard,True,1,
367,world_1,What is the total population and maximum GNP in Asia?,"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  'Asia'","(3705025700, 3787042.0)","SELECT sum( T1.Population), max( T1.GNP) FROM country AS T1 WHERE T1.Continent = 'Asia'","(3705025700, 3787042.0)",medium,True,1,
368,world_1,What is the average life expectancy in African countries that are republics?,SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  'Africa' AND GovernmentForm  =  'Republic',"(50.84347826087,)",SELECT avg( T1.LifeExpectancy) FROM country AS T1 WHERE T1.Continent = 'Africa' and T1.GovernmentForm = 'Republic',"(50.84347826087,)",medium,True,1,
369,world_1,What is the total surface area of the continents Asia and Europe?,SELECT sum(SurfaceArea) FROM country WHERE Continent  =  'Asia' OR Continent  =  'Europe',"(54930138.9,)",SELECT sum( T1.SurfaceArea) FROM country AS T1 WHERE T1.Continent = 'Asia' or T1.Continent = 'Europe',"(54930138.9,)",medium,True,1,
370,world_1,How many people live in Gelderland district?,SELECT sum(Population) FROM city WHERE District  =  'Gelderland',"(545548,)",SELECT sum( T1.Population) FROM city AS T1 WHERE T1.District = 'Gelderland',"(545548,)",easy,True,1,
371,world_1,What is the average GNP and total population in all nations whose government is US territory?,"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  'US Territory'","(510.333333333333, 329000)","SELECT avg( T1.GNP), sum( T1.Population) FROM country AS T1 WHERE T1.GovernmentForm = 'US Territory'","(510.333333333333, 329000)",medium,True,1,
372,world_1,How many unique languages are spoken in the world?,SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,"(457,)",SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1,"(457,)",easy,True,1,
373,world_1,How many type of governments are in Africa?,SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  'Africa',"(10,)",SELECT DISTINCT count(DISTINCT T1.GovernmentForm) FROM country AS T1 WHERE T1.Continent = 'Africa',"(10,)",easy,True,1,
374,world_1,What is the total number of languages used in Aruba?,SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Aruba',"(4,)",SELECT count( T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba',"(4,)",medium,True,1,
375,world_1,How many official languages does Afghanistan have?,SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  'Afghanistan' AND IsOfficial  =  'T',"(2,)",SELECT count( *) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'Afghanistan' and T2.IsOfficial = 'T',"(2,)",medium,True,1,
376,world_1,What is name of the country that speaks the largest number of languages?,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,"('China',)",SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
377,world_1,Which continent has the most diverse languages?,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,"('Africa',)",SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode  GROUP BY T2.CountryCode  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
378,world_1,How many countries speak both English and Dutch?,SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch') as sub,"(3,)",SELECT count( *) FROM country AS T1,"(239,)",easy,False,0,
379,world_1,What are the names of nations speak both English and French?,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French',"('Seychelles',), ('Monaco',), ('Canada',), ('Virgin Islands, U.S.',), ('Vanuatu',), ('United States',)",SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English'     INTERSECT SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.Language = 'French',"('Seychelles',), ('Monaco',), ('Canada',), ('Virgin Islands, U.S.',), ('Vanuatu',), ('United States',)",extra,True,1,
380,world_1,What are the names of nations where both English and French are official languages?,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T' INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'French' AND T2.IsOfficial  =  'T',"('Seychelles',), ('Canada',), ('Vanuatu',)",SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' and T2.IsOfficial = 'T'     INTERSECT SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.Language = 'French' and T4.IsOfficial = 'T',"('Seychelles',), ('Canada',), ('Vanuatu',)",extra,True,1,
381,world_1,What is the number of distinct continents where Chinese is spoken?,SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese',"(4,)",SELECT DISTINCT count(DISTINCT T1.Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Chinese',"(4,)",medium,True,1,
382,world_1,What are the regions that use English or Dutch?,SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' OR T2.Language  =  'Dutch',"('Southern Africa',), ('Caribbean',), ('Micronesia/Caribbean',), ('Eastern Africa',), ('Southern Europe',), ('Eastern Asia',), ('South America',), ('North America',), ('Australia and New Zealand',), ('Southern and Central Asia',), ('Southeast Asia',), ('Nordic Countries',), ('Middle East',), ('Western Africa',), ('British Islands',), ('Micronesia',), ('Melanesia',), ('Polynesia',), ('Central America',), ('Western Europe',)",SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' or T2.Language = 'Dutch',"('Southern Africa',), ('Caribbean',), ('Micronesia/Caribbean',), ('Eastern Africa',), ('Southern Europe',), ('Eastern Asia',), ('South America',), ('North America',), ('Australia and New Zealand',), ('Southern and Central Asia',), ('Southeast Asia',), ('Nordic Countries',), ('Middle East',), ('Western Africa',), ('British Islands',), ('Micronesia',), ('Melanesia',), ('Polynesia',), ('Central America',), ('Western Europe',)",hard,True,1,
383,world_1,What are the countries where either English or Dutch is the official language?,SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND IsOfficial  =  'T' UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Dutch' AND IsOfficial  =  'T',"('MHL', 'Marshall Islands', 'Oceania', 'Micronesia', 181.0, 1990, 64000, 65.5, 97.0, None, 'Marshall Islands/Majol', 'Republic', 'Kessai Note', 2507, 'MH', 'MHL', 'English', 'T', 0.0), ('CYM', 'Cayman Islands', 'North America', 'Caribbean', 264.0, 9999, 38000, 78.9, 1263.0, 1186.0, 'Cayman Islands', 'Dependent Territory of the UK', 'Elisabeth II', 553, 'KY', 'CYM', 'English', 'T', 0.0), ('AUS', 'Australia', 'Oceania', 'Australia and New Zealand', 7741220.0, 1901, 18886000, 79.8, 351182.0, 392911.0, 'Australia', 'Constitutional Monarchy, Federation', 'Elisabeth II', 135, 'AU', 'AUS', 'English', 'T', 81.2), ('MNP', 'Northern Mariana Islands', 'Oceania', 'Micronesia', 464.0, 9999, 78000, 75.5, 0.0, None, 'Northern Mariana Islands', 'Commonwealth of the US', 'George W. Bush', 2913, 'MP', 'MNP', 'English', 'T', 4.8), ('UMI', 'United States Minor Outlying Islands', 'Oceania', 'Micronesia/Caribbean', 16.0, 9999, 0, None, 0.0, None, 'United States Minor Outlying Islands', 'Dependent Territory of the US', 'George W. Bush', None, 'UM', 'UMI', 'English', 'T', 0.0), ('USA', 'United States', 'North America', 'North America', 9363520.0, 1776, 278357000, 77.1, 8510700.0, 8110900.0, 'United States', 'Federal Republic', 'George W. Bush', 3813, 'US', 'USA', 'English', 'T', 86.2), ('VIR', 'Virgin Islands, U.S.', 'North America', 'Caribbean', 347.0, 9999, 93000, 78.1, 0.0, None, 'Virgin Islands of the United States', 'US Territory', 'George W. Bush', 4067, 'VI', 'VIR', 'English', 'T', 81.7), ('NIU', 'Niue', 'Oceania', 'Polynesia', 260.0, 9999, 2000, None, 0.0, None, 'Niue', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 2805, 'NU', 'NIU', 'English', 'T', 0.0), ('LSO', 'Lesotho', 'Africa', 'Southern Africa', 30355.0, 1966, 2153000, 50.8, 1061.0, 1161.0, 'Lesotho', 'Constitutional Monarchy', 'Letsie III', 2437, 'LS', 'LSO', 'English', 'T', 0.0), ('TCA', 'Turks and Caicos Islands', 'North America', 'Caribbean', 430.0, 9999, 17000, 73.3, 96.0, None, 'The Turks and Caicos Islands', 'Dependent Territory of the UK', 'Elisabeth II', 3423, 'TC', 'TCA', 'English', 'T', 0.0), ('TON', 'Tonga', 'Oceania', 'Polynesia', 650.0, 1970, 99000, 67.9, 146.0, 170.0, 'Tonga', 'Monarchy', ""Taufa'ahau Tupou IV"", 3334, 'TO', 'TON', 'English', 'T', 0.0), ('IRL', 'Ireland', 'Europe', 'British Islands', 70273.0, 1921, 3775100, 76.8, 75921.0, 73132.0, 'Ireland/Éire', 'Republic', 'Mary McAleese', 1447, 'IE', 'IRL', 'English', 'T', 98.4), ('VUT', 'Vanuatu', 'Oceania', 'Melanesia', 12189.0, 1980, 190000, 60.6, 261.0, 246.0, 'Vanuatu', 'Republic', 'John Bani', 3537, 'VU', 'VUT', 'English', 'T', 28.3), ('VCT', 'Saint Vincent and the Grenadines', 'North America', 'Caribbean', 388.0, 1979, 114000, 72.3, 285.0, None, 'Saint Vincent and the Grenadines', 'Constitutional Monarchy', 'Elisabeth II', 3066, 'VC', 'VCT', 'English', 'T', 0.0), ('NFK', 'Norfolk Island', 'Oceania', 'Australia and New Zealand', 36.0, 9999, 2000, None, 0.0, None, 'Norfolk Island', 'Territory of Australia', 'Elisabeth II', 2806, 'NF', 'NFK', 'English', 'T', 0.0), ('CXR', 'Christmas Island', 'Oceania', 'Australia and New Zealand', 135.0, 9999, 2500, None, 0.0, None, 'Christmas Island', 'Territory of Australia', 'Elisabeth II', 1791, 'CX', 'CXR', 'English', 'T', 0.0), ('AIA', 'Anguilla', 'North America', 'Caribbean', 96.0, 9999, 8000, 76.1, 63.2, None, 'Anguilla', 'Dependent Territory of the UK', 'Elisabeth II', 62, 'AI', 'AIA', 'English', 'T', 0.0), ('MLT', 'Malta', 'Europe', 'Southern Europe', 316.0, 1964, 380200, 77.9, 3512.0, 3338.0, 'Malta', 'Republic', 'Guido de Marco', 2484, 'MT', 'MLT', 'English', 'T', 2.1), ('TUV', 'Tuvalu', 'Oceania', 'Polynesia', 26.0, 1978, 12000, 66.3, 6.0, None, 'Tuvalu', 'Constitutional Monarchy', 'Elisabeth II', 3424, 'TV', 'TUV', 'English', 'T', 0.0), ('BLZ', 'Belize', 'North America', 'Central America', 22696.0, 1981, 241000, 70.9, 630.0, 616.0, 'Belize', 'Constitutional Monarchy', 'Elisabeth II', 185, 'BZ', 'BLZ', 'English', 'T', 50.8), ('BMU', 'Bermuda', 'North America', 'North America', 53.0, 9999, 65000, 76.9, 2328.0, 2190.0, 'Bermuda', 'Dependent Territory of the UK', 'Elisabeth II', 191, 'BM', 'BMU', 'English', 'T', 100.0), ('VGB', 'Virgin Islands, British', 'North America', 'Caribbean', 151.0, 9999, 21000, 75.4, 612.0, 573.0, 'British Virgin Islands', 'Dependent Territory of the UK', 'Elisabeth II', 537, 'VG', 'VGB', 'English', 'T', 0.0), ('MSR', 'Montserrat', 'North America', 'Caribbean', 102.0, 9999, 11000, 78.0, 109.0, None, 'Montserrat', 'Dependent Territory of the UK', 'Elisabeth II', 2697, 'MS', 'MSR', 'English', 'T', 0.0), ('ANT', 'Netherlands Antilles', 'North America', 'Caribbean', 800.0, 9999, 217000, 74.7, 1941.0, None, 'Nederlandse Antillen', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 33, 'AN', 'ANT', 'Dutch', 'T', 0.0), ('ATG', 'Antigua and Barbuda', 'North America', 'Caribbean', 442.0, 1981, 68000, 70.5, 612.0, 584.0, 'Antigua and Barbuda', 'Constitutional Monarchy', 'Elisabeth II', 63, 'AG', 'ATG', 'English', 'T', 0.0), ('LCA', 'Saint Lucia', 'North America', 'Caribbean', 622.0, 1979, 154000, 72.3, 571.0, None, 'Saint Lucia', 'Constitutional Monarchy', 'Elisabeth II', 3065, 'LC', 'LCA', 'English', 'T', 20.0), ('BRB', 'Barbados', 'North America', 'Caribbean', 430.0, 1966, 270000, 73.0, 2223.0, 2186.0, 'Barbados', 'Constitutional Monarchy', 'Elisabeth II', 174, 'BB', 'BRB', 'English', 'T', 0.0), ('PLW', 'Palau', 'Oceania', 'Micronesia', 459.0, 1994, 19000, 68.6, 105.0, None, 'Belau/Palau', 'Republic', 'Kuniwo Nakamura', 2881, 'PW', 'PLW', 'English', 'T', 3.2), ('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, 9999, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW', 'ABW', 'Dutch', 'T', 5.3), ('FLK', 'Falkland Islands', 'South America', 'South America', 12173.0, 9999, 2000, None, 0.0, None, 'Falkland Islands', 'Dependent Territory of the UK', 'Elisabeth II', 763, 'FK', 'FLK', 'English', 'T', 0.0), ('SYC', 'Seychelles', 'Africa', 'Eastern Africa', 455.0, 1976, 77000, 70.4, 536.0, 539.0, 'Sesel/Seychelles', 'Republic', 'France-Albert René', 3206, 'SC', 'SYC', 'English', 'T', 3.8), ('NRU', 'Nauru', 'Oceania', 'Micronesia', 21.0, 1968, 12000, 60.8, 197.0, None, 'Naoero/Nauru', 'Republic', 'Bernard Dowiyogo', 2728, 'NR', 'NRU', 'English', 'T', 7.5), ('ZWE', 'Zimbabwe', 'Africa', 'Eastern Africa', 390757.0, 1980, 11669000, 37.8, 5951.0, 8670.0, 'Zimbabwe', 'Republic', 'Robert G. Mugabe', 4068, 'ZW', 'ZWE', 'English', 'T', 2.2), ('NLD', 'Netherlands', 'Europe', 'Western Europe', 41526.0, 1581, 15864000, 78.3, 371362.0, 360478.0, 'Nederland', 'Constitutional Monarchy', 'Beatrix', 5, 'NL', 'NLD', 'Dutch', 'T', 95.6), ('ASM', 'American Samoa', 'Oceania', 'Polynesia', 199.0, 9999, 68000, 75.1, 334.0, None, 'Amerika Samoa', 'US Territory', 'George W. Bush', 54, 'AS', 'ASM', 'English', 'T', 3.1), ('WSM', 'Samoa', 'Oceania', 'Polynesia', 2831.0, 1962, 180000, 69.2, 141.0, 157.0, 'Samoa', 'Parlementary Monarchy', 'Malietoa Tanumafili II', 3169, 'WS', 'WSM', 'English', 'T', 0.6), ('CCK', 'Cocos (Keeling) Islands', 'Oceania', 'Australia and New Zealand', 14.0, 9999, 600, None, 0.0, None, 'Cocos (Keeling) Islands', 'Territory of Australia', 'Elisabeth II', 2317, 'CC', 'CCK', 'English', 'T', 0.0), ('TKL', 'Tokelau', 'Oceania', 'Polynesia', 12.0, 9999, 2000, None, 0.0, None, 'Tokelau', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 3333, 'TK', 'TKL', 'English', 'T', 0.0), ('HKG', 'Hong Kong', 'Asia', 'Eastern Asia', 1075.0, 9999, 6782000, 79.5, 166448.0, 173610.0, 'Xianggang/Hong Kong', 'Special Administrative Region of China', 'Jiang Zemin', 937, 'HK', 'HKG', 'English', 'T', 2.2), ('GIB', 'Gibraltar', 'Europe', 'Southern Europe', 6.0, 9999, 25000, 79.0, 258.0, None, 'Gibraltar', 'Dependent Territory of the UK', 'Elisabeth II', 915, 'GI', 'GIB', 'English', 'T', 88.9), ('KNA', 'Saint Kitts and Nevis', 'North America', 'Caribbean', 261.0, 1983, 38000, 70.7, 299.0, None, 'Saint Kitts and Nevis', 'Constitutional Monarchy', 'Elisabeth II', 3064, 'KN', 'KNA', 'English', 'T', 0.0), ('GBR', 'United Kingdom', 'Europe', 'British Islands', 242900.0, 1066, 59623400, 77.7, 1378330.0, 1296830.0, 'United Kingdom', 'Constitutional Monarchy', 'Elisabeth II', 456, 'GB', 'GBR', 'English', 'T', 97.3), ('SHN', 'Saint Helena', 'Africa', 'Western Africa', 314.0, 9999, 6000, 76.8, 0.0, None, 'Saint Helena', 'Dependent Territory of the UK', 'Elisabeth II', 3063, 'SH', 'SHN', 'English', 'T', 0.0), ('CAN', 'Canada', 'North America', 'North America', 9970610.0, 1867, 31147000, 79.4, 598862.0, 625626.0, 'Canada', 'Constitutional Monarchy, Federation', 'Elisabeth II', 1822, 'CA', 'CAN', 'English', 'T', 60.4), ('BEL', 'Belgium', 'Europe', 'Western Europe', 30518.0, 1830, 10239000, 77.8, 249704.0, 243948.0, 'België/Belgique', 'Constitutional Monarchy, Federation', 'Albert II', 179, 'BE', 'BEL', 'Dutch', 'T', 59.2), ('ZAF', 'South Africa', 'Africa', 'Southern Africa', 1221037.0, 1910, 40377000, 51.1, 116729.0, 129092.0, 'South Africa', 'Republic', 'Thabo Mbeki', 716, 'ZA', 'ZAF', 'English', 'T', 8.5), ('GUM', 'Guam', 'Oceania', 'Micronesia', 549.0, 9999, 168000, 77.8, 1197.0, 1136.0, 'Guam', 'US Territory', 'George W. Bush', 921, 'GU', 'GUM', 'English', 'T', 37.5), ('NZL', 'New Zealand', 'Oceania', 'Australia and New Zealand', 270534.0, 1907, 3862000, 77.8, 54669.0, 64960.0, 'New Zealand/Aotearoa', 'Constitutional Monarchy', 'Elisabeth II', 3499, 'NZ', 'NZL', 'English', 'T', 87.0)",SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' and T2.IsOfficial = 'T'      UNION SELECT * FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.Language = 'Dutch' and T4.IsOfficial = 'T',"('MHL', 'Marshall Islands', 'Oceania', 'Micronesia', 181.0, 1990, 64000, 65.5, 97.0, None, 'Marshall Islands/Majol', 'Republic', 'Kessai Note', 2507, 'MH', 'MHL', 'English', 'T', 0.0), ('CYM', 'Cayman Islands', 'North America', 'Caribbean', 264.0, 9999, 38000, 78.9, 1263.0, 1186.0, 'Cayman Islands', 'Dependent Territory of the UK', 'Elisabeth II', 553, 'KY', 'CYM', 'English', 'T', 0.0), ('AUS', 'Australia', 'Oceania', 'Australia and New Zealand', 7741220.0, 1901, 18886000, 79.8, 351182.0, 392911.0, 'Australia', 'Constitutional Monarchy, Federation', 'Elisabeth II', 135, 'AU', 'AUS', 'English', 'T', 81.2), ('MNP', 'Northern Mariana Islands', 'Oceania', 'Micronesia', 464.0, 9999, 78000, 75.5, 0.0, None, 'Northern Mariana Islands', 'Commonwealth of the US', 'George W. Bush', 2913, 'MP', 'MNP', 'English', 'T', 4.8), ('UMI', 'United States Minor Outlying Islands', 'Oceania', 'Micronesia/Caribbean', 16.0, 9999, 0, None, 0.0, None, 'United States Minor Outlying Islands', 'Dependent Territory of the US', 'George W. Bush', None, 'UM', 'UMI', 'English', 'T', 0.0), ('USA', 'United States', 'North America', 'North America', 9363520.0, 1776, 278357000, 77.1, 8510700.0, 8110900.0, 'United States', 'Federal Republic', 'George W. Bush', 3813, 'US', 'USA', 'English', 'T', 86.2), ('VIR', 'Virgin Islands, U.S.', 'North America', 'Caribbean', 347.0, 9999, 93000, 78.1, 0.0, None, 'Virgin Islands of the United States', 'US Territory', 'George W. Bush', 4067, 'VI', 'VIR', 'English', 'T', 81.7), ('NIU', 'Niue', 'Oceania', 'Polynesia', 260.0, 9999, 2000, None, 0.0, None, 'Niue', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 2805, 'NU', 'NIU', 'English', 'T', 0.0), ('LSO', 'Lesotho', 'Africa', 'Southern Africa', 30355.0, 1966, 2153000, 50.8, 1061.0, 1161.0, 'Lesotho', 'Constitutional Monarchy', 'Letsie III', 2437, 'LS', 'LSO', 'English', 'T', 0.0), ('TCA', 'Turks and Caicos Islands', 'North America', 'Caribbean', 430.0, 9999, 17000, 73.3, 96.0, None, 'The Turks and Caicos Islands', 'Dependent Territory of the UK', 'Elisabeth II', 3423, 'TC', 'TCA', 'English', 'T', 0.0), ('TON', 'Tonga', 'Oceania', 'Polynesia', 650.0, 1970, 99000, 67.9, 146.0, 170.0, 'Tonga', 'Monarchy', ""Taufa'ahau Tupou IV"", 3334, 'TO', 'TON', 'English', 'T', 0.0), ('IRL', 'Ireland', 'Europe', 'British Islands', 70273.0, 1921, 3775100, 76.8, 75921.0, 73132.0, 'Ireland/Éire', 'Republic', 'Mary McAleese', 1447, 'IE', 'IRL', 'English', 'T', 98.4), ('VUT', 'Vanuatu', 'Oceania', 'Melanesia', 12189.0, 1980, 190000, 60.6, 261.0, 246.0, 'Vanuatu', 'Republic', 'John Bani', 3537, 'VU', 'VUT', 'English', 'T', 28.3), ('VCT', 'Saint Vincent and the Grenadines', 'North America', 'Caribbean', 388.0, 1979, 114000, 72.3, 285.0, None, 'Saint Vincent and the Grenadines', 'Constitutional Monarchy', 'Elisabeth II', 3066, 'VC', 'VCT', 'English', 'T', 0.0), ('NFK', 'Norfolk Island', 'Oceania', 'Australia and New Zealand', 36.0, 9999, 2000, None, 0.0, None, 'Norfolk Island', 'Territory of Australia', 'Elisabeth II', 2806, 'NF', 'NFK', 'English', 'T', 0.0), ('CXR', 'Christmas Island', 'Oceania', 'Australia and New Zealand', 135.0, 9999, 2500, None, 0.0, None, 'Christmas Island', 'Territory of Australia', 'Elisabeth II', 1791, 'CX', 'CXR', 'English', 'T', 0.0), ('AIA', 'Anguilla', 'North America', 'Caribbean', 96.0, 9999, 8000, 76.1, 63.2, None, 'Anguilla', 'Dependent Territory of the UK', 'Elisabeth II', 62, 'AI', 'AIA', 'English', 'T', 0.0), ('MLT', 'Malta', 'Europe', 'Southern Europe', 316.0, 1964, 380200, 77.9, 3512.0, 3338.0, 'Malta', 'Republic', 'Guido de Marco', 2484, 'MT', 'MLT', 'English', 'T', 2.1), ('TUV', 'Tuvalu', 'Oceania', 'Polynesia', 26.0, 1978, 12000, 66.3, 6.0, None, 'Tuvalu', 'Constitutional Monarchy', 'Elisabeth II', 3424, 'TV', 'TUV', 'English', 'T', 0.0), ('BLZ', 'Belize', 'North America', 'Central America', 22696.0, 1981, 241000, 70.9, 630.0, 616.0, 'Belize', 'Constitutional Monarchy', 'Elisabeth II', 185, 'BZ', 'BLZ', 'English', 'T', 50.8), ('BMU', 'Bermuda', 'North America', 'North America', 53.0, 9999, 65000, 76.9, 2328.0, 2190.0, 'Bermuda', 'Dependent Territory of the UK', 'Elisabeth II', 191, 'BM', 'BMU', 'English', 'T', 100.0), ('VGB', 'Virgin Islands, British', 'North America', 'Caribbean', 151.0, 9999, 21000, 75.4, 612.0, 573.0, 'British Virgin Islands', 'Dependent Territory of the UK', 'Elisabeth II', 537, 'VG', 'VGB', 'English', 'T', 0.0), ('MSR', 'Montserrat', 'North America', 'Caribbean', 102.0, 9999, 11000, 78.0, 109.0, None, 'Montserrat', 'Dependent Territory of the UK', 'Elisabeth II', 2697, 'MS', 'MSR', 'English', 'T', 0.0), ('ANT', 'Netherlands Antilles', 'North America', 'Caribbean', 800.0, 9999, 217000, 74.7, 1941.0, None, 'Nederlandse Antillen', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 33, 'AN', 'ANT', 'Dutch', 'T', 0.0), ('ATG', 'Antigua and Barbuda', 'North America', 'Caribbean', 442.0, 1981, 68000, 70.5, 612.0, 584.0, 'Antigua and Barbuda', 'Constitutional Monarchy', 'Elisabeth II', 63, 'AG', 'ATG', 'English', 'T', 0.0), ('LCA', 'Saint Lucia', 'North America', 'Caribbean', 622.0, 1979, 154000, 72.3, 571.0, None, 'Saint Lucia', 'Constitutional Monarchy', 'Elisabeth II', 3065, 'LC', 'LCA', 'English', 'T', 20.0), ('BRB', 'Barbados', 'North America', 'Caribbean', 430.0, 1966, 270000, 73.0, 2223.0, 2186.0, 'Barbados', 'Constitutional Monarchy', 'Elisabeth II', 174, 'BB', 'BRB', 'English', 'T', 0.0), ('PLW', 'Palau', 'Oceania', 'Micronesia', 459.0, 1994, 19000, 68.6, 105.0, None, 'Belau/Palau', 'Republic', 'Kuniwo Nakamura', 2881, 'PW', 'PLW', 'English', 'T', 3.2), ('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, 9999, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW', 'ABW', 'Dutch', 'T', 5.3), ('FLK', 'Falkland Islands', 'South America', 'South America', 12173.0, 9999, 2000, None, 0.0, None, 'Falkland Islands', 'Dependent Territory of the UK', 'Elisabeth II', 763, 'FK', 'FLK', 'English', 'T', 0.0), ('SYC', 'Seychelles', 'Africa', 'Eastern Africa', 455.0, 1976, 77000, 70.4, 536.0, 539.0, 'Sesel/Seychelles', 'Republic', 'France-Albert René', 3206, 'SC', 'SYC', 'English', 'T', 3.8), ('NRU', 'Nauru', 'Oceania', 'Micronesia', 21.0, 1968, 12000, 60.8, 197.0, None, 'Naoero/Nauru', 'Republic', 'Bernard Dowiyogo', 2728, 'NR', 'NRU', 'English', 'T', 7.5), ('ZWE', 'Zimbabwe', 'Africa', 'Eastern Africa', 390757.0, 1980, 11669000, 37.8, 5951.0, 8670.0, 'Zimbabwe', 'Republic', 'Robert G. Mugabe', 4068, 'ZW', 'ZWE', 'English', 'T', 2.2), ('NLD', 'Netherlands', 'Europe', 'Western Europe', 41526.0, 1581, 15864000, 78.3, 371362.0, 360478.0, 'Nederland', 'Constitutional Monarchy', 'Beatrix', 5, 'NL', 'NLD', 'Dutch', 'T', 95.6), ('ASM', 'American Samoa', 'Oceania', 'Polynesia', 199.0, 9999, 68000, 75.1, 334.0, None, 'Amerika Samoa', 'US Territory', 'George W. Bush', 54, 'AS', 'ASM', 'English', 'T', 3.1), ('WSM', 'Samoa', 'Oceania', 'Polynesia', 2831.0, 1962, 180000, 69.2, 141.0, 157.0, 'Samoa', 'Parlementary Monarchy', 'Malietoa Tanumafili II', 3169, 'WS', 'WSM', 'English', 'T', 0.6), ('CCK', 'Cocos (Keeling) Islands', 'Oceania', 'Australia and New Zealand', 14.0, 9999, 600, None, 0.0, None, 'Cocos (Keeling) Islands', 'Territory of Australia', 'Elisabeth II', 2317, 'CC', 'CCK', 'English', 'T', 0.0), ('TKL', 'Tokelau', 'Oceania', 'Polynesia', 12.0, 9999, 2000, None, 0.0, None, 'Tokelau', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 3333, 'TK', 'TKL', 'English', 'T', 0.0), ('HKG', 'Hong Kong', 'Asia', 'Eastern Asia', 1075.0, 9999, 6782000, 79.5, 166448.0, 173610.0, 'Xianggang/Hong Kong', 'Special Administrative Region of China', 'Jiang Zemin', 937, 'HK', 'HKG', 'English', 'T', 2.2), ('GIB', 'Gibraltar', 'Europe', 'Southern Europe', 6.0, 9999, 25000, 79.0, 258.0, None, 'Gibraltar', 'Dependent Territory of the UK', 'Elisabeth II', 915, 'GI', 'GIB', 'English', 'T', 88.9), ('KNA', 'Saint Kitts and Nevis', 'North America', 'Caribbean', 261.0, 1983, 38000, 70.7, 299.0, None, 'Saint Kitts and Nevis', 'Constitutional Monarchy', 'Elisabeth II', 3064, 'KN', 'KNA', 'English', 'T', 0.0), ('GBR', 'United Kingdom', 'Europe', 'British Islands', 242900.0, 1066, 59623400, 77.7, 1378330.0, 1296830.0, 'United Kingdom', 'Constitutional Monarchy', 'Elisabeth II', 456, 'GB', 'GBR', 'English', 'T', 97.3), ('SHN', 'Saint Helena', 'Africa', 'Western Africa', 314.0, 9999, 6000, 76.8, 0.0, None, 'Saint Helena', 'Dependent Territory of the UK', 'Elisabeth II', 3063, 'SH', 'SHN', 'English', 'T', 0.0), ('CAN', 'Canada', 'North America', 'North America', 9970610.0, 1867, 31147000, 79.4, 598862.0, 625626.0, 'Canada', 'Constitutional Monarchy, Federation', 'Elisabeth II', 1822, 'CA', 'CAN', 'English', 'T', 60.4), ('BEL', 'Belgium', 'Europe', 'Western Europe', 30518.0, 1830, 10239000, 77.8, 249704.0, 243948.0, 'België/Belgique', 'Constitutional Monarchy, Federation', 'Albert II', 179, 'BE', 'BEL', 'Dutch', 'T', 59.2), ('ZAF', 'South Africa', 'Africa', 'Southern Africa', 1221037.0, 1910, 40377000, 51.1, 116729.0, 129092.0, 'South Africa', 'Republic', 'Thabo Mbeki', 716, 'ZA', 'ZAF', 'English', 'T', 8.5), ('GUM', 'Guam', 'Oceania', 'Micronesia', 549.0, 9999, 168000, 77.8, 1197.0, 1136.0, 'Guam', 'US Territory', 'George W. Bush', 921, 'GU', 'GUM', 'English', 'T', 37.5), ('NZL', 'New Zealand', 'Oceania', 'Australia and New Zealand', 270534.0, 1907, 3862000, 77.8, 54669.0, 64960.0, 'New Zealand/Aotearoa', 'Constitutional Monarchy', 'Elisabeth II', 3499, 'NZ', 'NZL', 'English', 'T', 87.0)",extra,True,1,
384,world_1,Which language is the most popular on the Asian continent?,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  'Asia' GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1,"('Arabic',)",SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Asia' GROUP BY T1.CountryCode  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
385,world_1,Which languages are spoken by only one country in republic governments?,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  'Republic' GROUP BY T2.Language HAVING COUNT(*)  =  1,"('Bullom-sherbro',), ('Arabic-French-English',), ('Kikuyu',), ('Sardinian',), ('Bengali',), ('Bali',), ('Banda',), ('Shan',), ('Turkmenian',), ('Kono-vai',), ('Irish',), ('Berberi',), ('Luba',), ('Saho',), ('Gagauzi',), ('Comorian-French',), ('Kekchí',), ('Czech',), ('Karakalpak',), ('Haiti Creole',), ('Kissi',), ('Persian',), ('Kavango',), ('Kiga',), ('Pilipino',), ('Ngbaka',), ('Hakka',), ('Soga',), ('Luimbe-nganguela',), ('Ukrainian and Russian',), ('Buryat',), ('Nyaneka-nkhumbi',), ('Tongan',), ('Mbundu',), ('Seselwa',), ('Urdu',), ('Hehet',), ('Bugi',), ('Rapa nui',), ('Kachin',), ('Moba',), ('Songhai',), ('Maltese',), ('Garo',), ('Moravian',), ('Saame',), ('Gusii',), ('Kirundi',), ('Mboshi',), ('Nyakusa',), ('Guaymí',), ('Nyika',), ('Ovambo',), ('Luguru',), ('Hiligaynon',), ('Balante',), ('Oromo',), ('Ngoni',), ('Saraiki',), ('Rundi',), ('Sinaberberi',), ('Mandjia',), ('Bicol',), ('Kalenjin',), ('Walaita',), ('Khoekhoe',), ('Soqutri',), ('Tswa',), ('Kayah',), ('Silesiana',), ('Pampango',), ('Balochi',), ('Maka',), ('Nyamwesi',), ('Mon-khmer',), ('Quiché',), ('Teso',), ('Shambala',), ('Tikar',), ('Comorian-Swahili',), ('Thai',), ('Min',), ('Luchazi',), ('Ami',), ('Lao-Soung',), ('Karen',), ('Mandara',), ('Araucan',), ('Khasi',), ('Northsotho',), ('Herero',), ('Tripuri',), ('Lugbara',), ('Lango',), ('Pangasinan',), ('[South]Mande',), ('Gisu',), ('Kanuri',), ('Dyula',), ('Makua',), ('Susu',), ('Banja',), ('Fon',), ('Adja',), ('Chakma',), ('Haya',), ('Atayal',), ('Busansi',), ('Nahua',), ('Arabic-French',), ('Songhai-zerma',), ('Assyrian',), ('Venda',), ('Hebrew',), ('Kabyé',), ('Chuabo',), ('Comorian-Arabic',), ('Grebo',), ('Batakki',), ('Waray-waray',), ('Senufo and Minianka',), ('Bhojpuri',), ('Hadareb',), ('Swedish',), ('Somba',), ('Yao',), ('Zande',), ('Madura',), ('Temne',), ('Zulu',), ('Caprivi',), ('Turkana',), ('Limba',), ('Marendje',), ('Mixed Languages',), ('Dagara',), ('Makonde',), ('Javanese',), ('Xhosa',), ('Boa',), ('Gio',), ('Pashto',), ('Mam',), ('Bariba',), ('Kamba',), ('Bilin',), ('Ane',), ('Osseetti',), ('Bambara',), ('Ovimbundu',), ('Punjabi',), ('Korean',), ('Masana',), ('Amhara',), ('Latvian',), ('Tigre',), ('Nkole',), ('Maguindanao',), ('Hindko',), ('Ngala and Bangi',), ('Czech and Moravian',), ('Dariganga',), ('Ilocano',), ('Mbum',), ('Ambo',), ('Comorian-madagassi',), ('Luhya',), ('Philippene Languages',), ('Kanem-bornu',), ('Nauru',), ('Cakchiquel',), ('Bamileke-bamum',), ('Nama',), ('Mende',), ('Bajad',), ('Singali',), ('Duala',), ('Chin',), ('Marma',), ('Comorian',), ('Nsenga',), ('Acholi',), ('Mandarin Chinese',), ('Tukulor',), ('Abhyasi',), ('Watyi',), ('Dorbet',), ('Santhali',), ('Hassaniya',), ('Marathi',), ('Sena',), ('Marshallese',), ('Brahui',), ('Serer',), ('Kotokoli',), ('Ronga',), ('Ha',), ('Sumo',), ('Zenaga',), ('Bassa',), ('Garifuna',), ('Lao',), ('Ganda',), ('Luo',), ('Meru',), ('Gbaya',), ('Dhivehi',), ('Swazi',), ('Sindhi',), ('Sranantonga',), ('Kirgiz',), ('Palau',), ('Naudemba',), ('Sunda',), ('Punu',), ('Burmese',), ('Fijian',), ('Gorane',), ('Mongolian',), ('Chaga and Pare',), ('Chewa',), ('Maranao',), ('Embera',), ('Kuranko',), ('Masai',), ('Bemba',), ('Southsotho',), ('Aizo',), ('Rakhine',), ('Mongo',), ('Tandjile',), ('Chichewa',), ('Bubi',), ('Bislama',), ('Paiwan',), ('Sidamo',), ('Sango',), ('Lozi',), ('Friuli',), ('Georgiana',), ('Cuna',), ('Mandyako',), ('Mon',), ('Icelandic',), ('Gurage',), ('Punu-sira-nzebi',), ('Minangkabau',), ('Hausa',), ('Mpongwe',), ('Cebuano',), ('Mano',), ('Hadjarai',), ('Gogo',), ('Mayo-kebbi',), ('Ga-adangme',), ('Ouaddai',), ('Luvale',), ('Gur',)",SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.GovernmentForm = 'Republic' GROUP BY T1.CountryCode HAVING count( *) = 1,,hard,False,0,
386,world_1,Find the city with the largest population that uses English.,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  'English' ORDER BY T1.Population DESC LIMIT 1","('New York', 8008278)","SELECT T1.Name, T1.Population FROM city AS T1 JOIN country AS T13 ON T1.CountryCode = T13.Code JOIN countrylanguage AS T2 ON T13.Code = T2.CountryCode WHERE T2.Language = 'English'   ORDER BY T1.Population DESC LIMIT 1","('New York', 8008278)",extra,True,1,
387,world_1,"Find the name, population and expected life length of asian country with the largest area?","SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  'Asia' ORDER BY SurfaceArea DESC LIMIT 1","('China', 1277558000, 71.4)","SELECT T1.Name, T1.Population, T1.LifeExpectancy FROM country AS T1 WHERE T1.Continent = 'Asia'   ORDER BY T1.SurfaceArea DESC LIMIT 1","('China', 1277558000, 71.4)",hard,True,1,
388,world_1,What is average life expectancy in the countries where English is not the official language?,SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English' AND T2.IsOfficial  =  'T'),"(65.482702702703,)",SELECT avg( T1.LifeExpectancy) FROM country AS T1 WHERE T1.Name NOT IN (SELECT T22.Name FROM country AS T22 JOIN countrylanguage AS T23 ON T22.Code = T23.CountryCode WHERE T23.Language = 'English' and T23.IsOfficial = 'T'       ),"(65.482702702703,)",extra,True,1,
389,world_1,What is the total number of people living in the nations that do not use English?,SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'English'),"(5451331150,)",SELECT sum( T1.Population) FROM country AS T1 WHERE T1.Name NOT IN (SELECT T22.Name FROM country AS T22 JOIN countrylanguage AS T23 ON T22.Code = T23.CountryCode WHERE T23.Language = 'English'       ),"(5451331150,)",extra,True,1,
390,world_1,What is the official language spoken in the country whose head of state is Beatrix?,SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  'Beatrix' AND T2.IsOfficial  =  'T',"('Dutch',), ('Dutch',), ('Papiamento',), ('Dutch',)",SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.HeadOfState = 'Beatrix' and T1.IsOfficial = 'T',"('Dutch',), ('Dutch',), ('Papiamento',), ('Dutch',)",medium,True,1,
391,world_1,What is the total number of unique official languages spoken in the countries that are founded before 1930?,SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  'T',"(40,)",SELECT DISTINCT count(DISTINCT T1.Language) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.IndepYear < 1930 and T1.IsOfficial = 'T',"(40,)",medium,True,1,
392,world_1,What are the countries that have greater surface area than any country in Europe?,SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  'Europe'),"('San Marino',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Bolivia',), ('Brazil',), ('Barbados',), ('Brunei',), ('Bhutan',), ('Botswana',), ('Central African Republic',), ('Canada',), ('Switzerland',), ('Chile',), ('China',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Colombia',), ('Comoros',), ('Cape Verde',), ('Costa Rica',), ('Cuba',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Denmark',), ('Dominican Republic',), ('Algeria',), ('Ecuador',), ('Egypt',), ('Eritrea',), ('Spain',), ('Estonia',), ('Ethiopia',), ('Finland',), ('Fiji Islands',), ('France',), ('Micronesia, Federated States of',), ('Gabon',), ('United Kingdom',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Greece',), ('Grenada',), ('Guatemala',), ('Guyana',), ('Honduras',), ('Croatia',), ('Haiti',), ('Hungary',), ('Indonesia',), ('India',), ('Ireland',), ('Iran',), ('Iraq',), ('Iceland',), ('Israel',), ('Italy',), ('Jamaica',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Liechtenstein',), ('Sri Lanka',), ('Lesotho',), ('Lithuania',), ('Luxembourg',), ('Latvia',), ('Morocco',), ('Monaco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Mexico',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Myanmar',), ('Mongolia',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nicaragua',), ('Netherlands',), ('Norway',), ('Nepal',), ('Nauru',), ('New Zealand',), ('Oman',), ('Pakistan',), ('Panama',), ('Peru',), ('Philippines',), ('Palau',), ('Papua New Guinea',), ('Poland',), ('North Korea',), ('Portugal',), ('Paraguay',), ('Qatar',), ('Romania',), ('Russian Federation',), ('Rwanda',), ('Saudi Arabia',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('El Salvador',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Sweden',), ('Swaziland',), ('Seychelles',), ('Syria',), ('Chad',), ('Togo',), ('Thailand',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Turkey',), ('Tuvalu',), ('Taiwan',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uruguay',), ('United States',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Venezuela',), ('Vietnam',), ('Vanuatu',), ('Samoa',), ('Yemen',), ('Yugoslavia',), ('Afghanistan',), ('Angola',), ('Albania',), ('Andorra',), ('United Arab Emirates',), ('Argentina',), ('Armenia',), ('South Africa',), ('Antigua and Barbuda',), ('Australia',), ('Austria',), ('Azerbaijan',), ('Burundi',), ('Belgium',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bulgaria',), ('Bahrain',), ('Bahamas',), ('Zambia',), ('Zimbabwe',), ('Bermuda',), ('Bouvet Island',), ('Cocos (Keeling) Islands',), ('Cook Islands',), ('Christmas Island',), ('Cayman Islands',), ('Western Sahara',), ('Falkland Islands',), ('Faroe Islands',), ('Gibraltar',), ('Guadeloupe',), ('Greenland',), ('French Guiana',), ('Guam',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('British Indian Ocean Territory',), ('Macao',), ('Northern Mariana Islands',), ('Montserrat',), ('Martinique',), ('Mayotte',), ('New Caledonia',), ('Norfolk Island',), ('Niue',), ('Pitcairn',), ('Puerto Rico',), ('Palestine',), ('French Polynesia',), ('Réunion',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Saint Pierre and Miquelon',), ('Turks and Caicos Islands',), ('Tokelau',), ('East Timor',), ('United States Minor Outlying Islands',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Wallis and Futuna',), ('Aruba',), ('Anguilla',), ('Netherlands Antilles',), ('American Samoa',), ('Antarctica',), ('French Southern territories',)",SELECT T1.Name FROM country AS T1 WHERE T1.SurfaceArea > (SELECT min( T22.SurfaceArea) FROM country AS T22 WHERE T22.Continent = 'Europe'       ),"('San Marino',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Bolivia',), ('Brazil',), ('Barbados',), ('Brunei',), ('Bhutan',), ('Botswana',), ('Central African Republic',), ('Canada',), ('Switzerland',), ('Chile',), ('China',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Colombia',), ('Comoros',), ('Cape Verde',), ('Costa Rica',), ('Cuba',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Denmark',), ('Dominican Republic',), ('Algeria',), ('Ecuador',), ('Egypt',), ('Eritrea',), ('Spain',), ('Estonia',), ('Ethiopia',), ('Finland',), ('Fiji Islands',), ('France',), ('Micronesia, Federated States of',), ('Gabon',), ('United Kingdom',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Greece',), ('Grenada',), ('Guatemala',), ('Guyana',), ('Honduras',), ('Croatia',), ('Haiti',), ('Hungary',), ('Indonesia',), ('India',), ('Ireland',), ('Iran',), ('Iraq',), ('Iceland',), ('Israel',), ('Italy',), ('Jamaica',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Liechtenstein',), ('Sri Lanka',), ('Lesotho',), ('Lithuania',), ('Luxembourg',), ('Latvia',), ('Morocco',), ('Monaco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Mexico',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Myanmar',), ('Mongolia',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nicaragua',), ('Netherlands',), ('Norway',), ('Nepal',), ('Nauru',), ('New Zealand',), ('Oman',), ('Pakistan',), ('Panama',), ('Peru',), ('Philippines',), ('Palau',), ('Papua New Guinea',), ('Poland',), ('North Korea',), ('Portugal',), ('Paraguay',), ('Qatar',), ('Romania',), ('Russian Federation',), ('Rwanda',), ('Saudi Arabia',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('El Salvador',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Sweden',), ('Swaziland',), ('Seychelles',), ('Syria',), ('Chad',), ('Togo',), ('Thailand',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Turkey',), ('Tuvalu',), ('Taiwan',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uruguay',), ('United States',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Venezuela',), ('Vietnam',), ('Vanuatu',), ('Samoa',), ('Yemen',), ('Yugoslavia',), ('Afghanistan',), ('Angola',), ('Albania',), ('Andorra',), ('United Arab Emirates',), ('Argentina',), ('Armenia',), ('South Africa',), ('Antigua and Barbuda',), ('Australia',), ('Austria',), ('Azerbaijan',), ('Burundi',), ('Belgium',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bulgaria',), ('Bahrain',), ('Bahamas',), ('Zambia',), ('Zimbabwe',), ('Bermuda',), ('Bouvet Island',), ('Cocos (Keeling) Islands',), ('Cook Islands',), ('Christmas Island',), ('Cayman Islands',), ('Western Sahara',), ('Falkland Islands',), ('Faroe Islands',), ('Gibraltar',), ('Guadeloupe',), ('Greenland',), ('French Guiana',), ('Guam',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('British Indian Ocean Territory',), ('Macao',), ('Northern Mariana Islands',), ('Montserrat',), ('Martinique',), ('Mayotte',), ('New Caledonia',), ('Norfolk Island',), ('Niue',), ('Pitcairn',), ('Puerto Rico',), ('Palestine',), ('French Polynesia',), ('Réunion',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Saint Pierre and Miquelon',), ('Turks and Caicos Islands',), ('Tokelau',), ('East Timor',), ('United States Minor Outlying Islands',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Wallis and Futuna',), ('Aruba',), ('Anguilla',), ('Netherlands Antilles',), ('American Samoa',), ('Antarctica',), ('French Southern territories',)",hard,True,1,
393,world_1,What are the African countries that have a  population less than any country in Asia?,SELECT Name FROM country WHERE Continent  =  'Africa'  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  'Asia'),"('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Djibouti',), ('Algeria',), ('Egypt',), ('Eritrea',), ('Ethiopia',), ('Gabon',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Kenya',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Lesotho',), ('Morocco',), ('Madagascar',), ('Mali',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Namibia',), ('Niger',), ('Nigeria',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tunisia',), ('Tanzania',), ('Uganda',), ('Angola',), ('South Africa',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Zambia',), ('Zimbabwe',), ('Western Sahara',), ('British Indian Ocean Territory',), ('Mayotte',), ('Réunion',), ('Saint Helena',)",SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Africa' and T1.Population < (SELECT max( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Asia'       ),"('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Djibouti',), ('Algeria',), ('Egypt',), ('Eritrea',), ('Ethiopia',), ('Gabon',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Kenya',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Lesotho',), ('Morocco',), ('Madagascar',), ('Mali',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Namibia',), ('Niger',), ('Nigeria',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tunisia',), ('Tanzania',), ('Uganda',), ('Angola',), ('South Africa',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Zambia',), ('Zimbabwe',), ('Western Sahara',), ('British Indian Ocean Territory',), ('Mayotte',), ('Réunion',), ('Saint Helena',)",extra,True,1,
394,world_1,Which African countries have a smaller population than that of any country in Asia?,SELECT Name FROM country WHERE Continent  =  'Africa'  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  'Asia'),"('Sao Tome and Principe',), ('Seychelles',), ('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',)",SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Africa' and T1.Population < (SELECT min( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Asia'       ),"('Sao Tome and Principe',), ('Seychelles',), ('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',)",extra,True,1,
395,world_1,Which Asian countries have a population that is larger than any country in Africa?,SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  'Africa'),"('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',), ('Bangladesh',)",SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.Population > (SELECT max( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Africa'       ),"('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',), ('Bangladesh',)",extra,True,1,
396,world_1,What are the Asian countries which have a population larger than that of any country in Africa?,SELECT Name FROM country WHERE Continent  =  'Asia'  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  'Africa'),"('Brunei',), ('Bhutan',), ('China',), ('Cyprus',), ('Georgia',), ('Indonesia',), ('India',), ('Iran',), ('Iraq',), ('Israel',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kyrgyzstan',), ('Cambodia',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Sri Lanka',), ('Maldives',), ('Myanmar',), ('Mongolia',), ('Malaysia',), ('Nepal',), ('Oman',), ('Pakistan',), ('Philippines',), ('North Korea',), ('Qatar',), ('Saudi Arabia',), ('Singapore',), ('Syria',), ('Thailand',), ('Tajikistan',), ('Turkmenistan',), ('Turkey',), ('Taiwan',), ('Uzbekistan',), ('Vietnam',), ('Yemen',), ('Afghanistan',), ('United Arab Emirates',), ('Armenia',), ('Azerbaijan',), ('Bangladesh',), ('Bahrain',), ('Hong Kong',), ('Macao',), ('Palestine',), ('East Timor',)",SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Asia' and T1.Population > (SELECT min( T22.Population) FROM country AS T22 WHERE T22.Continent = 'Africa'       ),"('Brunei',), ('Bhutan',), ('China',), ('Cyprus',), ('Georgia',), ('Indonesia',), ('India',), ('Iran',), ('Iraq',), ('Israel',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kyrgyzstan',), ('Cambodia',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Sri Lanka',), ('Maldives',), ('Myanmar',), ('Mongolia',), ('Malaysia',), ('Nepal',), ('Oman',), ('Pakistan',), ('Philippines',), ('North Korea',), ('Qatar',), ('Saudi Arabia',), ('Singapore',), ('Syria',), ('Thailand',), ('Tajikistan',), ('Turkmenistan',), ('Turkey',), ('Taiwan',), ('Uzbekistan',), ('Vietnam',), ('Yemen',), ('Afghanistan',), ('United Arab Emirates',), ('Armenia',), ('Azerbaijan',), ('Bangladesh',), ('Bahrain',), ('Hong Kong',), ('Macao',), ('Palestine',), ('East Timor',)",extra,True,1,
397,world_1,What are the country codes for countries that do not speak English?,SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English',"('MDG',), ('PSE',), ('COG',), ('CAF',), ('GMB',), ('SOM',), ('URY',), ('BEL',), ('MRT',), ('BTN',), ('CZE',), ('ERI',), ('SVN',), ('LTU',), ('CIV',), ('PHL',), ('ESP',), ('TUN',), ('GHA',), ('SGP',), ('JAM',), ('BLR',), ('GUF',), ('TJK',), ('NGA',), ('MUS',), ('LBY',), ('CRI',), ('TKM',), ('ROM',), ('AGO',), ('DMA',), ('BOL',), ('GLP',), ('MWI',), ('IRQ',), ('KHM',), ('IND',), ('EGY',), ('CMR',), ('CHL',), ('GTM',), ('GEO',), ('ARM',), ('RUS',), ('NAM',), ('LVA',), ('BGD',), ('COD',), ('KAZ',), ('FIN',), ('IRN',), ('GRD',), ('PAK',), ('ALB',), ('PAN',), ('DZA',), ('BDI',), ('COL',), ('PRK',), ('ARE',), ('PYF',), ('FRA',), ('CHN',), ('LKA',), ('BWA',), ('MKD',), ('WLF',), ('PCN',), ('GNQ',), ('CHE',), ('KOR',), ('PER',), ('NCL',), ('KIR',), ('TGO',), ('REU',), ('YEM',), ('HND',), ('SAU',), ('NER',), ('KEN',), ('SPM',), ('COM',), ('UZB',), ('TCD',), ('PRY',), ('VAT',), ('TZA',), ('NLD',), ('VEN',), ('CUB',), ('HUN',), ('AUT',), ('ISR',), ('MMR',), ('EST',), ('CPV',), ('FSM',), ('VNM',), ('FJI',), ('LBN',), ('DJI',), ('SEN',), ('SUR',), ('OMN',), ('TWN',), ('HRV',), ('GRC',), ('LBR',), ('GNB',), ('MYT',), ('HTI',), ('NIC',), ('LAO',), ('YUG',), ('TMP',), ('DOM',), ('LIE',), ('PRT',), ('MTQ',), ('SLB',), ('AZE',), ('FRO',), ('ZMB',), ('MDA',), ('AND',), ('NPL',), ('SWZ',), ('GUY',), ('GRL',), ('BGR',), ('ARG',), ('LUX',), ('BIH',), ('BHS',), ('PNG',), ('BFA',), ('KGZ',), ('STP',), ('UKR',), ('THA',), ('JOR',), ('GIN',), ('MLI',), ('POL',), ('TUR',), ('SWE',), ('SVK',), ('DEU',), ('MOZ',), ('IDN',), ('CYP',), ('SJM',), ('SLV',), ('SLE',), ('GAB',), ('UGA',), ('MAR',), ('SYR',), ('ESH',), ('BRA',), ('AFG',), ('SDN',), ('RWA',), ('ECU',), ('ITA',), ('BEN',), ('MNG',), ('SMR',), ('MEX',), ('QAT',), ('ETH',)",SELECT T1.CountryCode FROM countrylanguage AS T1        EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = 'English',"('MDG',), ('PSE',), ('COG',), ('CAF',), ('GMB',), ('SOM',), ('URY',), ('BEL',), ('MRT',), ('BTN',), ('CZE',), ('ERI',), ('SVN',), ('LTU',), ('CIV',), ('PHL',), ('ESP',), ('TUN',), ('GHA',), ('SGP',), ('JAM',), ('BLR',), ('GUF',), ('TJK',), ('NGA',), ('MUS',), ('LBY',), ('CRI',), ('TKM',), ('ROM',), ('AGO',), ('DMA',), ('BOL',), ('GLP',), ('MWI',), ('IRQ',), ('KHM',), ('IND',), ('EGY',), ('CMR',), ('CHL',), ('GTM',), ('GEO',), ('ARM',), ('RUS',), ('NAM',), ('LVA',), ('BGD',), ('COD',), ('KAZ',), ('FIN',), ('IRN',), ('GRD',), ('PAK',), ('ALB',), ('PAN',), ('DZA',), ('BDI',), ('COL',), ('PRK',), ('ARE',), ('PYF',), ('FRA',), ('CHN',), ('LKA',), ('BWA',), ('MKD',), ('WLF',), ('PCN',), ('GNQ',), ('CHE',), ('KOR',), ('PER',), ('NCL',), ('KIR',), ('TGO',), ('REU',), ('YEM',), ('HND',), ('SAU',), ('NER',), ('KEN',), ('SPM',), ('COM',), ('UZB',), ('TCD',), ('PRY',), ('VAT',), ('TZA',), ('NLD',), ('VEN',), ('CUB',), ('HUN',), ('AUT',), ('ISR',), ('MMR',), ('EST',), ('CPV',), ('FSM',), ('VNM',), ('FJI',), ('LBN',), ('DJI',), ('SEN',), ('SUR',), ('OMN',), ('TWN',), ('HRV',), ('GRC',), ('LBR',), ('GNB',), ('MYT',), ('HTI',), ('NIC',), ('LAO',), ('YUG',), ('TMP',), ('DOM',), ('LIE',), ('PRT',), ('MTQ',), ('SLB',), ('AZE',), ('FRO',), ('ZMB',), ('MDA',), ('AND',), ('NPL',), ('SWZ',), ('GUY',), ('GRL',), ('BGR',), ('ARG',), ('LUX',), ('BIH',), ('BHS',), ('PNG',), ('BFA',), ('KGZ',), ('STP',), ('UKR',), ('THA',), ('JOR',), ('GIN',), ('MLI',), ('POL',), ('TUR',), ('SWE',), ('SVK',), ('DEU',), ('MOZ',), ('IDN',), ('CYP',), ('SJM',), ('SLV',), ('SLE',), ('GAB',), ('UGA',), ('MAR',), ('SYR',), ('ESH',), ('BRA',), ('AFG',), ('SDN',), ('RWA',), ('ECU',), ('ITA',), ('BEN',), ('MNG',), ('SMR',), ('MEX',), ('QAT',), ('ETH',)",hard,True,1,
398,world_1,What are the country codes of countries where people use languages other than English?,SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != 'English',"('MDG',), ('PLW',), ('PSE',), ('COG',), ('CAF',), ('GMB',), ('SOM',), ('HKG',), ('URY',), ('BEL',), ('MRT',), ('BTN',), ('CZE',), ('ERI',), ('SVN',), ('LTU',), ('CIV',), ('PHL',), ('MLT',), ('GUM',), ('ESP',), ('TUN',), ('GHA',), ('SGP',), ('JAM',), ('BLR',), ('BRB',), ('GUF',), ('MYS',), ('TJK',), ('VIR',), ('NGA',), ('MUS',), ('LBY',), ('ATG',), ('TON',), ('CRI',), ('ZWE',), ('TKM',), ('MDV',), ('NOR',), ('ROM',), ('DNK',), ('BLZ',), ('AGO',), ('DMA',), ('BOL',), ('GLP',), ('MWI',), ('IRQ',), ('WSM',), ('KHM',), ('IND',), ('EGY',), ('CMR',), ('CHL',), ('GTM',), ('GEO',), ('ARM',), ('RUS',), ('NAM',), ('MAC',), ('LVA',), ('BGD',), ('COD',), ('KAZ',), ('FIN',), ('IRN',), ('SYC',), ('GRD',), ('PAK',), ('ALB',), ('PAN',), ('BRN',), ('NIU',), ('DZA',), ('BDI',), ('COL',), ('PRK',), ('ARE',), ('AUS',), ('PYF',), ('FRA',), ('CHN',), ('ZAF',), ('TTO',), ('LKA',), ('BWA',), ('MKD',), ('WLF',), ('PCN',), ('GNQ',), ('CHE',), ('KOR',), ('PER',), ('NCL',), ('MCO',), ('KIR',), ('TGO',), ('REU',), ('YEM',), ('HND',), ('SAU',), ('NER',), ('KEN',), ('JPN',), ('SPM',), ('COM',), ('UZB',), ('TCD',), ('PRY',), ('NRU',), ('ASM',), ('VAT',), ('TZA',), ('NLD',), ('VEN',), ('CUB',), ('HUN',), ('AUT',), ('IRL',), ('GIB',), ('ISR',), ('GBR',), ('MMR',), ('EST',), ('KNA',), ('CPV',), ('FSM',), ('VNM',), ('FJI',), ('MHL',), ('LBN',), ('CCK',), ('VUT',), ('DJI',), ('SEN',), ('CXR',), ('SUR',), ('OMN',), ('TWN',), ('HRV',), ('GRC',), ('LBR',), ('GNB',), ('MYT',), ('HTI',), ('NIC',), ('LAO',), ('YUG',), ('BHR',), ('TMP',), ('DOM',), ('LIE',), ('ABW',), ('PRT',), ('MTQ',), ('SLB',), ('AZE',), ('FRO',), ('ZMB',), ('MDA',), ('AND',), ('LSO',), ('NPL',), ('SWZ',), ('GUY',), ('GRL',), ('BGR',), ('ARG',), ('USA',), ('LUX',), ('VCT',), ('BIH',), ('TUV',), ('BHS',), ('PNG',), ('BFA',), ('KGZ',), ('COK',), ('STP',), ('NZL',), ('UKR',), ('THA',), ('JOR',), ('KWT',), ('GIN',), ('MLI',), ('POL',), ('TUR',), ('SWE',), ('SVK',), ('DEU',), ('MOZ',), ('IDN',), ('CYP',), ('ANT',), ('SJM',), ('SLV',), ('SLE',), ('GAB',), ('UGA',), ('MAR',), ('SYR',), ('ESH',), ('CAN',), ('TKL',), ('BRA',), ('AFG',), ('SDN',), ('RWA',), ('ISL',), ('ECU',), ('PRI',), ('MNP',), ('ITA',), ('BEN',), ('LCA',), ('MNG',), ('SMR',), ('MEX',), ('QAT',), ('ETH',)",SELECT DISTINCT T1.CountryCode FROM countrylanguage AS T1 WHERE T1.Language != 'English',"('MDG',), ('PLW',), ('PSE',), ('COG',), ('CAF',), ('GMB',), ('SOM',), ('HKG',), ('URY',), ('BEL',), ('MRT',), ('BTN',), ('CZE',), ('ERI',), ('SVN',), ('LTU',), ('CIV',), ('PHL',), ('MLT',), ('GUM',), ('ESP',), ('TUN',), ('GHA',), ('SGP',), ('JAM',), ('BLR',), ('BRB',), ('GUF',), ('MYS',), ('TJK',), ('VIR',), ('NGA',), ('MUS',), ('LBY',), ('ATG',), ('TON',), ('CRI',), ('ZWE',), ('TKM',), ('MDV',), ('NOR',), ('ROM',), ('DNK',), ('BLZ',), ('AGO',), ('DMA',), ('BOL',), ('GLP',), ('MWI',), ('IRQ',), ('WSM',), ('KHM',), ('IND',), ('EGY',), ('CMR',), ('CHL',), ('GTM',), ('GEO',), ('ARM',), ('RUS',), ('NAM',), ('MAC',), ('LVA',), ('BGD',), ('COD',), ('KAZ',), ('FIN',), ('IRN',), ('SYC',), ('GRD',), ('PAK',), ('ALB',), ('PAN',), ('BRN',), ('NIU',), ('DZA',), ('BDI',), ('COL',), ('PRK',), ('ARE',), ('AUS',), ('PYF',), ('FRA',), ('CHN',), ('ZAF',), ('TTO',), ('LKA',), ('BWA',), ('MKD',), ('WLF',), ('PCN',), ('GNQ',), ('CHE',), ('KOR',), ('PER',), ('NCL',), ('MCO',), ('KIR',), ('TGO',), ('REU',), ('YEM',), ('HND',), ('SAU',), ('NER',), ('KEN',), ('JPN',), ('SPM',), ('COM',), ('UZB',), ('TCD',), ('PRY',), ('NRU',), ('ASM',), ('VAT',), ('TZA',), ('NLD',), ('VEN',), ('CUB',), ('HUN',), ('AUT',), ('IRL',), ('GIB',), ('ISR',), ('GBR',), ('MMR',), ('EST',), ('KNA',), ('CPV',), ('FSM',), ('VNM',), ('FJI',), ('MHL',), ('LBN',), ('CCK',), ('VUT',), ('DJI',), ('SEN',), ('CXR',), ('SUR',), ('OMN',), ('TWN',), ('HRV',), ('GRC',), ('LBR',), ('GNB',), ('MYT',), ('HTI',), ('NIC',), ('LAO',), ('YUG',), ('BHR',), ('TMP',), ('DOM',), ('LIE',), ('ABW',), ('PRT',), ('MTQ',), ('SLB',), ('AZE',), ('FRO',), ('ZMB',), ('MDA',), ('AND',), ('LSO',), ('NPL',), ('SWZ',), ('GUY',), ('GRL',), ('BGR',), ('ARG',), ('USA',), ('LUX',), ('VCT',), ('BIH',), ('TUV',), ('BHS',), ('PNG',), ('BFA',), ('KGZ',), ('COK',), ('STP',), ('NZL',), ('UKR',), ('THA',), ('JOR',), ('KWT',), ('GIN',), ('MLI',), ('POL',), ('TUR',), ('SWE',), ('SVK',), ('DEU',), ('MOZ',), ('IDN',), ('CYP',), ('ANT',), ('SJM',), ('SLV',), ('SLE',), ('GAB',), ('UGA',), ('MAR',), ('SYR',), ('ESH',), ('CAN',), ('TKL',), ('BRA',), ('AFG',), ('SDN',), ('RWA',), ('ISL',), ('ECU',), ('PRI',), ('MNP',), ('ITA',), ('BEN',), ('LCA',), ('MNG',), ('SMR',), ('MEX',), ('QAT',), ('ETH',)",easy,True,1,
399,world_1,What are the codes of the countries that do not speak English and whose government forms are not Republic?,SELECT Code FROM country WHERE GovernmentForm != 'Republic' EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  'English',"('MDG',), ('VAT',), ('NLD',), ('VEN',), ('PSE',), ('CUB',), ('AUT',), ('IOT',), ('BEL',), ('BTN',), ('FSM',), ('VNM',), ('ESP',), ('JAM',), ('OMN',), ('HMD',), ('SGS',), ('ATF',), ('GUF',), ('MYT',), ('YUG',), ('TMP',), ('NGA',), ('LIE',), ('LBY',), ('MTQ',), ('SLB',), ('AZE',), ('FRO',), ('BVT',), ('AND',), ('GLP',), ('ATA',), ('KHM',), ('NPL',), ('IND',), ('SWZ',), ('GRL',), ('ARG',), ('LUX',), ('RUS',), ('BIH',), ('BHS',), ('IRN',), ('PNG',), ('GRD',), ('THA',), ('JOR',), ('SWE',), ('PRK',), ('DEU',), ('SJM',), ('ARE',), ('PYF',), ('CHN',), ('MAR',), ('ESH',), ('BRA',), ('WLF',), ('PCN',), ('AFG',), ('SDN',), ('CHE',), ('NCL',), ('REU',), ('SAU',), ('SPM',), ('MEX',), ('QAT',)",SELECT T1.Code FROM country AS T1 WHERE T1.GovernmentForm != 'Republic'       EXCEPT SELECT T2.CountryCode FROM countrylanguage AS T2 WHERE T2.Language = 'English',"('MDG',), ('VAT',), ('NLD',), ('VEN',), ('PSE',), ('CUB',), ('AUT',), ('IOT',), ('BEL',), ('BTN',), ('FSM',), ('VNM',), ('ESP',), ('JAM',), ('OMN',), ('HMD',), ('SGS',), ('ATF',), ('GUF',), ('MYT',), ('YUG',), ('TMP',), ('NGA',), ('LIE',), ('LBY',), ('MTQ',), ('SLB',), ('AZE',), ('FRO',), ('BVT',), ('AND',), ('GLP',), ('ATA',), ('KHM',), ('NPL',), ('IND',), ('SWZ',), ('GRL',), ('ARG',), ('LUX',), ('RUS',), ('BIH',), ('BHS',), ('IRN',), ('PNG',), ('GRD',), ('THA',), ('JOR',), ('SWE',), ('PRK',), ('DEU',), ('SJM',), ('ARE',), ('PYF',), ('CHN',), ('MAR',), ('ESH',), ('BRA',), ('WLF',), ('PCN',), ('AFG',), ('SDN',), ('CHE',), ('NCL',), ('REU',), ('SAU',), ('SPM',), ('MEX',), ('QAT',)",hard,True,1,
400,world_1,Which cities are in European countries where English is not the official language?,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),"('Würzburg',), ('Nantes',), ('Novouralsk',), ('Tarragona',), ('Alkmaar',), ('Jessentuki',), ('Tambov',), ('Mahatškala',), ('Rennes',), ('Zenica',), ('Trondheim',), ('Bialystok',), ('Nancy',), ('Gomel',), ('Lyon',), ('Vicenza',), ('Molodetšno',), ('Kostjantynivka',), ('Apeldoorn',), ('Sotši',), ('Aalborg',), ('Kansk',), ('Himki',), ('San Marino',), ('Ancona',), ('Vladikavkaz',), ('Berdjansk',), ('Noginsk',), ('Craiova',), ('Dordrecht',), ('Vladivostok',), ('Galati',), ('Andorra la Vella',), ('Syrakusa',), ('Salavat',), ('Pultava [Poltava]',), ('Toulouse',), ('Baia Mare',), ('Jenakijeve',), ('Tulcea',), ('Köln',), ('Szeged',), ('Perugia',), ('Saransk',), ('Neftekamsk',), ('Reutlingen',), ('Donostia-San Sebastián',), ('Lida',), ('Moscow',), ('Lünen',), ('Zwolle',), ('Düren',), ('Smolensk',), ('Cluj-Napoca',), ('Nice',), ('Dos Hermanas',), ('Lugansk',), ('Prešov',), ('Orehovo-Zujevo',), ('Schwerin',), ('Ludwigshafen am Rhein',), ('Jerez de la Frontera',), ('Kraków',), ('Târgoviste',), ('Buzau',), ('Chisinau',), ('Voronez',), ('Lahti',), ('Tilburg',), ('Mukatševe',), ('Oberhausen',), ('Oslo',), ('Wien',), ('Antwerpen',), ('Bari',), ('Haarlemmermeer',), ('Tychy',), ('Petroskoi',), ('Santa Cruz de Tenerife',), ('Habarovsk',), ('Juzno-Sahalinsk',), ('Alcalá de Henares',), ('Serpuhov',), ('Bern',), ('Brjansk',), ('Prizren',), ('Novorossijsk',), ('Salamanca',), ('Piacenza',), ('Nîmes',), ('St-Étienne',), ('Lublin',), ('Arzamas',), ('Lille',), ('Sergijev Posad',), ('Klagenfurt',), ('Santander',), ('Salzburg',), ('Serravalle',), ('Delft',), ('Huelva',), ('Kostroma',), ('Tarnów',), ('Norrköping',), ('Olsztyn',), ('Volgograd',), ('Padova',), ('Oulu',), ('Oktjabrski',), ('Sjeverodonetsk',), ('Peristerion',), ('Kiseljovsk',), ('Székesfehérvár',), ('Kecskemét',), ('Bacau',), ('Catanzaro',), ('Novotroitsk',), ('Derbent',), ('Tours',), ('Burgos',), ('Perm',), ('Lecce',), ('Bielefeld',), ('Santa Coloma de Gramenet',), ('Bender (Tîghina)',), ('Ploiesti',), ('Surgut',), ('Pisa',), ('Brescia',), ('Ceské Budejovice',), ('Usolje-Sibirskoje',), ('Gera',), ('Bucuresti',), ('Besançon',), ('Pamplona [Iruña]',), ('Chemnitz',), ('Suceava',), ('Trieste',), ('Penza',), ('Gelsenkirchen',), ('Brovary',), ('Chorzów',), ('Modena',), ('Novopolotsk',), ('Tšeljabinsk',), ('Coímbra',), ('Panevezys',), ('Murom',), ('Grenoble',), ('Ede',), ('Uman',), ('Athenai',), ('Iasi',), ('Maikop',), ('Wiesbaden',), ('Lysytšansk',), ('Kemerovo',), ('Oldenburg',), ('Astrahan',), ('Tobolsk',), ('Jakutsk',), ('Šahty',), ('Grozny',), ('Puškin',), ('Vigo',), ('Verona',), ('Latina',), ('Iserlohn',), ('Palermo',), ('Zaragoza',), ('Dijon',), ('Ourense (Orense)',), ('Zürich',), ('Glazov',), ('Firenze',), ('Ljubertsy',), ('Bydgoszcz',), ('Kislovodsk',), ('Turku [Åbo]',), ('Dnipropetrovsk',), ('Gdansk',), ('Rybinsk',), ('Orsk',), ('Taganrog',), ('Kaluga',), ('Balakovo',), ('Focsani',), ('Amiens',), ('Monza',), ('Bijsk',), ('Stahanov',), ('Reims',), ('Atšinsk',), ('Kamensk-Uralski',), ('Prato',), ('Gütersloh',), ('Alicante [Alacant]',), ('Ivano-Frankivsk',), ('Bruxelles [Brussel]',), ('Tourcoing',), ('Heerlen',), ('Breda',), ('Tšerkessk',), ('Mariupol',), ('Klin',), ('Andria',), ('Groningen',), ('Stavanger',), ('Varna',), ('Barletta',), ('Granada',), ('Forlì',), ('Salerno',), ('Neftejugansk',), ('Rjazan',), ('Marbella',), ('Magnitogorsk',), ('Gävle',), ('Gent',), ('Belgorod',), ('Genova',), ('Jaén',), ('Braunschweig',), ('Vorkuta',), ('Leganés',), ('Valladolid',), ('Arad',), ('Nürnberg',), ('Torino',), ('Rouen',), ('Bataisk',), ('Angers',), ('Paderborn',), ('Freiburg im Breisgau',), ('Erfurt',), ('Monte-Carlo',), ('Hildesheim',), ('Málaga',), ('Bugulma',), ('Staryi Oskol',), ('Borås',), ('Toljatti',), ('Bonn',), ('Rimini',), ('Eindhoven',), ('Szczecin',), ('Altševsk',), ('Ruda Slaska',), ('Izevsk',), ('Plzen',), ('Bratislava',), ('Liège',), ('Timisoara',), ('Toulon',), ('Città del Vaticano',), ('Tjumen',), ('Torun',), ('Utrecht',), ('Odense',), ('Perpignan',), ('Elblag',), ('Banja Luka',), ('Fuenlabrada',), ('Naltšik',), ('Jevpatorija',), ('Donetsk',), ('Örebro',), ('Jena',), ('Halle/Saale',), ('Plovdiv',), ('Clermont-Ferrand',), ('Bolzano',), ('Nizni Novgorod',), ('Dresden',), ('Tallinn',), ('Subotica',), ('Priština',), ('Zaanstad',), ('Ust-Ilimsk',), ('Offenbach am Main',), ('Zukovski',), ('Ivanovo',), ('Blagoveštšensk',), ('Kirov',), ('Arezzo',), ('Vitoria-Gasteiz',), ('Tartu',), ('Ulan-Ude',), ('Gorzów Wielkopolski',), ('Osijek',), ('Udine',), ('Innsbruck',), ('Mogiljov',), ('Koblenz',), ('Almere',), ('Petropavlovsk-Kamtšatski',), ('Frederiksberg',), ('Serov',), ('Korolev',), ('Berdytšiv',), ('Pervouralsk',), ('Uljanovsk',), ('Limoges',), ('Schaerbeek',), ('Kryvyi Rig',), ('Uppsala',), ('Tomsk',), ('Linköping',), ('Soligorsk',), ('Dobric',), ('Tšernivtsi',), ('København',), ('Braila',), ('Katowice',), ('Giugliano in Campania',), ('Heidelberg',), ('Hamburg',), ('Ústí nad Labem',), ('Gliwice',), ('Villeurbanne',), ('Joškar-Ola',), ('Gothenburg [Göteborg]',), ('Brugge',), ('Sundsvall',), ('Sterlitamak',), ('Mataró',), ('Baranovitši',), ('Novokuibyševsk',), ('Parma',), ('Herson',), ('Sassari',), ('Vladimir',), ('Pinsk',), ('Remscheid',), ('Madrid',), ('Kirovograd',), ('Czestochowa',), ('Wolfsburg',), ('Osnabrück',), ('Cagliari',), ('Cádiz',), ('Zelenodolsk',), ('Zoetermeer',), ('Bordeaux',), ('Syzran',), ('Debrecen',), ('Velbert',), ('Dniprodzerzynsk',), ('St Petersburg',), ('Daugavpils',), ('Jastrzebie-Zdrój',), ('Balašov',), ('Tšaikovski',), ('Rostov-na-Donu',), ('Rzeszów',), ('Sabadell',), ('Drobeta-Turnu Severin',), ('Algeciras',), ('Haag',), ('Zeleznogorsk',), ('Nizni Tagil',), ('Braga',), ('Vaduz',), ('Murcia',), ('Taranto',), ('Terrassa',), ('Sliven',), ('Marl',), ('Essen',), ('Solikamsk',), ('Plock',), ('Kaunas',), ('Melitopol',), ('Tšita',), ('Miskolc',), ('Zabrze',), ('Stuttgart',), ('Konotop',), ('Schaan',), ('Siegen',), ('Hagen',), ('Alessandria',), ('Barakaldo',), ('A Coruña (La Coruña)',), ('Kassel',), ('Leipzig',), ('Mytištši',), ('Wroclaw',), ('Györ',), ('Kragujevac',), ('Dimitrovgrad',), ('Grodno',), ('Uhta',), ('Orša',), ('Roma',), ('Boulogne-Billancourt',), ('Sevilla',), ('Kamyšin',), ('Walbrzych',), ('Votkinsk',), ('Balašiha',), ('Krasnyi Lutš',), ('Novi Sad',), ('Volgodonsk',), ('Šostka',), ('Izmajil',), ('Košice',), ('Rijeka',), ('Munich [München]',), ('Pescara',), ('Trier',), ('Tula',), ('Kamjanets-Podilskyi',), ('Pesaro',), ('Charleroi',), ('Budapest',), ('Zagreb',), ('Elektrostal',), ('Radom',), ('Stara Zagora',), ('Niznevartovsk',), ('Grudziadz',), ('Kyzyl',), ('Pjatigorsk',), ('Ulm',), ('Stockholm',), ('Tver',), ('Karlsruhe',), ('Krasnogorsk',), ('Riga',), ('Le Havre',), ('Leiden',), ('Berezniki',), ('Jelets',), ('Olomouc',), ('Jekaterinburg',), ('Novotšeboksarsk',), ('Pforzheim',), ('Angarsk',), ('Neuss',), ('Palma de Mallorca',), ('Zielona Góra',), ('Trento',), ('Beograd',), ('Göttingen',), ('Mitšurinsk',), ('Vinnytsja',), ('Murmansk',), ('Tórshavn',), ('Vitebsk',), ('Arkangeli',), ('Kazan',), ('Ferrara',), ('Prokopjevsk',), ('Salzgitter',), ('Novomoskovsk',), ('Botosani',), ('Geneve',), ('Odintsovo',), ('Amersfoort',), ('Ljubljana',), ('Berlin',), ('Reggio di Calabria',), ('Kurgan',), ('Witten',), ('Livorno',), ('Kursk',), ('Râmnicu Vâlcea',), ('Odesa',), ('Samara',), ('Umeå',), ('Bottrop',), ('Terni',), ('Namur',), ('Nojabrsk',), ('Simferopol',), ('Mainz',), ('Kuznetsk',), ('Aix-en-Provence',), ('Dabrowa Górnicza',), ('´s-Hertogenbosch',), ('Arnhem',), ('[San Cristóbal de] la Laguna',), ('Patras',), ('Regensburg',), ('Klaipeda',), ('Barcelona',), ('Nevinnomyssk',), ('Bremen',), ('Pardubice',), ('Resita',), ('Bergen',), ('Krementšuk',), ('Cartagena',), ('Tšeboksary',), ('Kirovo-Tšepetsk',), ('Harkova [Harkiv]',), ('Magadan',), ('Oleksandrija',), ('Lübeck',), ('Šiauliai',), ('Engels',), ('Nabereznyje Tšelny',), ('Albacete',), ('Minsk',), ('Bærum',), ('Catania',), ('Santiago de Compostela',), ('L´Hospitalet de Llobregat',), ('Kyiv',), ('Niš',), ('Magdeburg',), ('Reykjavík',), ('Obninsk',), ('Gijón',), ('Barnaul',), ('Novosibirsk',), ('Novara',), ('Omsk',), ('Nikopol',), ('Rotterdam',), ('Krasnojarsk',), ('Tiraspol',), ('Torrejón de Ardoz',), ('Kramatorsk',), ('Ussurijsk',), ('Lutsk',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Longyearbyen',), ('Sumy',), ('La Spezia',), ('Kallithea',), ('Šumen',), ('Graz',), ('Solingen',), ('Sevastopol',), ('Bergisch Gladbach',), ('Amsterdam',), ('Heilbronn',), ('Liberec',), ('Herakleion',), ('Novošahtinsk',), ('Castellón de la Plana [Castell',), ('Valencia',), ('Severodvinsk',), ('Bratsk',), ('Amadora',), ('Monaco-Ville',), ('Haarlem',), ('Brindisi',), ('Seversk',), ('Argenteuil',), ('Rybnik',), ('Bytom',), ('Lausanne',), ('Ingolstadt',), ('Pitesti',), ('León',), ('Hmelnytskyi',), ('Piatra Neamt',), ('Satu Mare',), ('Split',), ('Cottbus',), ('Elista',), ('Brasov',), ('Porto',), ('Novotšerkassk',), ('Târgu Jiu',), ('Kinešma',), ('Rubtsovsk',), ('Ufa',), ('Aachen',), ('Irkutsk',), ('Ravenna',), ('Metz',), ('Warszawa',), ('Münster',), ('Vilnius',), ('Thessaloniki',), ('Maastricht',), ('Cesena',), ('Venezia',), ('Duisburg',), ('Uzgorod',), ('Dzerzinsk',), ('Bremerhaven',), ('Orléans',), ('Novyi Urengoi',), ('Zelenograd',), ('Oviedo',), ('Brno',), ('Borisov',), ('Linz',), ('Zwickau',), ('Potsdam',), ('Bochum',), ('Augsburg',), ('Almería',), ('Fürth',), ('Vantaa',), ('Torre del Greco',), ('Messina',), ('Århus',), ('Móstoles',), ('Badalona',), ('Constanta',), ('Badajoz',), ('Lleida (Lérida)',), ('Nijmegen',), ('Veliki Novgorod',), ('Montpellier',), ('Kaiserslautern',), ('Stavropol',), ('Zlatoust',), ('Leverkusen',), ('Kiel',), ('Marseille',), ('Espoo',), ('Herne',), ('Montreuil',), ('Emmen',), ('Kaliningrad',), ('Strasbourg',), ('Sosnowiec',), ('Bergamo',), ('Mykolajiv',), ('Mulhouse',), ('Slovjansk',), ('Pihkova',), ('Legnica',), ('Komsomolsk-na-Amure',), ('Kielce',), ('Mannheim',), ('Tampere',), ('Bologna',), ('Dortmund',), ('Elche [Elx]',), ('Lviv',), ('Poznan',), ('Sofija',), ('Orenburg',), ('Erlangen',), ('Kolpino',), ('Basel',), ('Jelenia Góra',), ('Lisboa',), ('Córdoba',), ('Zeleznodoroznyi',), ('Jaworzno',), ('Pireus',), ('Saratov',), ('Lund',), ('Gorlivka',), ('Alcorcón',), ('Miass',), ('Bila Tserkva',), ('Syktyvkar',), ('Zytomyr',), ('Abakan',), ('Almetjevsk',), ('Tšerepovets',), ('Kolomna',), ('Las Palmas de Gran Canaria',), ('Gdynia',), ('Tirana',), ('Krasnodar',), ('Štšolkovo',), ('Bielsko-Biala',), ('Mozyr',), ('Brest',), ('Mönchengladbach',), ('Düsseldorf',), ('Opole',), ('Larisa',), ('Milano',), ('Darmstadt',), ('Wuppertal',), ('Tšernigiv',), ('Paris',), ('Kovrov',), ('Makijivka',), ('Caen',), ('Pécs',), ('Frankfurt am Main',), ('Skopje',), ('Getafe',), ('Pavlograd',), ('Bilbao',), ('Nyiregyháza',), ('Enschede',), ('Rivne',), ('Leninsk-Kuznetski',), ('Ratingen',), ('Liepaja',), ('Slupsk',), ('Sarapul',), ('Västerås',), ('Zaporizzja',), ('Recklinghausen',), ('Norilsk',), ('Tšerkasy',), ('Saarbrücken',), ('Nahodka',), ('Orjol',), ('Podgorica',), ('Praha',), ('Novokuznetsk',), ('Mons',), ('Malmö',), ('Podolsk',), ('Mezduretšensk',), ('Krefeld',), ('Târgu Mures',), ('Moers',), ('Balti',), ('Ruse',), ('Bobruisk',), ('Le Mans',), ('Volzski',), ('Velikije Luki',), ('Niznekamsk',), ('Sarajevo',), ('Oradea',), ('Armavir',), ('Hradec Králové',), ('Napoli',), ('Mülheim an der Ruhr',), ('Esslingen am Neckar',), ('Kalisz',), ('Helsingborg',), ('Jönköping',), ('Pleven',), ('Anzero-Sudzensk',), ('Hannover',), ('Lipetsk',), ('Jaroslavl',), ('Hamm',), ('Kertš',), ('Sibiu',), ('Helsinki [Helsingfors]',), ('Vologda',), ('Maribor',), ('Koszalin',), ('Burgas',), ('Reggio nell´ Emilia',), ('Ostrava',), ('Roubaix',), ('Rostock',), ('Foggia',), ('Ternopil',), ('Wloclawek',), ('Lódz',), ('Logroño',)",SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Continent = 'Europe' and T2.Name NOT IN (SELECT T23.Name FROM country AS T23 JOIN countrylanguage AS T24 ON T23.Code = T24.CountryCode WHERE T24.IsOfficial = 'T' and T24.Language = 'English'       ),"('Würzburg',), ('Nantes',), ('Novouralsk',), ('Tarragona',), ('Alkmaar',), ('Jessentuki',), ('Tambov',), ('Mahatškala',), ('Rennes',), ('Zenica',), ('Trondheim',), ('Bialystok',), ('Nancy',), ('Gomel',), ('Lyon',), ('Vicenza',), ('Molodetšno',), ('Kostjantynivka',), ('Apeldoorn',), ('Sotši',), ('Aalborg',), ('Kansk',), ('Himki',), ('San Marino',), ('Ancona',), ('Vladikavkaz',), ('Berdjansk',), ('Noginsk',), ('Craiova',), ('Dordrecht',), ('Vladivostok',), ('Galati',), ('Andorra la Vella',), ('Syrakusa',), ('Salavat',), ('Pultava [Poltava]',), ('Toulouse',), ('Baia Mare',), ('Jenakijeve',), ('Tulcea',), ('Köln',), ('Szeged',), ('Perugia',), ('Saransk',), ('Neftekamsk',), ('Reutlingen',), ('Donostia-San Sebastián',), ('Lida',), ('Moscow',), ('Lünen',), ('Zwolle',), ('Düren',), ('Smolensk',), ('Cluj-Napoca',), ('Nice',), ('Dos Hermanas',), ('Lugansk',), ('Prešov',), ('Orehovo-Zujevo',), ('Schwerin',), ('Ludwigshafen am Rhein',), ('Jerez de la Frontera',), ('Kraków',), ('Târgoviste',), ('Buzau',), ('Chisinau',), ('Voronez',), ('Lahti',), ('Tilburg',), ('Mukatševe',), ('Oberhausen',), ('Oslo',), ('Wien',), ('Antwerpen',), ('Bari',), ('Haarlemmermeer',), ('Tychy',), ('Petroskoi',), ('Santa Cruz de Tenerife',), ('Habarovsk',), ('Juzno-Sahalinsk',), ('Alcalá de Henares',), ('Serpuhov',), ('Bern',), ('Brjansk',), ('Prizren',), ('Novorossijsk',), ('Salamanca',), ('Piacenza',), ('Nîmes',), ('St-Étienne',), ('Lublin',), ('Arzamas',), ('Lille',), ('Sergijev Posad',), ('Klagenfurt',), ('Santander',), ('Salzburg',), ('Serravalle',), ('Delft',), ('Huelva',), ('Kostroma',), ('Tarnów',), ('Norrköping',), ('Olsztyn',), ('Volgograd',), ('Padova',), ('Oulu',), ('Oktjabrski',), ('Sjeverodonetsk',), ('Peristerion',), ('Kiseljovsk',), ('Székesfehérvár',), ('Kecskemét',), ('Bacau',), ('Catanzaro',), ('Novotroitsk',), ('Derbent',), ('Tours',), ('Burgos',), ('Perm',), ('Lecce',), ('Bielefeld',), ('Santa Coloma de Gramenet',), ('Bender (Tîghina)',), ('Ploiesti',), ('Surgut',), ('Pisa',), ('Brescia',), ('Ceské Budejovice',), ('Usolje-Sibirskoje',), ('Gera',), ('Bucuresti',), ('Besançon',), ('Pamplona [Iruña]',), ('Chemnitz',), ('Suceava',), ('Trieste',), ('Penza',), ('Gelsenkirchen',), ('Brovary',), ('Chorzów',), ('Modena',), ('Novopolotsk',), ('Tšeljabinsk',), ('Coímbra',), ('Panevezys',), ('Murom',), ('Grenoble',), ('Ede',), ('Uman',), ('Athenai',), ('Iasi',), ('Maikop',), ('Wiesbaden',), ('Lysytšansk',), ('Kemerovo',), ('Oldenburg',), ('Astrahan',), ('Tobolsk',), ('Jakutsk',), ('Šahty',), ('Grozny',), ('Puškin',), ('Vigo',), ('Verona',), ('Latina',), ('Iserlohn',), ('Palermo',), ('Zaragoza',), ('Dijon',), ('Ourense (Orense)',), ('Zürich',), ('Glazov',), ('Firenze',), ('Ljubertsy',), ('Bydgoszcz',), ('Kislovodsk',), ('Turku [Åbo]',), ('Dnipropetrovsk',), ('Gdansk',), ('Rybinsk',), ('Orsk',), ('Taganrog',), ('Kaluga',), ('Balakovo',), ('Focsani',), ('Amiens',), ('Monza',), ('Bijsk',), ('Stahanov',), ('Reims',), ('Atšinsk',), ('Kamensk-Uralski',), ('Prato',), ('Gütersloh',), ('Alicante [Alacant]',), ('Ivano-Frankivsk',), ('Bruxelles [Brussel]',), ('Tourcoing',), ('Heerlen',), ('Breda',), ('Tšerkessk',), ('Mariupol',), ('Klin',), ('Andria',), ('Groningen',), ('Stavanger',), ('Varna',), ('Barletta',), ('Granada',), ('Forlì',), ('Salerno',), ('Neftejugansk',), ('Rjazan',), ('Marbella',), ('Magnitogorsk',), ('Gävle',), ('Gent',), ('Belgorod',), ('Genova',), ('Jaén',), ('Braunschweig',), ('Vorkuta',), ('Leganés',), ('Valladolid',), ('Arad',), ('Nürnberg',), ('Torino',), ('Rouen',), ('Bataisk',), ('Angers',), ('Paderborn',), ('Freiburg im Breisgau',), ('Erfurt',), ('Monte-Carlo',), ('Hildesheim',), ('Málaga',), ('Bugulma',), ('Staryi Oskol',), ('Borås',), ('Toljatti',), ('Bonn',), ('Rimini',), ('Eindhoven',), ('Szczecin',), ('Altševsk',), ('Ruda Slaska',), ('Izevsk',), ('Plzen',), ('Bratislava',), ('Liège',), ('Timisoara',), ('Toulon',), ('Città del Vaticano',), ('Tjumen',), ('Torun',), ('Utrecht',), ('Odense',), ('Perpignan',), ('Elblag',), ('Banja Luka',), ('Fuenlabrada',), ('Naltšik',), ('Jevpatorija',), ('Donetsk',), ('Örebro',), ('Jena',), ('Halle/Saale',), ('Plovdiv',), ('Clermont-Ferrand',), ('Bolzano',), ('Nizni Novgorod',), ('Dresden',), ('Tallinn',), ('Subotica',), ('Priština',), ('Zaanstad',), ('Ust-Ilimsk',), ('Offenbach am Main',), ('Zukovski',), ('Ivanovo',), ('Blagoveštšensk',), ('Kirov',), ('Arezzo',), ('Vitoria-Gasteiz',), ('Tartu',), ('Ulan-Ude',), ('Gorzów Wielkopolski',), ('Osijek',), ('Udine',), ('Innsbruck',), ('Mogiljov',), ('Koblenz',), ('Almere',), ('Petropavlovsk-Kamtšatski',), ('Frederiksberg',), ('Serov',), ('Korolev',), ('Berdytšiv',), ('Pervouralsk',), ('Uljanovsk',), ('Limoges',), ('Schaerbeek',), ('Kryvyi Rig',), ('Uppsala',), ('Tomsk',), ('Linköping',), ('Soligorsk',), ('Dobric',), ('Tšernivtsi',), ('København',), ('Braila',), ('Katowice',), ('Giugliano in Campania',), ('Heidelberg',), ('Hamburg',), ('Ústí nad Labem',), ('Gliwice',), ('Villeurbanne',), ('Joškar-Ola',), ('Gothenburg [Göteborg]',), ('Brugge',), ('Sundsvall',), ('Sterlitamak',), ('Mataró',), ('Baranovitši',), ('Novokuibyševsk',), ('Parma',), ('Herson',), ('Sassari',), ('Vladimir',), ('Pinsk',), ('Remscheid',), ('Madrid',), ('Kirovograd',), ('Czestochowa',), ('Wolfsburg',), ('Osnabrück',), ('Cagliari',), ('Cádiz',), ('Zelenodolsk',), ('Zoetermeer',), ('Bordeaux',), ('Syzran',), ('Debrecen',), ('Velbert',), ('Dniprodzerzynsk',), ('St Petersburg',), ('Daugavpils',), ('Jastrzebie-Zdrój',), ('Balašov',), ('Tšaikovski',), ('Rostov-na-Donu',), ('Rzeszów',), ('Sabadell',), ('Drobeta-Turnu Severin',), ('Algeciras',), ('Haag',), ('Zeleznogorsk',), ('Nizni Tagil',), ('Braga',), ('Vaduz',), ('Murcia',), ('Taranto',), ('Terrassa',), ('Sliven',), ('Marl',), ('Essen',), ('Solikamsk',), ('Plock',), ('Kaunas',), ('Melitopol',), ('Tšita',), ('Miskolc',), ('Zabrze',), ('Stuttgart',), ('Konotop',), ('Schaan',), ('Siegen',), ('Hagen',), ('Alessandria',), ('Barakaldo',), ('A Coruña (La Coruña)',), ('Kassel',), ('Leipzig',), ('Mytištši',), ('Wroclaw',), ('Györ',), ('Kragujevac',), ('Dimitrovgrad',), ('Grodno',), ('Uhta',), ('Orša',), ('Roma',), ('Boulogne-Billancourt',), ('Sevilla',), ('Kamyšin',), ('Walbrzych',), ('Votkinsk',), ('Balašiha',), ('Krasnyi Lutš',), ('Novi Sad',), ('Volgodonsk',), ('Šostka',), ('Izmajil',), ('Košice',), ('Rijeka',), ('Munich [München]',), ('Pescara',), ('Trier',), ('Tula',), ('Kamjanets-Podilskyi',), ('Pesaro',), ('Charleroi',), ('Budapest',), ('Zagreb',), ('Elektrostal',), ('Radom',), ('Stara Zagora',), ('Niznevartovsk',), ('Grudziadz',), ('Kyzyl',), ('Pjatigorsk',), ('Ulm',), ('Stockholm',), ('Tver',), ('Karlsruhe',), ('Krasnogorsk',), ('Riga',), ('Le Havre',), ('Leiden',), ('Berezniki',), ('Jelets',), ('Olomouc',), ('Jekaterinburg',), ('Novotšeboksarsk',), ('Pforzheim',), ('Angarsk',), ('Neuss',), ('Palma de Mallorca',), ('Zielona Góra',), ('Trento',), ('Beograd',), ('Göttingen',), ('Mitšurinsk',), ('Vinnytsja',), ('Murmansk',), ('Tórshavn',), ('Vitebsk',), ('Arkangeli',), ('Kazan',), ('Ferrara',), ('Prokopjevsk',), ('Salzgitter',), ('Novomoskovsk',), ('Botosani',), ('Geneve',), ('Odintsovo',), ('Amersfoort',), ('Ljubljana',), ('Berlin',), ('Reggio di Calabria',), ('Kurgan',), ('Witten',), ('Livorno',), ('Kursk',), ('Râmnicu Vâlcea',), ('Odesa',), ('Samara',), ('Umeå',), ('Bottrop',), ('Terni',), ('Namur',), ('Nojabrsk',), ('Simferopol',), ('Mainz',), ('Kuznetsk',), ('Aix-en-Provence',), ('Dabrowa Górnicza',), ('´s-Hertogenbosch',), ('Arnhem',), ('[San Cristóbal de] la Laguna',), ('Patras',), ('Regensburg',), ('Klaipeda',), ('Barcelona',), ('Nevinnomyssk',), ('Bremen',), ('Pardubice',), ('Resita',), ('Bergen',), ('Krementšuk',), ('Cartagena',), ('Tšeboksary',), ('Kirovo-Tšepetsk',), ('Harkova [Harkiv]',), ('Magadan',), ('Oleksandrija',), ('Lübeck',), ('Šiauliai',), ('Engels',), ('Nabereznyje Tšelny',), ('Albacete',), ('Minsk',), ('Bærum',), ('Catania',), ('Santiago de Compostela',), ('L´Hospitalet de Llobregat',), ('Kyiv',), ('Niš',), ('Magdeburg',), ('Reykjavík',), ('Obninsk',), ('Gijón',), ('Barnaul',), ('Novosibirsk',), ('Novara',), ('Omsk',), ('Nikopol',), ('Rotterdam',), ('Krasnojarsk',), ('Tiraspol',), ('Torrejón de Ardoz',), ('Kramatorsk',), ('Ussurijsk',), ('Lutsk',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Longyearbyen',), ('Sumy',), ('La Spezia',), ('Kallithea',), ('Šumen',), ('Graz',), ('Solingen',), ('Sevastopol',), ('Bergisch Gladbach',), ('Amsterdam',), ('Heilbronn',), ('Liberec',), ('Herakleion',), ('Novošahtinsk',), ('Castellón de la Plana [Castell',), ('Valencia',), ('Severodvinsk',), ('Bratsk',), ('Amadora',), ('Monaco-Ville',), ('Haarlem',), ('Brindisi',), ('Seversk',), ('Argenteuil',), ('Rybnik',), ('Bytom',), ('Lausanne',), ('Ingolstadt',), ('Pitesti',), ('León',), ('Hmelnytskyi',), ('Piatra Neamt',), ('Satu Mare',), ('Split',), ('Cottbus',), ('Elista',), ('Brasov',), ('Porto',), ('Novotšerkassk',), ('Târgu Jiu',), ('Kinešma',), ('Rubtsovsk',), ('Ufa',), ('Aachen',), ('Irkutsk',), ('Ravenna',), ('Metz',), ('Warszawa',), ('Münster',), ('Vilnius',), ('Thessaloniki',), ('Maastricht',), ('Cesena',), ('Venezia',), ('Duisburg',), ('Uzgorod',), ('Dzerzinsk',), ('Bremerhaven',), ('Orléans',), ('Novyi Urengoi',), ('Zelenograd',), ('Oviedo',), ('Brno',), ('Borisov',), ('Linz',), ('Zwickau',), ('Potsdam',), ('Bochum',), ('Augsburg',), ('Almería',), ('Fürth',), ('Vantaa',), ('Torre del Greco',), ('Messina',), ('Århus',), ('Móstoles',), ('Badalona',), ('Constanta',), ('Badajoz',), ('Lleida (Lérida)',), ('Nijmegen',), ('Veliki Novgorod',), ('Montpellier',), ('Kaiserslautern',), ('Stavropol',), ('Zlatoust',), ('Leverkusen',), ('Kiel',), ('Marseille',), ('Espoo',), ('Herne',), ('Montreuil',), ('Emmen',), ('Kaliningrad',), ('Strasbourg',), ('Sosnowiec',), ('Bergamo',), ('Mykolajiv',), ('Mulhouse',), ('Slovjansk',), ('Pihkova',), ('Legnica',), ('Komsomolsk-na-Amure',), ('Kielce',), ('Mannheim',), ('Tampere',), ('Bologna',), ('Dortmund',), ('Elche [Elx]',), ('Lviv',), ('Poznan',), ('Sofija',), ('Orenburg',), ('Erlangen',), ('Kolpino',), ('Basel',), ('Jelenia Góra',), ('Lisboa',), ('Córdoba',), ('Zeleznodoroznyi',), ('Jaworzno',), ('Pireus',), ('Saratov',), ('Lund',), ('Gorlivka',), ('Alcorcón',), ('Miass',), ('Bila Tserkva',), ('Syktyvkar',), ('Zytomyr',), ('Abakan',), ('Almetjevsk',), ('Tšerepovets',), ('Kolomna',), ('Las Palmas de Gran Canaria',), ('Gdynia',), ('Tirana',), ('Krasnodar',), ('Štšolkovo',), ('Bielsko-Biala',), ('Mozyr',), ('Brest',), ('Mönchengladbach',), ('Düsseldorf',), ('Opole',), ('Larisa',), ('Milano',), ('Darmstadt',), ('Wuppertal',), ('Tšernigiv',), ('Paris',), ('Kovrov',), ('Makijivka',), ('Caen',), ('Pécs',), ('Frankfurt am Main',), ('Skopje',), ('Getafe',), ('Pavlograd',), ('Bilbao',), ('Nyiregyháza',), ('Enschede',), ('Rivne',), ('Leninsk-Kuznetski',), ('Ratingen',), ('Liepaja',), ('Slupsk',), ('Sarapul',), ('Västerås',), ('Zaporizzja',), ('Recklinghausen',), ('Norilsk',), ('Tšerkasy',), ('Saarbrücken',), ('Nahodka',), ('Orjol',), ('Podgorica',), ('Praha',), ('Novokuznetsk',), ('Mons',), ('Malmö',), ('Podolsk',), ('Mezduretšensk',), ('Krefeld',), ('Târgu Mures',), ('Moers',), ('Balti',), ('Ruse',), ('Bobruisk',), ('Le Mans',), ('Volzski',), ('Velikije Luki',), ('Niznekamsk',), ('Sarajevo',), ('Oradea',), ('Armavir',), ('Hradec Králové',), ('Napoli',), ('Mülheim an der Ruhr',), ('Esslingen am Neckar',), ('Kalisz',), ('Helsingborg',), ('Jönköping',), ('Pleven',), ('Anzero-Sudzensk',), ('Hannover',), ('Lipetsk',), ('Jaroslavl',), ('Hamm',), ('Kertš',), ('Sibiu',), ('Helsinki [Helsingfors]',), ('Vologda',), ('Maribor',), ('Koszalin',), ('Burgas',), ('Reggio nell´ Emilia',), ('Ostrava',), ('Roubaix',), ('Rostock',), ('Foggia',), ('Ternopil',), ('Wloclawek',), ('Lódz',), ('Logroño',)",extra,True,1,
401,world_1,Whic`h unique cities are in  Asian countries where Chinese is the official language?,SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  'Asia',"('Acheng',), ('Amoy [Xiamen]',), ('Anda',), ('Ankang',), ('Anqing',), ('Anshan',), ('Anshun',), ('Anyang',), ('Aqsu',), ('Baicheng',), ('Baiyin',), ('Baoding',), ('Baoji',), ('Baotou',), ('Bei´an',), ('Beihai',), ('Beipiao',), ('Bengbu',), ('Benxi',), ('Binzhou',), ('Bose',), ('Bozhou',), ('Cangzhou',), ('Changchun',), ('Changde',), ('Changji',), ('Changsha',), ('Changshu',), ('Changzhi',), ('Changzhou',), ('Chaohu',), ('Chaoyang',), ('Chaozhou',), ('Chengde',), ('Chengdu',), ('Chenzhou',), ('Chifeng',), ('Chongqing',), ('Chuzhou',), ('Cixi',), ('Da´an',), ('Dali',), ('Dalian',), ('Dandong',), ('Danjiangkou',), ('Danyang',), ('Daqing',), ('Datong',), ('Daxian',), ('Deyang',), ('Dezhou',), ('Dongtai',), ('Dongwan',), ('Dongying',), ('Dujiangyan',), ('Dunhua',), ('Duyun',), ('Emeishan',), ('Enshi',), ('Ezhou',), ('Fengcheng',), ('Foshan',), ('Fu´an',), ('Fujin',), ('Fuling',), ('Fuqing',), ('Fushun',), ('Fuxin',), ('Fuyang',), ('Fuyu',), ('Fuzhou',), ('Ganzhou',), ('Gejiu',), ('Ghulja',), ('Gongziling',), ('Guangshui',), ('Guangyuan',), ('Guigang',), ('Guilin',), ('Guiyang',), ('Haicheng',), ('Haikou',), ('Hailar',), ('Hailun',), ('Haining',), ('Hami',), ('Handan',), ('Hangzhou',), ('Hanzhong',), ('Harbin',), ('Hebi',), ('Hefei',), ('Hegang',), ('Hengshui',), ('Hengyang',), ('Heyuan',), ('Heze',), ('Hohhot',), ('Honghu',), ('Hongjiang',), ('Huadian',), ('Huai´an',), ('Huaibei',), ('Huaihua',), ('Huainan',), ('Huaiyin',), ('Huangshan',), ('Huangshi',), ('Huangyan',), ('Huaying',), ('Huizhou',), ('Hunjiang',), ('Huzhou',), ('Jiamusi',), ('Ji´an',), ('Jiangmen',), ('Jiangyin',), ('Jiangyou',), ('Jiaohe',), ('Jiaonan',), ('Jiaozhou',), ('Jiaozuo',), ('Jiaxing',), ('Jieyang',), ('Jilin',), ('Jinan',), ('Jinchang',), ('Jincheng',), ('Jingdezhen',), ('Jinhua',), ('Jining',), ('Jinmen',), ('Jinxi',), ('Jinzhou',), ('Jiujiang',), ('Jiutai',), ('Jixi',), ('Junan',), ('Kaifeng',), ('Kaili',), ('Kaiyuan',), ('Kanton [Guangzhou]',), ('Korla',), ('Kunming',), ('Kunshan',), ('Kuytun',), ('Laiwu',), ('Laiyang',), ('Laizhou',), ('Langfang',), ('Lanzhou',), ('Laohekou',), ('Leiyang',), ('Lengshuijiang',), ('Leshan',), ('Lhasa',), ('Liangcheng',), ('Lianyuan',), ('Lianyungang',), ('Liaocheng',), ('Liaoyang',), ('Liaoyuan',), ('Liling',), ('Linchuan',), ('Linfen',), ('Linhai',), ('Linhe',), ('Linqing',), ('Linyi',), ('Liu´an',), ('Liupanshui',), ('Liuzhou',), ('Liyang',), ('Longjing',), ('Longkou',), ('Longyan',), ('Loudi',), ('Luohe',), ('Luoyang',), ('Luzhou',), ('Ma´anshan',), ('Manzhouli',), ('Maoming',), ('Meihekou',), ('Meixian',), ('Mianyang',), ('Mishan',), ('Mudanjiang',), ('Nanchang',), ('Nanchong',), ('Nanking [Nanjing]',), ('Nanning',), ('Nanping',), ('Nantong',), ('Nanyang',), ('Neijiang',), ('Ningbo',), ('Panjin',), ('Panzhihua',), ('Peking',), ('Pingdingshan',), ('Pingdu',), ('Pingliang',), ('Pingxiang',), ('Pingyi',), ('Puqi',), ('Putian',), ('Puyang',), ('Qaramay',), ('Qashqar',), ('Qianjiang',), ('Qidong',), ('Qingdao',), ('Qingyuan',), ('Qingzhou',), ('Qinhuangdao',), ('Qinzhou',), ('Qiqihar',), ('Qitaihe',), ('Quanzhou',), ('Qujing',), ('Quzhou',), ('Renqiu',), ('Rizhao',), ('Rui´an',), ('Sanmenxia',), ('Sanming',), ('Sanya',), ('Shanghai',), ('Shangqiu',), ('Shangrao',), ('Shangzi',), ('Shantou',), ('Shanwei',), ('Shaoguan',), ('Shaowu',), ('Shaoxing',), ('Shaoyang',), ('Shashi',), ('Shenyang',), ('Shenzhen',), ('Shihezi',), ('Shijiazhuang',), ('Shishou',), ('Shiyan',), ('Shizuishan',), ('Shuangcheng',), ('Shuangyashan',), ('Singapore',), ('Siping',), ('Suihua',), ('Suining',), ('Suizhou',), ('Suqian',), ('Suzhou',), ('Tai´an',), ('Taiyuan',), ('Taizhou',), ('Tangshan',), ('Taonan',), ('Tengzhou',), ('Tianjin',), ('Tianmen',), ('Tianshui',), ('Tiefa',), ('Tieli',), ('Tieling',), ('Tongchuan',), ('Tonghua',), ('Tongliao',), ('Tongling',), ('Tong Xian',), ('Tumen',), ('Ulanhot',), ('Urumtši [Ürümqi]',), ('Wafangdian',), ('Wanxian',), ('Weifang',), ('Weihai',), ('Weinan',), ('Wendeng',), ('Wenzhou',), ('Wuhai',), ('Wuhan',), ('Wuhu',), ('Wuwei',), ('Wuxi',), ('Wuzhou',), ('Xi´an',), ('Xiangfan',), ('Xiangtan',), ('Xianning',), ('Xiantao',), ('Xianyang',), ('Xiaogan',), ('Xiaoshan',), ('Xichang',), ('Xilin Hot',), ('Xingcheng',), ('Xinghua',), ('Xingtai',), ('Xining',), ('Xintai',), ('Xinxiang',), ('Xinyang',), ('Xinyu',), ('Xinzhou',), ('Xuangzhou',), ('Xuchang',), ('Xuzhou',), ('Ya´an',), ('Yakeshi',), ('Yan´an',), ('Yancheng',), ('Yangjiang',), ('Yangquan',), ('Yangzhou',), ('Yanji',), ('Yantai',), ('Yibin',), ('Yichang',), ('Yichun',), ('Yinchuan',), ('Yingkou',), ('Yixing',), ('Yiyang',), ('Yizheng',), ('Yong´an',), ('Yuanjiang',), ('Yuci',), ('Yueyang',), ('Yulin',), ('Yumen',), ('Yuncheng',), ('Yushu',), ('Yuyao',), ('Yuzhou',), ('Zalantun',), ('Zaoyang',), ('Zaozhuang',), ('Zhangjiagang',), ('Zhangjiakou',), ('Zhangjiang',), ('Zhangzhou',), ('Zhaodong',), ('Zhaoqing',), ('Zhengzhou',), ('Zhenjiang',), ('Zhongshan',), ('Zhoukou',), ('Zhoushan',), ('Zhucheng',), ('Zhuhai',), ('Zhumadian',), ('Zhuzhou',), ('Zibo',), ('Zigong',), ('Zixing',), ('Zunyi',)",SELECT DISTINCT T1.Name FROM city AS T1 JOIN country AS T3 ON T1.CountryCode = T3.Code JOIN countrylanguage AS T2 ON T3.Code = T2.CountryCode WHERE T2.IsOfficial = 'T' and T2.Language = 'Chinese' and T3.Continent = 'Asia',"('Acheng',), ('Amoy [Xiamen]',), ('Anda',), ('Ankang',), ('Anqing',), ('Anshan',), ('Anshun',), ('Anyang',), ('Aqsu',), ('Baicheng',), ('Baiyin',), ('Baoding',), ('Baoji',), ('Baotou',), ('Bei´an',), ('Beihai',), ('Beipiao',), ('Bengbu',), ('Benxi',), ('Binzhou',), ('Bose',), ('Bozhou',), ('Cangzhou',), ('Changchun',), ('Changde',), ('Changji',), ('Changsha',), ('Changshu',), ('Changzhi',), ('Changzhou',), ('Chaohu',), ('Chaoyang',), ('Chaozhou',), ('Chengde',), ('Chengdu',), ('Chenzhou',), ('Chifeng',), ('Chongqing',), ('Chuzhou',), ('Cixi',), ('Da´an',), ('Dali',), ('Dalian',), ('Dandong',), ('Danjiangkou',), ('Danyang',), ('Daqing',), ('Datong',), ('Daxian',), ('Deyang',), ('Dezhou',), ('Dongtai',), ('Dongwan',), ('Dongying',), ('Dujiangyan',), ('Dunhua',), ('Duyun',), ('Emeishan',), ('Enshi',), ('Ezhou',), ('Fengcheng',), ('Foshan',), ('Fu´an',), ('Fujin',), ('Fuling',), ('Fuqing',), ('Fushun',), ('Fuxin',), ('Fuyang',), ('Fuyu',), ('Fuzhou',), ('Ganzhou',), ('Gejiu',), ('Ghulja',), ('Gongziling',), ('Guangshui',), ('Guangyuan',), ('Guigang',), ('Guilin',), ('Guiyang',), ('Haicheng',), ('Haikou',), ('Hailar',), ('Hailun',), ('Haining',), ('Hami',), ('Handan',), ('Hangzhou',), ('Hanzhong',), ('Harbin',), ('Hebi',), ('Hefei',), ('Hegang',), ('Hengshui',), ('Hengyang',), ('Heyuan',), ('Heze',), ('Hohhot',), ('Honghu',), ('Hongjiang',), ('Huadian',), ('Huai´an',), ('Huaibei',), ('Huaihua',), ('Huainan',), ('Huaiyin',), ('Huangshan',), ('Huangshi',), ('Huangyan',), ('Huaying',), ('Huizhou',), ('Hunjiang',), ('Huzhou',), ('Jiamusi',), ('Ji´an',), ('Jiangmen',), ('Jiangyin',), ('Jiangyou',), ('Jiaohe',), ('Jiaonan',), ('Jiaozhou',), ('Jiaozuo',), ('Jiaxing',), ('Jieyang',), ('Jilin',), ('Jinan',), ('Jinchang',), ('Jincheng',), ('Jingdezhen',), ('Jinhua',), ('Jining',), ('Jinmen',), ('Jinxi',), ('Jinzhou',), ('Jiujiang',), ('Jiutai',), ('Jixi',), ('Junan',), ('Kaifeng',), ('Kaili',), ('Kaiyuan',), ('Kanton [Guangzhou]',), ('Korla',), ('Kunming',), ('Kunshan',), ('Kuytun',), ('Laiwu',), ('Laiyang',), ('Laizhou',), ('Langfang',), ('Lanzhou',), ('Laohekou',), ('Leiyang',), ('Lengshuijiang',), ('Leshan',), ('Lhasa',), ('Liangcheng',), ('Lianyuan',), ('Lianyungang',), ('Liaocheng',), ('Liaoyang',), ('Liaoyuan',), ('Liling',), ('Linchuan',), ('Linfen',), ('Linhai',), ('Linhe',), ('Linqing',), ('Linyi',), ('Liu´an',), ('Liupanshui',), ('Liuzhou',), ('Liyang',), ('Longjing',), ('Longkou',), ('Longyan',), ('Loudi',), ('Luohe',), ('Luoyang',), ('Luzhou',), ('Ma´anshan',), ('Manzhouli',), ('Maoming',), ('Meihekou',), ('Meixian',), ('Mianyang',), ('Mishan',), ('Mudanjiang',), ('Nanchang',), ('Nanchong',), ('Nanking [Nanjing]',), ('Nanning',), ('Nanping',), ('Nantong',), ('Nanyang',), ('Neijiang',), ('Ningbo',), ('Panjin',), ('Panzhihua',), ('Peking',), ('Pingdingshan',), ('Pingdu',), ('Pingliang',), ('Pingxiang',), ('Pingyi',), ('Puqi',), ('Putian',), ('Puyang',), ('Qaramay',), ('Qashqar',), ('Qianjiang',), ('Qidong',), ('Qingdao',), ('Qingyuan',), ('Qingzhou',), ('Qinhuangdao',), ('Qinzhou',), ('Qiqihar',), ('Qitaihe',), ('Quanzhou',), ('Qujing',), ('Quzhou',), ('Renqiu',), ('Rizhao',), ('Rui´an',), ('Sanmenxia',), ('Sanming',), ('Sanya',), ('Shanghai',), ('Shangqiu',), ('Shangrao',), ('Shangzi',), ('Shantou',), ('Shanwei',), ('Shaoguan',), ('Shaowu',), ('Shaoxing',), ('Shaoyang',), ('Shashi',), ('Shenyang',), ('Shenzhen',), ('Shihezi',), ('Shijiazhuang',), ('Shishou',), ('Shiyan',), ('Shizuishan',), ('Shuangcheng',), ('Shuangyashan',), ('Singapore',), ('Siping',), ('Suihua',), ('Suining',), ('Suizhou',), ('Suqian',), ('Suzhou',), ('Tai´an',), ('Taiyuan',), ('Taizhou',), ('Tangshan',), ('Taonan',), ('Tengzhou',), ('Tianjin',), ('Tianmen',), ('Tianshui',), ('Tiefa',), ('Tieli',), ('Tieling',), ('Tongchuan',), ('Tonghua',), ('Tongliao',), ('Tongling',), ('Tong Xian',), ('Tumen',), ('Ulanhot',), ('Urumtši [Ürümqi]',), ('Wafangdian',), ('Wanxian',), ('Weifang',), ('Weihai',), ('Weinan',), ('Wendeng',), ('Wenzhou',), ('Wuhai',), ('Wuhan',), ('Wuhu',), ('Wuwei',), ('Wuxi',), ('Wuzhou',), ('Xi´an',), ('Xiangfan',), ('Xiangtan',), ('Xianning',), ('Xiantao',), ('Xianyang',), ('Xiaogan',), ('Xiaoshan',), ('Xichang',), ('Xilin Hot',), ('Xingcheng',), ('Xinghua',), ('Xingtai',), ('Xining',), ('Xintai',), ('Xinxiang',), ('Xinyang',), ('Xinyu',), ('Xinzhou',), ('Xuangzhou',), ('Xuchang',), ('Xuzhou',), ('Ya´an',), ('Yakeshi',), ('Yan´an',), ('Yancheng',), ('Yangjiang',), ('Yangquan',), ('Yangzhou',), ('Yanji',), ('Yantai',), ('Yibin',), ('Yichang',), ('Yichun',), ('Yinchuan',), ('Yingkou',), ('Yixing',), ('Yiyang',), ('Yizheng',), ('Yong´an',), ('Yuanjiang',), ('Yuci',), ('Yueyang',), ('Yulin',), ('Yumen',), ('Yuncheng',), ('Yushu',), ('Yuyao',), ('Yuzhou',), ('Zalantun',), ('Zaoyang',), ('Zaozhuang',), ('Zhangjiagang',), ('Zhangjiakou',), ('Zhangjiang',), ('Zhangzhou',), ('Zhaodong',), ('Zhaoqing',), ('Zhengzhou',), ('Zhenjiang',), ('Zhongshan',), ('Zhoukou',), ('Zhoushan',), ('Zhucheng',), ('Zhuhai',), ('Zhumadian',), ('Zhuzhou',), ('Zibo',), ('Zigong',), ('Zixing',), ('Zunyi',)",hard,True,1,
402,world_1,"What are the name, independence year, and surface area of the country with the smallest population?","SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","('Bouvet Island', 59.0, 9999)","SELECT T1.Name, T1.SurfaceArea, T1.IndepYear FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1","('Bouvet Island', 59.0, 9999)",medium,True,1,
403,world_1,"What are the population, name and leader of the country with the largest area?","SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","('Russian Federation', 146934000, 'Vladimir Putin')","SELECT T1.Name, T1.Population, T1.HeadOfState FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1","('Russian Federation', 146934000, 'Vladimir Putin')",medium,True,1,
404,world_1,Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.,"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >=  3","(7, 'Bangladesh'), (3, 'Venezuela'), (3, 'Mayotte'), (5, 'Luxembourg'), (8, 'Czech Republic'), (6, 'Sweden'), (4, 'Cambodia'), (3, 'Singapore'), (4, 'Laos'), (5, 'Colombia'), (3, 'Albania'), (7, 'Ukraine'), (6, 'Latvia'), (5, 'Slovakia'), (3, 'Israel'), (6, 'Micronesia, Federated States of'), (6, 'Malaysia'), (10, 'Kenya'), (6, 'Zambia'), (8, 'Liberia'), (7, 'Benin'), (10, 'Nigeria'), (3, 'Tajikistan'), (5, 'Guam'), (12, 'China'), (3, 'New Caledonia'), (4, 'Gabon'), (8, 'Australia'), (5, 'Côte d’Ivoire'), (3, 'Vanuatu'), (6, 'Congo'), (6, 'Georgia'), (6, 'Belgium'), (4, 'Monaco'), (3, 'Solomon Islands'), (6, 'Thailand'), (3, 'United Kingdom'), (6, 'Germany'), (6, 'Eritrea'), (12, 'Canada'), (8, 'Namibia'), (3, 'Slovenia'), (4, 'Azerbaijan'), (5, 'Afghanistan'), (8, 'Chad'), (4, 'Chile'), (11, 'South Africa'), (3, 'Peru'), (6, 'Yugoslavia'), (6, 'Japan'), (4, 'Macao'), (5, 'Iraq'), (5, 'Norway'), (8, 'Pakistan'), (5, 'Brazil'), (5, 'Guatemala'), (4, 'Bolivia'), (7, 'Ethiopia'), (6, 'Panama'), (3, 'Tunisia'), (10, 'Sudan'), (6, 'Mali'), (5, 'Moldova'), (8, 'Myanmar'), (6, 'Mexico'), (3, 'Guyana'), (4, 'Poland'), (3, 'Lebanon'), (3, 'Virgin Islands, U.S.'), (9, 'Indonesia'), (8, 'Cameroon'), (10, 'Uganda'), (3, 'Jordan'), (5, 'Macedonia'), (3, 'Sri Lanka'), (3, 'American Samoa'), (6, 'Uzbekistan'), (4, 'Brunei'), (5, 'Finland'), (7, 'Kyrgyzstan'), (6, 'France'), (5, 'Réunion'), (3, 'Djibouti'), (5, 'Nauru'), (6, 'Senegal'), (6, 'Ghana'), (5, 'Hong Kong'), (8, 'Sierra Leone'), (10, 'Philippines'), (3, 'Tuvalu'), (12, 'United States'), (7, 'Guinea'), (3, 'Turkey'), (4, 'Zimbabwe'), (5, 'Comoros'), (4, 'Belarus'), (4, 'Netherlands'), (3, 'Lesotho'), (4, 'Paraguay'), (6, 'Mauritius'), (9, 'Angola'), (4, 'Spain'), (3, 'Netherlands Antilles'), (4, 'Malawi'), (3, 'Burundi'), (6, 'Taiwan'), (3, 'Bhutan'), (8, 'Togo'), (6, 'Burkina Faso'), (8, 'Italy'), (10, 'Congo, The Democratic Republic of the'), (4, 'Palau'), (3, 'Argentina'), (3, 'Liechtenstein'), (12, 'India'), (10, 'Iran'), (3, 'French Polynesia'), (5, 'Gambia'), (5, 'Estonia'), (9, 'Vietnam'), (6, 'Kazakstan'), (6, 'Central African Republic'), (7, 'Denmark'), (3, 'Trinidad and Tobago'), (6, 'Mongolia'), (6, 'Mauritania'), (10, 'Mozambique'), (3, 'Seychelles'), (6, 'Northern Mariana Islands'), (4, 'Switzerland'), (6, 'Hungary'), (4, 'Honduras'), (4, 'Belize'), (5, 'Botswana'), (12, 'Russian Federation'), (6, 'Romania'), (8, 'Austria'), (6, 'Guinea-Bissau'), (5, 'Niger'), (5, 'Lithuania'), (4, 'Bulgaria'), (4, 'Turkmenistan'), (4, 'Aruba'), (4, 'Nicaragua'), (7, 'Nepal'), (11, 'Tanzania'), (4, 'Costa Rica'), (3, 'Samoa'), (4, 'Andorra')","SELECT count( T1.Language), T2.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T2.Name HAVING count( *) >= 3","(7, 'Bangladesh'), (3, 'Venezuela'), (3, 'Mayotte'), (5, 'Luxembourg'), (8, 'Czech Republic'), (6, 'Sweden'), (4, 'Cambodia'), (3, 'Singapore'), (4, 'Laos'), (5, 'Colombia'), (3, 'Albania'), (7, 'Ukraine'), (6, 'Latvia'), (5, 'Slovakia'), (3, 'Israel'), (6, 'Micronesia, Federated States of'), (6, 'Malaysia'), (10, 'Kenya'), (6, 'Zambia'), (8, 'Liberia'), (7, 'Benin'), (10, 'Nigeria'), (3, 'Tajikistan'), (5, 'Guam'), (12, 'China'), (3, 'New Caledonia'), (4, 'Gabon'), (8, 'Australia'), (5, 'Côte d’Ivoire'), (3, 'Vanuatu'), (6, 'Congo'), (6, 'Georgia'), (6, 'Belgium'), (4, 'Monaco'), (3, 'Solomon Islands'), (6, 'Thailand'), (3, 'United Kingdom'), (6, 'Germany'), (6, 'Eritrea'), (12, 'Canada'), (8, 'Namibia'), (3, 'Slovenia'), (4, 'Azerbaijan'), (5, 'Afghanistan'), (8, 'Chad'), (4, 'Chile'), (11, 'South Africa'), (3, 'Peru'), (6, 'Yugoslavia'), (6, 'Japan'), (4, 'Macao'), (5, 'Iraq'), (5, 'Norway'), (8, 'Pakistan'), (5, 'Brazil'), (5, 'Guatemala'), (4, 'Bolivia'), (7, 'Ethiopia'), (6, 'Panama'), (3, 'Tunisia'), (10, 'Sudan'), (6, 'Mali'), (5, 'Moldova'), (8, 'Myanmar'), (6, 'Mexico'), (3, 'Guyana'), (4, 'Poland'), (3, 'Lebanon'), (3, 'Virgin Islands, U.S.'), (9, 'Indonesia'), (8, 'Cameroon'), (10, 'Uganda'), (3, 'Jordan'), (5, 'Macedonia'), (3, 'Sri Lanka'), (3, 'American Samoa'), (6, 'Uzbekistan'), (4, 'Brunei'), (5, 'Finland'), (7, 'Kyrgyzstan'), (6, 'France'), (5, 'Réunion'), (3, 'Djibouti'), (5, 'Nauru'), (6, 'Senegal'), (6, 'Ghana'), (5, 'Hong Kong'), (8, 'Sierra Leone'), (10, 'Philippines'), (3, 'Tuvalu'), (12, 'United States'), (7, 'Guinea'), (3, 'Turkey'), (4, 'Zimbabwe'), (5, 'Comoros'), (4, 'Belarus'), (4, 'Netherlands'), (3, 'Lesotho'), (4, 'Paraguay'), (6, 'Mauritius'), (9, 'Angola'), (4, 'Spain'), (3, 'Netherlands Antilles'), (4, 'Malawi'), (3, 'Burundi'), (6, 'Taiwan'), (3, 'Bhutan'), (8, 'Togo'), (6, 'Burkina Faso'), (8, 'Italy'), (10, 'Congo, The Democratic Republic of the'), (4, 'Palau'), (3, 'Argentina'), (3, 'Liechtenstein'), (12, 'India'), (10, 'Iran'), (3, 'French Polynesia'), (5, 'Gambia'), (5, 'Estonia'), (9, 'Vietnam'), (6, 'Kazakstan'), (6, 'Central African Republic'), (7, 'Denmark'), (3, 'Trinidad and Tobago'), (6, 'Mongolia'), (6, 'Mauritania'), (10, 'Mozambique'), (3, 'Seychelles'), (6, 'Northern Mariana Islands'), (4, 'Switzerland'), (6, 'Hungary'), (4, 'Honduras'), (4, 'Belize'), (5, 'Botswana'), (12, 'Russian Federation'), (6, 'Romania'), (8, 'Austria'), (6, 'Guinea-Bissau'), (5, 'Niger'), (5, 'Lithuania'), (4, 'Bulgaria'), (4, 'Turkmenistan'), (4, 'Aruba'), (4, 'Nicaragua'), (7, 'Nepal'), (11, 'Tanzania'), (4, 'Costa Rica'), (3, 'Samoa'), (4, 'Andorra')",medium,True,1,
405,world_1,"What are the names of countries that speak more than 2 languages, as well as how many languages they speak?","SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","(7, 'Bangladesh'), (3, 'Venezuela'), (3, 'Mayotte'), (5, 'Luxembourg'), (8, 'Czech Republic'), (6, 'Sweden'), (4, 'Cambodia'), (3, 'Singapore'), (4, 'Laos'), (5, 'Colombia'), (3, 'Albania'), (7, 'Ukraine'), (6, 'Latvia'), (5, 'Slovakia'), (3, 'Israel'), (6, 'Micronesia, Federated States of'), (6, 'Malaysia'), (10, 'Kenya'), (6, 'Zambia'), (8, 'Liberia'), (7, 'Benin'), (10, 'Nigeria'), (3, 'Tajikistan'), (5, 'Guam'), (12, 'China'), (3, 'New Caledonia'), (4, 'Gabon'), (8, 'Australia'), (5, 'Côte d’Ivoire'), (3, 'Vanuatu'), (6, 'Congo'), (6, 'Georgia'), (6, 'Belgium'), (4, 'Monaco'), (3, 'Solomon Islands'), (6, 'Thailand'), (3, 'United Kingdom'), (6, 'Germany'), (6, 'Eritrea'), (12, 'Canada'), (8, 'Namibia'), (3, 'Slovenia'), (4, 'Azerbaijan'), (5, 'Afghanistan'), (8, 'Chad'), (4, 'Chile'), (11, 'South Africa'), (3, 'Peru'), (6, 'Yugoslavia'), (6, 'Japan'), (4, 'Macao'), (5, 'Iraq'), (5, 'Norway'), (8, 'Pakistan'), (5, 'Brazil'), (5, 'Guatemala'), (4, 'Bolivia'), (7, 'Ethiopia'), (6, 'Panama'), (3, 'Tunisia'), (10, 'Sudan'), (6, 'Mali'), (5, 'Moldova'), (8, 'Myanmar'), (6, 'Mexico'), (3, 'Guyana'), (4, 'Poland'), (3, 'Lebanon'), (3, 'Virgin Islands, U.S.'), (9, 'Indonesia'), (8, 'Cameroon'), (10, 'Uganda'), (3, 'Jordan'), (5, 'Macedonia'), (3, 'Sri Lanka'), (3, 'American Samoa'), (6, 'Uzbekistan'), (4, 'Brunei'), (5, 'Finland'), (7, 'Kyrgyzstan'), (6, 'France'), (5, 'Réunion'), (3, 'Djibouti'), (5, 'Nauru'), (6, 'Senegal'), (6, 'Ghana'), (5, 'Hong Kong'), (8, 'Sierra Leone'), (10, 'Philippines'), (3, 'Tuvalu'), (12, 'United States'), (7, 'Guinea'), (3, 'Turkey'), (4, 'Zimbabwe'), (5, 'Comoros'), (4, 'Belarus'), (4, 'Netherlands'), (3, 'Lesotho'), (4, 'Paraguay'), (6, 'Mauritius'), (9, 'Angola'), (4, 'Spain'), (3, 'Netherlands Antilles'), (4, 'Malawi'), (3, 'Burundi'), (6, 'Taiwan'), (3, 'Bhutan'), (8, 'Togo'), (6, 'Burkina Faso'), (8, 'Italy'), (10, 'Congo, The Democratic Republic of the'), (4, 'Palau'), (3, 'Argentina'), (3, 'Liechtenstein'), (12, 'India'), (10, 'Iran'), (3, 'French Polynesia'), (5, 'Gambia'), (5, 'Estonia'), (9, 'Vietnam'), (6, 'Kazakstan'), (6, 'Central African Republic'), (7, 'Denmark'), (3, 'Trinidad and Tobago'), (6, 'Mongolia'), (6, 'Mauritania'), (10, 'Mozambique'), (3, 'Seychelles'), (6, 'Northern Mariana Islands'), (4, 'Switzerland'), (6, 'Hungary'), (4, 'Honduras'), (4, 'Belize'), (5, 'Botswana'), (12, 'Russian Federation'), (6, 'Romania'), (8, 'Austria'), (6, 'Guinea-Bissau'), (5, 'Niger'), (5, 'Lithuania'), (4, 'Bulgaria'), (4, 'Turkmenistan'), (4, 'Aruba'), (4, 'Nicaragua'), (7, 'Nepal'), (11, 'Tanzania'), (4, 'Costa Rica'), (3, 'Samoa'), (4, 'Andorra')","SELECT count( T1.Language), T2.Name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T2.Name HAVING count( *) > 2","(7, 'Bangladesh'), (3, 'Venezuela'), (3, 'Mayotte'), (5, 'Luxembourg'), (8, 'Czech Republic'), (6, 'Sweden'), (4, 'Cambodia'), (3, 'Singapore'), (4, 'Laos'), (5, 'Colombia'), (3, 'Albania'), (7, 'Ukraine'), (6, 'Latvia'), (5, 'Slovakia'), (3, 'Israel'), (6, 'Micronesia, Federated States of'), (6, 'Malaysia'), (10, 'Kenya'), (6, 'Zambia'), (8, 'Liberia'), (7, 'Benin'), (10, 'Nigeria'), (3, 'Tajikistan'), (5, 'Guam'), (12, 'China'), (3, 'New Caledonia'), (4, 'Gabon'), (8, 'Australia'), (5, 'Côte d’Ivoire'), (3, 'Vanuatu'), (6, 'Congo'), (6, 'Georgia'), (6, 'Belgium'), (4, 'Monaco'), (3, 'Solomon Islands'), (6, 'Thailand'), (3, 'United Kingdom'), (6, 'Germany'), (6, 'Eritrea'), (12, 'Canada'), (8, 'Namibia'), (3, 'Slovenia'), (4, 'Azerbaijan'), (5, 'Afghanistan'), (8, 'Chad'), (4, 'Chile'), (11, 'South Africa'), (3, 'Peru'), (6, 'Yugoslavia'), (6, 'Japan'), (4, 'Macao'), (5, 'Iraq'), (5, 'Norway'), (8, 'Pakistan'), (5, 'Brazil'), (5, 'Guatemala'), (4, 'Bolivia'), (7, 'Ethiopia'), (6, 'Panama'), (3, 'Tunisia'), (10, 'Sudan'), (6, 'Mali'), (5, 'Moldova'), (8, 'Myanmar'), (6, 'Mexico'), (3, 'Guyana'), (4, 'Poland'), (3, 'Lebanon'), (3, 'Virgin Islands, U.S.'), (9, 'Indonesia'), (8, 'Cameroon'), (10, 'Uganda'), (3, 'Jordan'), (5, 'Macedonia'), (3, 'Sri Lanka'), (3, 'American Samoa'), (6, 'Uzbekistan'), (4, 'Brunei'), (5, 'Finland'), (7, 'Kyrgyzstan'), (6, 'France'), (5, 'Réunion'), (3, 'Djibouti'), (5, 'Nauru'), (6, 'Senegal'), (6, 'Ghana'), (5, 'Hong Kong'), (8, 'Sierra Leone'), (10, 'Philippines'), (3, 'Tuvalu'), (12, 'United States'), (7, 'Guinea'), (3, 'Turkey'), (4, 'Zimbabwe'), (5, 'Comoros'), (4, 'Belarus'), (4, 'Netherlands'), (3, 'Lesotho'), (4, 'Paraguay'), (6, 'Mauritius'), (9, 'Angola'), (4, 'Spain'), (3, 'Netherlands Antilles'), (4, 'Malawi'), (3, 'Burundi'), (6, 'Taiwan'), (3, 'Bhutan'), (8, 'Togo'), (6, 'Burkina Faso'), (8, 'Italy'), (10, 'Congo, The Democratic Republic of the'), (4, 'Palau'), (3, 'Argentina'), (3, 'Liechtenstein'), (12, 'India'), (10, 'Iran'), (3, 'French Polynesia'), (5, 'Gambia'), (5, 'Estonia'), (9, 'Vietnam'), (6, 'Kazakstan'), (6, 'Central African Republic'), (7, 'Denmark'), (3, 'Trinidad and Tobago'), (6, 'Mongolia'), (6, 'Mauritania'), (10, 'Mozambique'), (3, 'Seychelles'), (6, 'Northern Mariana Islands'), (4, 'Switzerland'), (6, 'Hungary'), (4, 'Honduras'), (4, 'Belize'), (5, 'Botswana'), (12, 'Russian Federation'), (6, 'Romania'), (8, 'Austria'), (6, 'Guinea-Bissau'), (5, 'Niger'), (5, 'Lithuania'), (4, 'Bulgaria'), (4, 'Turkmenistan'), (4, 'Aruba'), (4, 'Nicaragua'), (7, 'Nepal'), (11, 'Tanzania'), (4, 'Costa Rica'), (3, 'Samoa'), (4, 'Andorra')",medium,True,1,
406,world_1,Find the number of cities in each district whose population is greater than the average population of cities?,"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District","(1, 'Bali'), (1, 'Izmir'), (1, 'Manitoba'), (1, 'Gomel'), (1, 'Marrakech-Tensift-Al'), (1, 'Victoria'), (1, 'Riau'), (1, 'Washington'), (1, 'Tripoli'), (1, 'Içel'), (1, 'Macau'), (1, 'Risaralda'), (1, 'Khorasan'), (2, 'Western Visayas'), (1, 'Santa Catarina'), (1, 'Louisiana'), (1, 'Antananarivo'), (2, 'Cap-Vert'), (1, 'Yucatán'), (1, 'Rio Grande do Sul'), (1, 'al-Tamim'), (1, 'Khuzestan'), (1, 'Tochigi'), (1, 'Taejon'), (1, 'Niamey'), (1, 'Ogun'), (1, 'Suez'), (5, 'Tamil Nadu'), (1, 'Baskimaa'), (1, 'Mato Grosso'), (1, 'Lilongwe'), (1, 'Markazi'), (4, 'Distrito Federal'), (1, 'Aleksandria'), (1, 'Oslo'), (1, 'Antwerpen'), (1, 'Atlántico'), (1, 'Kouilou'), (1, 'Brjansk'), (4, 'Hyogo'), (1, 'Estuaire'), (1, 'Nothwest Border Prov'), (1, 'Piemonte'), (1, 'Santander'), (1, 'Kaduna'), (1, 'Taegu'), (2, 'Ohio'), (3, 'Kerala'), (1, 'Queensland'), (1, 'Minnesota'), (1, 'Nagasaki'), (1, 'Sistan va Baluchesta'), (1, 'Volgograd'), (2, 'Southern Mindanao'), (1, 'Jerusalem'), (1, 'Kiova'), (7, 'Kyonggi'), (1, 'Baghdad'), (1, 'Salta'), (1, 'Penza'), (1, 'Guatemala'), (1, 'Fès-Boulemane'), (1, 'Gansu'), (2, 'Tšeljabinsk'), (2, 'Sonora'), (2, 'Maputo'), (2, 'Coahuila de Zaragoza'), (2, 'Aichi'), (1, 'Karotegin'), (1, 'Baden-Württemberg'), (2, 'Shaba'), (1, 'Astrahan'), (1, 'Bishkek shaary'), (3, 'Saitama'), (1, 'Chiapas'), (1, 'Blantyre'), (1, 'Attika'), (1, 'Jizní Morava'), (1, 'Pietari'), (1, 'Kagoshima'), (1, 'Antalya'), (2, 'Central Java'), (1, 'Qom'), (1, 'Canary Islands'), (1, 'Latium'), (1, 'San Juan'), (1, 'Nebraska'), (1, 'Arequipa'), (1, 'Keelung'), (1, 'Mazowieckie'), (1, 'Bengasi'), (1, 'Shanghai'), (1, 'Baki'), (2, 'Teheran'), (1, 'Ehime'), (1, 'New South Wales'), (1, 'Alagoas'), (1, 'Istanbul'), (2, 'Hiroshima'), (3, 'Sinaloa'), (1, 'Bratislava'), (1, 'Ondo & Ekiti'), (1, 'Tjumen'), (2, 'Jharkhand'), (3, 'Donetsk'), (1, 'Missouri'), (9, 'México'), (3, 'Karnataka'), (1, 'Nizni Novgorod'), (1, 'Santafé de Bogotá'), (1, 'Katalonia'), (3, 'Khartum'), (1, 'Ivanovo'), (1, 'Guerrero'), (1, 'Kirov'), (2, 'Shizuoka'), (1, 'Hainan'), (1, 'Mogiljov'), (1, 'Kermanshah'), (1, 'Uljanovsk'), (1, 'Moscow (City)'), (2, 'Central'), (1, 'Tomsk'), (1, 'Emilia-Romagna'), (1, 'København'), (1, 'Rangoon [Yangon]'), (1, 'Gaza'), (1, 'Bihar'), (1, 'Damascus'), (1, 'Miyagi'), (1, 'Dar es Salaam'), (1, 'Managua'), (4, 'Ontario'), (1, 'Madrid'), (1, 'Baškortostan'), (1, 'Horad Minsk'), (1, 'Rivers & Bayelsa'), (1, 'Grad Zagreb'), (1, 'Nouakchott'), (1, 'Inchon'), (1, 'Seoul'), (2, 'Sverdlovsk'), (1, 'West Kasai'), (1, 'Hlavní mesto Praha'), (1, 'Alger'), (1, 'Santiago de Cuba'), (1, 'Niigata'), (1, 'Diyarbakir'), (2, 'Chihuahua'), (1, 'Kaunas'), (4, 'Hubei'), (1, 'Lodzkie'), (1, 'Ankara'), (1, 'Assam'), (5, 'Andhra Pradesh'), (5, 'Madhya Pradesh'), (1, 'Sumatera Utara'), (1, 'Adana'), (1, 'Amazonas'), (2, 'Jiangxi'), (3, 'West Bengali'), (1, 'Giza'), (1, 'South Kazakstan'), (1, 'Budapest'), (1, 'Hims'), (13, 'Maharashtra'), (1, 'Northern Mindanao'), (2, 'Scotland'), (1, 'Central Visayas'), (1, 'Bangkok'), (1, 'Haryana'), (2, 'Baijeri'), (1, 'Kinshasa'), (1, 'Sofala'), (1, 'Vinnytsja'), (1, 'Murmansk'), (1, 'Arkangeli'), (1, 'Quang Nam-Da Nang'), (1, 'New York'), (7, 'Nordrhein-Westfalen'), (1, 'Hawaii'), (1, 'Kalimantan Selatan'), (1, 'Distrito Nacional'), (2, 'Samara'), (1, 'Harkova'), (2, 'Paraíba'), (1, 'al-Sharqiya'), (1, 'Lombardia'), (1, 'Oita'), (1, 'Conakry'), (1, 'Xinxiang'), (1, 'Western Cape'), (1, 'Bremen'), (1, 'Gifu'), (1, 'Federaatio'), (1, 'Kujawsko-Pomorskie'), (1, 'Doha'), (3, 'Baja California'), (1, 'Omsk'), (11, 'Punjab'), (2, 'Shaanxi'), (1, 'Massachusetts'), (1, 'Pennsylvania'), (6, 'Osaka'), (1, 'Kabol'), (1, 'Malopolskie'), (1, 'Valencia'), (4, 'Minas Gerais'), (2, 'Orissa'), (1, 'Luxor'), (1, 'Fukushima'), (1, 'Harjumaa'), (5, 'Taipei'), (1, 'Loreto'), (1, 'Samarkand'), (1, 'Jambi'), (1, 'Chittagong'), (1, 'Medina'), (1, 'Tainan'), (3, 'Jalisco'), (1, 'Sulawesi Selatan'), (1, 'Puebla'), (1, 'Anambra & Enugu & Eb'), (1, 'Jammu and Kashmir'), (1, 'Beirut'), (1, 'Addis Abeba'), (1, 'Chungchongbuk'), (1, 'Kano & Jigawa'), (1, 'Oregon'), (1, 'Kaliningrad'), (2, 'Colorado'), (1, 'Mykolajiv'), (3, 'Mekka'), (1, 'Michoacán de Ocampo'), (1, 'Kairo'), (2, 'al-Gharbiya'), (1, 'Lviv'), (1, 'Orenburg'), (7, 'Shandong'), (1, 'Callao'), (1, 'Wakayama'), (1, 'Córdoba'), (2, 'Hokkaido'), (1, 'Berliini'), (1, 'Yunnan'), (1, 'Central Serbia'), (1, 'Magdalena'), (1, 'Chari-Baguirmi'), (1, 'Tanger-Tétouan'), (1, 'Abidjan'), (1, 'Aleppo'), (7, 'Jiangsu'), (2, 'Oklahoma'), (1, 'Central Macedonia'), (2, 'Zuid-Holland'), (2, 'Sindh'), (1, 'Delhi'), (1, 'Zaporizzja'), (1, 'Banaadir'), (1, 'Burjatia'), (1, 'Maryland'), (1, 'Almaty Qalasy'), (3, 'Zhejiang'), (3, 'Shanxi'), (1, 'Bangui'), (1, 'Nagano'), (3, 'Kyongsangnam'), (1, 'Tolima'), (1, 'Jaroslavl'), (1, 'Wisconsin'), (2, 'Rabat-Salé-Zammour-Z'), (1, 'Rhône-Alpes'), (1, 'Tšuvassia'), (1, 'Hsinchu'), (2, 'Veracruz'), (1, 'Haute-Zaïre'), (2, 'Paraná'), (1, 'Riyadh'), (1, 'New Mexico'), (3, 'Tokyo-to'), (1, 'Durango'), (1, 'Auckland'), (1, 'Hanoi'), (1, 'Montserrado'), (7, 'Gauteng'), (1, 'Campania'), (1, 'Harare'), (2, 'Bolívar'), (4, 'Guangdong'), (1, 'Fars'), (1, 'Querétaro de Arteaga'), (1, 'Kaohsiung'), (1, 'Tunis'), (1, 'Smolensk'), (1, 'Qaraghandy'), (1, 'Lambayeque'), (1, 'Lugansk'), (1, 'Pyongyang-si'), (1, 'Maritime'), (1, 'al-Zarqa'), (1, 'Sisilia'), (12, 'Liaoning'), (1, 'Chisinau'), (1, 'Voronez'), (1, 'Nara'), (1, 'Bukarest'), (1, 'Midi-Pyrénées'), (2, 'Santa Fé'), (1, 'Wien'), (8, 'Rio de Janeiro'), (1, 'Quintana Roo'), (1, 'Habarovsk'), (1, 'British Colombia'), (1, 'West Azerbaidzan'), (5, 'Gujarat'), (1, 'Ashanti'), (1, 'District of Columbia'), (1, 'East Kasai'), (1, 'Perak'), (7, 'England'), (1, 'Sanaa'), (1, 'Miranda'), (1, 'Oriental'), (1, 'Kowloon and New Kowl'), (1, 'Perm'), (2, 'Florida'), (1, 'Primorje'), (1, 'Hongkong'), (3, 'Inner Mongolia'), (1, 'Udmurtia'), (1, 'Riika'), (1, 'Cochabamba'), (1, 'Baluchistan'), (13, 'São Paulo'), (1, 'Haiphong'), (1, 'Illinois'), (1, 'Kyoto'), (2, 'Kemerovo'), (1, 'West Australia'), (1, 'Santa Cruz'), (1, 'Kwangju'), (1, 'Guayas'), (1, 'Amman'), (1, 'Constantine'), (2, 'Dnipropetrovsk'), (1, 'Kwara & Kogi'), (1, 'Norte de Santander'), (2, 'Fujian'), (1, 'Mato Grosso do Sul'), (1, 'Abu Dhabi'), (1, 'Pusan'), (1, 'Eskisehir'), (4, 'West Java'), (1, 'Hamadan'), (1, 'Rjazan'), (1, 'Nairobi'), (1, 'Ninawa'), (1, 'Aragua'), (1, 'Dhaka'), (1, 'Luanda'), (1, 'Atlantique'), (2, 'La Paz'), (1, 'La Libertad'), (1, 'Nampo-si'), (2, 'Western'), (1, 'Lusaka'), (1, 'Bursa'), (1, 'Kayseri'), (1, 'Provence-Alpes-Côte'), (1, 'Sanliurfa'), (1, 'Lagos'), (1, 'Maranhão'), (1, 'Kumamoto'), (3, 'Arizona'), (5, 'Anhui'), (1, 'Noord-Holland'), (1, '–'), (1, 'Hamgyong P'), (1, 'Maekel'), (1, 'Dubai'), (1, 'Pichincha'), (1, 'North Carolina'), (4, 'Hunan'), (1, 'Hamburg'), (1, 'Québec'), (1, 'Herson'), (4, 'Jilin'), (1, 'West Götanmaan län'), (1, 'Altai'), (1, 'Littoral'), (1, 'Centre'), (6, 'Texas'), (1, 'Asunción'), (1, 'Rostov-na-Donu'), (1, 'Aragonia'), (2, 'Guizhou'), (1, 'Aden'), (1, 'Murcia'), (1, 'Nevada'), (1, 'Viangchan'), (1, 'San Luis Potosí'), (1, 'Leinster'), (1, 'Antioquia'), (1, 'Kalimantan Timur'), (1, 'Zulia'), (1, 'Chongqing'), (1, 'Tucumán'), (1, 'Toskent Shahri'), (1, 'Greater Accra'), (2, 'Tennessee'), (1, 'Taichung'), (1, 'Tula'), (2, 'Chhatisgarh'), (1, 'Sumatera Barat'), (1, 'Grad Sofija'), (2, 'Bahia'), (1, 'Wilayah Persekutuan'), (1, 'Indiana'), (1, 'Carabobo'), (1, 'Tver'), (1, 'Namangan'), (1, 'Khulna'), (1, 'Irbil'), (1, 'Eastern Cape'), (1, 'Georgia'), (1, 'Coast'), (3, 'Santiago'), (1, 'South Australia'), (1, 'Meknès-Tafilalet'), (2, 'East Java'), (1, 'Goiás'), (1, 'Hessen'), (1, 'Kerman'), (2, 'Tamaulipas'), (1, 'Kurgan'), (1, 'Kursk'), (1, 'Odesa'), (1, 'Pomorskie'), (1, 'Yogyakarta'), (3, 'Sichuan'), (12, 'National Capital Reg'), (5, 'Kanagawa'), (1, 'Hamgyong N'), (5, 'Oyo & Osun'), (1, 'Piauí'), (1, 'Ulaanbaatar'), (1, 'Lampung'), (1, 'Novosibirsk'), (1, 'Wielkopolskie'), (1, 'Aguascalientes'), (1, 'Krasnojarsk'), (1, 'Gaziantep'), (3, 'Guangxi'), (1, 'Islamabad'), (1, 'Oran'), (1, 'Ceará'), (1, 'Virginia'), (1, 'Basra'), (1, 'Port Said'), (6, 'Hebei'), (12, 'Buenos Aires'), (1, 'La Habana'), (4, 'KwaZulu-Natal'), (1, 'Mandalay'), (1, 'Zachodnio-Pomorskie'), (1, 'Île-de-France'), (1, 'al-Qalyubiya'), (1, 'Irkutsk'), (1, 'Konya'), (1, 'Tbilisi'), (1, 'Peking'), (1, 'Ouest'), (1, 'Sumatera Selatan'), (1, 'Bulawayo'), (1, 'Qinghai'), (9, 'Heilongjiang'), (1, 'Cortés'), (1, 'Djibouti'), (2, 'Pará'), (1, 'Panamá'), (1, 'Western Mindanao'), (1, 'Lara'), (1, 'Sergipe'), (2, 'Andalusia'), (1, 'Vilna'), (2, 'Fukuoka'), (1, 'Ahal'), (1, 'Valle'), (1, 'Casablanca'), (1, 'Distrito Central'), (7, 'Henan'), (2, 'Lisboa'), (1, 'Kadiogo'), (1, 'Michigan'), (1, 'Saratov'), (1, 'Kalimantan Barat'), (1, 'Chollabuk'), (2, 'Alberta'), (8, 'California'), (2, 'Krasnodar'), (1, 'Kyongsangbuk'), (1, 'Jakarta Raya'), (12, 'Uttar Pradesh'), (1, 'Yerevan'), (1, 'al-Sulaymaniya'), (2, 'Okayama'), (5, 'Rajasthan'), (1, 'Ningxia'), (2, 'Saksi'), (1, 'Skopje'), (1, 'al-Daqahliya'), (1, 'Liguria'), (1, 'San Salvador'), (1, 'Tianjin'), (1, 'Rio Grande do Norte'), (1, 'Montevideo'), (1, 'East Azerbaidzan'), (3, 'Pernambuco'), (1, 'Dolnoslaskie'), (4, 'Chiba'), (1, 'Ishikawa'), (3, 'Guanajuato'), (1, 'Newmaa'), (1, 'Lima'), (1, 'Bamako'), (1, 'Lipetsk'), (1, 'Brazzaville'), (1, 'Toscana'), (1, 'Lubelskie'), (2, 'Southern Tagalog'), (1, 'Gilan'), (1, 'Ho Chi Minh City'), (1, 'Phnom Penh'), (2, 'Tatarstan'), (1, 'Esfahan'), (1, 'Chandigarh'), (3, 'Nuevo León'), (1, 'Tabasco'), (1, 'Niedersachsen')","SELECT count( *), T1.District FROM city AS T1 WHERE T1.Population > (SELECT avg( T22.Population) FROM city AS T22        ) GROUP BY T1.District","(1, 'Bali'), (1, 'Izmir'), (1, 'Manitoba'), (1, 'Gomel'), (1, 'Marrakech-Tensift-Al'), (1, 'Victoria'), (1, 'Riau'), (1, 'Washington'), (1, 'Tripoli'), (1, 'Içel'), (1, 'Macau'), (1, 'Risaralda'), (1, 'Khorasan'), (2, 'Western Visayas'), (1, 'Santa Catarina'), (1, 'Louisiana'), (1, 'Antananarivo'), (2, 'Cap-Vert'), (1, 'Yucatán'), (1, 'Rio Grande do Sul'), (1, 'al-Tamim'), (1, 'Khuzestan'), (1, 'Tochigi'), (1, 'Taejon'), (1, 'Niamey'), (1, 'Ogun'), (1, 'Suez'), (5, 'Tamil Nadu'), (1, 'Baskimaa'), (1, 'Mato Grosso'), (1, 'Lilongwe'), (1, 'Markazi'), (4, 'Distrito Federal'), (1, 'Aleksandria'), (1, 'Oslo'), (1, 'Antwerpen'), (1, 'Atlántico'), (1, 'Kouilou'), (1, 'Brjansk'), (4, 'Hyogo'), (1, 'Estuaire'), (1, 'Nothwest Border Prov'), (1, 'Piemonte'), (1, 'Santander'), (1, 'Kaduna'), (1, 'Taegu'), (2, 'Ohio'), (3, 'Kerala'), (1, 'Queensland'), (1, 'Minnesota'), (1, 'Nagasaki'), (1, 'Sistan va Baluchesta'), (1, 'Volgograd'), (2, 'Southern Mindanao'), (1, 'Jerusalem'), (1, 'Kiova'), (7, 'Kyonggi'), (1, 'Baghdad'), (1, 'Salta'), (1, 'Penza'), (1, 'Guatemala'), (1, 'Fès-Boulemane'), (1, 'Gansu'), (2, 'Tšeljabinsk'), (2, 'Sonora'), (2, 'Maputo'), (2, 'Coahuila de Zaragoza'), (2, 'Aichi'), (1, 'Karotegin'), (1, 'Baden-Württemberg'), (2, 'Shaba'), (1, 'Astrahan'), (1, 'Bishkek shaary'), (3, 'Saitama'), (1, 'Chiapas'), (1, 'Blantyre'), (1, 'Attika'), (1, 'Jizní Morava'), (1, 'Pietari'), (1, 'Kagoshima'), (1, 'Antalya'), (2, 'Central Java'), (1, 'Qom'), (1, 'Canary Islands'), (1, 'Latium'), (1, 'San Juan'), (1, 'Nebraska'), (1, 'Arequipa'), (1, 'Keelung'), (1, 'Mazowieckie'), (1, 'Bengasi'), (1, 'Shanghai'), (1, 'Baki'), (2, 'Teheran'), (1, 'Ehime'), (1, 'New South Wales'), (1, 'Alagoas'), (1, 'Istanbul'), (2, 'Hiroshima'), (3, 'Sinaloa'), (1, 'Bratislava'), (1, 'Ondo & Ekiti'), (1, 'Tjumen'), (2, 'Jharkhand'), (3, 'Donetsk'), (1, 'Missouri'), (9, 'México'), (3, 'Karnataka'), (1, 'Nizni Novgorod'), (1, 'Santafé de Bogotá'), (1, 'Katalonia'), (3, 'Khartum'), (1, 'Ivanovo'), (1, 'Guerrero'), (1, 'Kirov'), (2, 'Shizuoka'), (1, 'Hainan'), (1, 'Mogiljov'), (1, 'Kermanshah'), (1, 'Uljanovsk'), (1, 'Moscow (City)'), (2, 'Central'), (1, 'Tomsk'), (1, 'Emilia-Romagna'), (1, 'København'), (1, 'Rangoon [Yangon]'), (1, 'Gaza'), (1, 'Bihar'), (1, 'Damascus'), (1, 'Miyagi'), (1, 'Dar es Salaam'), (1, 'Managua'), (4, 'Ontario'), (1, 'Madrid'), (1, 'Baškortostan'), (1, 'Horad Minsk'), (1, 'Rivers & Bayelsa'), (1, 'Grad Zagreb'), (1, 'Nouakchott'), (1, 'Inchon'), (1, 'Seoul'), (2, 'Sverdlovsk'), (1, 'West Kasai'), (1, 'Hlavní mesto Praha'), (1, 'Alger'), (1, 'Santiago de Cuba'), (1, 'Niigata'), (1, 'Diyarbakir'), (2, 'Chihuahua'), (1, 'Kaunas'), (4, 'Hubei'), (1, 'Lodzkie'), (1, 'Ankara'), (1, 'Assam'), (5, 'Andhra Pradesh'), (5, 'Madhya Pradesh'), (1, 'Sumatera Utara'), (1, 'Adana'), (1, 'Amazonas'), (2, 'Jiangxi'), (3, 'West Bengali'), (1, 'Giza'), (1, 'South Kazakstan'), (1, 'Budapest'), (1, 'Hims'), (13, 'Maharashtra'), (1, 'Northern Mindanao'), (2, 'Scotland'), (1, 'Central Visayas'), (1, 'Bangkok'), (1, 'Haryana'), (2, 'Baijeri'), (1, 'Kinshasa'), (1, 'Sofala'), (1, 'Vinnytsja'), (1, 'Murmansk'), (1, 'Arkangeli'), (1, 'Quang Nam-Da Nang'), (1, 'New York'), (7, 'Nordrhein-Westfalen'), (1, 'Hawaii'), (1, 'Kalimantan Selatan'), (1, 'Distrito Nacional'), (2, 'Samara'), (1, 'Harkova'), (2, 'Paraíba'), (1, 'al-Sharqiya'), (1, 'Lombardia'), (1, 'Oita'), (1, 'Conakry'), (1, 'Xinxiang'), (1, 'Western Cape'), (1, 'Bremen'), (1, 'Gifu'), (1, 'Federaatio'), (1, 'Kujawsko-Pomorskie'), (1, 'Doha'), (3, 'Baja California'), (1, 'Omsk'), (11, 'Punjab'), (2, 'Shaanxi'), (1, 'Massachusetts'), (1, 'Pennsylvania'), (6, 'Osaka'), (1, 'Kabol'), (1, 'Malopolskie'), (1, 'Valencia'), (4, 'Minas Gerais'), (2, 'Orissa'), (1, 'Luxor'), (1, 'Fukushima'), (1, 'Harjumaa'), (5, 'Taipei'), (1, 'Loreto'), (1, 'Samarkand'), (1, 'Jambi'), (1, 'Chittagong'), (1, 'Medina'), (1, 'Tainan'), (3, 'Jalisco'), (1, 'Sulawesi Selatan'), (1, 'Puebla'), (1, 'Anambra & Enugu & Eb'), (1, 'Jammu and Kashmir'), (1, 'Beirut'), (1, 'Addis Abeba'), (1, 'Chungchongbuk'), (1, 'Kano & Jigawa'), (1, 'Oregon'), (1, 'Kaliningrad'), (2, 'Colorado'), (1, 'Mykolajiv'), (3, 'Mekka'), (1, 'Michoacán de Ocampo'), (1, 'Kairo'), (2, 'al-Gharbiya'), (1, 'Lviv'), (1, 'Orenburg'), (7, 'Shandong'), (1, 'Callao'), (1, 'Wakayama'), (1, 'Córdoba'), (2, 'Hokkaido'), (1, 'Berliini'), (1, 'Yunnan'), (1, 'Central Serbia'), (1, 'Magdalena'), (1, 'Chari-Baguirmi'), (1, 'Tanger-Tétouan'), (1, 'Abidjan'), (1, 'Aleppo'), (7, 'Jiangsu'), (2, 'Oklahoma'), (1, 'Central Macedonia'), (2, 'Zuid-Holland'), (2, 'Sindh'), (1, 'Delhi'), (1, 'Zaporizzja'), (1, 'Banaadir'), (1, 'Burjatia'), (1, 'Maryland'), (1, 'Almaty Qalasy'), (3, 'Zhejiang'), (3, 'Shanxi'), (1, 'Bangui'), (1, 'Nagano'), (3, 'Kyongsangnam'), (1, 'Tolima'), (1, 'Jaroslavl'), (1, 'Wisconsin'), (2, 'Rabat-Salé-Zammour-Z'), (1, 'Rhône-Alpes'), (1, 'Tšuvassia'), (1, 'Hsinchu'), (2, 'Veracruz'), (1, 'Haute-Zaïre'), (2, 'Paraná'), (1, 'Riyadh'), (1, 'New Mexico'), (3, 'Tokyo-to'), (1, 'Durango'), (1, 'Auckland'), (1, 'Hanoi'), (1, 'Montserrado'), (7, 'Gauteng'), (1, 'Campania'), (1, 'Harare'), (2, 'Bolívar'), (4, 'Guangdong'), (1, 'Fars'), (1, 'Querétaro de Arteaga'), (1, 'Kaohsiung'), (1, 'Tunis'), (1, 'Smolensk'), (1, 'Qaraghandy'), (1, 'Lambayeque'), (1, 'Lugansk'), (1, 'Pyongyang-si'), (1, 'Maritime'), (1, 'al-Zarqa'), (1, 'Sisilia'), (12, 'Liaoning'), (1, 'Chisinau'), (1, 'Voronez'), (1, 'Nara'), (1, 'Bukarest'), (1, 'Midi-Pyrénées'), (2, 'Santa Fé'), (1, 'Wien'), (8, 'Rio de Janeiro'), (1, 'Quintana Roo'), (1, 'Habarovsk'), (1, 'British Colombia'), (1, 'West Azerbaidzan'), (5, 'Gujarat'), (1, 'Ashanti'), (1, 'District of Columbia'), (1, 'East Kasai'), (1, 'Perak'), (7, 'England'), (1, 'Sanaa'), (1, 'Miranda'), (1, 'Oriental'), (1, 'Kowloon and New Kowl'), (1, 'Perm'), (2, 'Florida'), (1, 'Primorje'), (1, 'Hongkong'), (3, 'Inner Mongolia'), (1, 'Udmurtia'), (1, 'Riika'), (1, 'Cochabamba'), (1, 'Baluchistan'), (13, 'São Paulo'), (1, 'Haiphong'), (1, 'Illinois'), (1, 'Kyoto'), (2, 'Kemerovo'), (1, 'West Australia'), (1, 'Santa Cruz'), (1, 'Kwangju'), (1, 'Guayas'), (1, 'Amman'), (1, 'Constantine'), (2, 'Dnipropetrovsk'), (1, 'Kwara & Kogi'), (1, 'Norte de Santander'), (2, 'Fujian'), (1, 'Mato Grosso do Sul'), (1, 'Abu Dhabi'), (1, 'Pusan'), (1, 'Eskisehir'), (4, 'West Java'), (1, 'Hamadan'), (1, 'Rjazan'), (1, 'Nairobi'), (1, 'Ninawa'), (1, 'Aragua'), (1, 'Dhaka'), (1, 'Luanda'), (1, 'Atlantique'), (2, 'La Paz'), (1, 'La Libertad'), (1, 'Nampo-si'), (2, 'Western'), (1, 'Lusaka'), (1, 'Bursa'), (1, 'Kayseri'), (1, 'Provence-Alpes-Côte'), (1, 'Sanliurfa'), (1, 'Lagos'), (1, 'Maranhão'), (1, 'Kumamoto'), (3, 'Arizona'), (5, 'Anhui'), (1, 'Noord-Holland'), (1, '–'), (1, 'Hamgyong P'), (1, 'Maekel'), (1, 'Dubai'), (1, 'Pichincha'), (1, 'North Carolina'), (4, 'Hunan'), (1, 'Hamburg'), (1, 'Québec'), (1, 'Herson'), (4, 'Jilin'), (1, 'West Götanmaan län'), (1, 'Altai'), (1, 'Littoral'), (1, 'Centre'), (6, 'Texas'), (1, 'Asunción'), (1, 'Rostov-na-Donu'), (1, 'Aragonia'), (2, 'Guizhou'), (1, 'Aden'), (1, 'Murcia'), (1, 'Nevada'), (1, 'Viangchan'), (1, 'San Luis Potosí'), (1, 'Leinster'), (1, 'Antioquia'), (1, 'Kalimantan Timur'), (1, 'Zulia'), (1, 'Chongqing'), (1, 'Tucumán'), (1, 'Toskent Shahri'), (1, 'Greater Accra'), (2, 'Tennessee'), (1, 'Taichung'), (1, 'Tula'), (2, 'Chhatisgarh'), (1, 'Sumatera Barat'), (1, 'Grad Sofija'), (2, 'Bahia'), (1, 'Wilayah Persekutuan'), (1, 'Indiana'), (1, 'Carabobo'), (1, 'Tver'), (1, 'Namangan'), (1, 'Khulna'), (1, 'Irbil'), (1, 'Eastern Cape'), (1, 'Georgia'), (1, 'Coast'), (3, 'Santiago'), (1, 'South Australia'), (1, 'Meknès-Tafilalet'), (2, 'East Java'), (1, 'Goiás'), (1, 'Hessen'), (1, 'Kerman'), (2, 'Tamaulipas'), (1, 'Kurgan'), (1, 'Kursk'), (1, 'Odesa'), (1, 'Pomorskie'), (1, 'Yogyakarta'), (3, 'Sichuan'), (12, 'National Capital Reg'), (5, 'Kanagawa'), (1, 'Hamgyong N'), (5, 'Oyo & Osun'), (1, 'Piauí'), (1, 'Ulaanbaatar'), (1, 'Lampung'), (1, 'Novosibirsk'), (1, 'Wielkopolskie'), (1, 'Aguascalientes'), (1, 'Krasnojarsk'), (1, 'Gaziantep'), (3, 'Guangxi'), (1, 'Islamabad'), (1, 'Oran'), (1, 'Ceará'), (1, 'Virginia'), (1, 'Basra'), (1, 'Port Said'), (6, 'Hebei'), (12, 'Buenos Aires'), (1, 'La Habana'), (4, 'KwaZulu-Natal'), (1, 'Mandalay'), (1, 'Zachodnio-Pomorskie'), (1, 'Île-de-France'), (1, 'al-Qalyubiya'), (1, 'Irkutsk'), (1, 'Konya'), (1, 'Tbilisi'), (1, 'Peking'), (1, 'Ouest'), (1, 'Sumatera Selatan'), (1, 'Bulawayo'), (1, 'Qinghai'), (9, 'Heilongjiang'), (1, 'Cortés'), (1, 'Djibouti'), (2, 'Pará'), (1, 'Panamá'), (1, 'Western Mindanao'), (1, 'Lara'), (1, 'Sergipe'), (2, 'Andalusia'), (1, 'Vilna'), (2, 'Fukuoka'), (1, 'Ahal'), (1, 'Valle'), (1, 'Casablanca'), (1, 'Distrito Central'), (7, 'Henan'), (2, 'Lisboa'), (1, 'Kadiogo'), (1, 'Michigan'), (1, 'Saratov'), (1, 'Kalimantan Barat'), (1, 'Chollabuk'), (2, 'Alberta'), (8, 'California'), (2, 'Krasnodar'), (1, 'Kyongsangbuk'), (1, 'Jakarta Raya'), (12, 'Uttar Pradesh'), (1, 'Yerevan'), (1, 'al-Sulaymaniya'), (2, 'Okayama'), (5, 'Rajasthan'), (1, 'Ningxia'), (2, 'Saksi'), (1, 'Skopje'), (1, 'al-Daqahliya'), (1, 'Liguria'), (1, 'San Salvador'), (1, 'Tianjin'), (1, 'Rio Grande do Norte'), (1, 'Montevideo'), (1, 'East Azerbaidzan'), (3, 'Pernambuco'), (1, 'Dolnoslaskie'), (4, 'Chiba'), (1, 'Ishikawa'), (3, 'Guanajuato'), (1, 'Newmaa'), (1, 'Lima'), (1, 'Bamako'), (1, 'Lipetsk'), (1, 'Brazzaville'), (1, 'Toscana'), (1, 'Lubelskie'), (2, 'Southern Tagalog'), (1, 'Gilan'), (1, 'Ho Chi Minh City'), (1, 'Phnom Penh'), (2, 'Tatarstan'), (1, 'Esfahan'), (1, 'Chandigarh'), (3, 'Nuevo León'), (1, 'Tabasco'), (1, 'Niedersachsen')",extra,True,1,
407,world_1,Find the government form name and total population for each government form whose average life expectancy is longer than 72.,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72","(464000, 'Nonmetropolitan Territory of France'), (1731000, 'Overseas Department of France'), (99000, 'Part of Denmark'), (2870000, 'Monarchy (Sultanate)'), (7160400, 'Federation'), (115072000, 'Socialistic Republic'), (320000, 'Nonmetropolitan Territory of The Netherlands'), (2441000, 'Emirate Federation'), (329000, 'US Territory'), (3947000, 'Commonwealth of the US'), (78000, 'Parliamentary Coprincipality'), (1972000, 'Constitutional Monarchy (Emirate)'), (617000, 'Monarchy (Emirate)'), (5605000, 'Socialistic State'), (7255000, 'Special Administrative Region of China'), (82516000, 'Constitutional Monarchy, Federation'), (193050, 'Dependent Territory of the UK')","SELECT sum( T1.Population), T1.GovernmentForm FROM country AS T1  GROUP BY T1.GovernmentForm HAVING avg( T1.LifeExpectancy) > 72","(464000, 'Nonmetropolitan Territory of France'), (1731000, 'Overseas Department of France'), (99000, 'Part of Denmark'), (2870000, 'Monarchy (Sultanate)'), (7160400, 'Federation'), (115072000, 'Socialistic Republic'), (320000, 'Nonmetropolitan Territory of The Netherlands'), (2441000, 'Emirate Federation'), (329000, 'US Territory'), (3947000, 'Commonwealth of the US'), (78000, 'Parliamentary Coprincipality'), (1972000, 'Constitutional Monarchy (Emirate)'), (617000, 'Monarchy (Emirate)'), (5605000, 'Socialistic State'), (7255000, 'Special Administrative Region of China'), (82516000, 'Constitutional Monarchy, Federation'), (193050, 'Dependent Territory of the UK')",medium,True,1,
408,world_1,Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?,"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72","(3705025700, 67.441176470588, 'Asia'), (345780000, 70.946153846154, 'South America'), (30401150, 69.715, 'Oceania'), (784475000, 52.571929824561, 'Africa')","SELECT sum( T1.Population), avg( T1.LifeExpectancy), T1.Continent FROM country AS T1  GROUP BY T1.Continent HAVING avg( T1.LifeExpectancy) < 72","(3705025700, 67.441176470588, 'Asia'), (345780000, 70.946153846154, 'South America'), (30401150, 69.715, 'Oceania'), (784475000, 52.571929824561, 'Africa')",medium,True,1,
409,world_1,What are the names and areas of countries with the top 5 largest area?,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)","SELECT T1.Name, T1.SurfaceArea FROM country AS T1    ORDER BY T1.SurfaceArea DESC LIMIT 1","('Russian Federation', 17075400.0)",medium,False,0,
410,world_1,What are names of countries with the top 3 largest population?,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,"('China',), ('India',), ('United States',)",SELECT T1.Name FROM country AS T1    ORDER BY T1.Population DESC LIMIT 1,"('China',)",medium,False,0,
411,world_1,What are the names of the nations with the 3 lowest populations?,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,"('Heard Island and McDonald Islands',), ('Bouvet Island',), ('British Indian Ocean Territory',)",SELECT T1.Name FROM country AS T1    ORDER BY T1.Population ASC LIMIT 1,"('Bouvet Island',)",medium,False,0,
412,world_1,how many countries are in Asia?,SELECT count(*) FROM country WHERE continent  =  'Asia',"(51,)",SELECT count( *) FROM country AS T1 WHERE T1.Continent = 'Asia',"(51,)",easy,True,1,
413,world_1,What are the names of the countries that are in the continent of Europe and have a population of 80000?,SELECT Name FROM country WHERE continent  =  'Europe' AND Population  =  '80000',,SELECT T1.Name FROM country AS T1 WHERE T1.Continent = 'Europe' and T1.Population = 80000,,medium,True,1,
414,world_1,What is the total population and average area of countries in the continent of North America whose area is bigger than 3000？,"SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  'North America' AND SurfaceArea  >  3000","(480753000, 1344763.7222222222)","SELECT sum( T1.Population), avg( T1.SurfaceArea) FROM country AS T1 WHERE T1.Continent = 'North America' and T1.SurfaceArea > 3000","(480753000, 1344763.7222222222)",hard,True,1,
415,world_1,Which language is spoken by the largest number of countries?,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,"('English',)",SELECT T1.Language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code  GROUP BY T1.CountryCode  ORDER BY count( *) DESC LIMIT 1,,hard,False,0,
416,world_1,What is the language spoken by the largest percentage of people in each country?,"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode, Language","('Dutch', 'NLD', 95.6), ('Banja', 'IDN', 1.8), ('Nepali', 'BTN', 34.8), ('English', 'TON', 0.0), ('English', 'MDV', 0.0), ('Dutch', 'CAN', 0.5), ('English', 'VUT', 28.3), ('Spanish', 'NIC', 97.6), ('Meru', 'KEN', 5.5), ('Polish', 'AUT', 0.2), ('Hindi', 'ARE', 0.0), ('Lezgian', 'AZE', 2.3), ('Náhuatl', 'MEX', 1.8), ('Nyamwesi', 'TZA', 21.1), ('Kotokoli', 'TGO', 5.7), ('Bari', 'SDN', 2.5), ('Chokwe', 'COD', 1.8), ('Miao', 'CHN', 0.7), ('Crioulo', 'CPV', 100.0), ('Chamorro', 'MNP', 30.0), ('Mon-khmer', 'LAO', 16.5), ('Songhai-zerma', 'NER', 21.2), ('Minangkabau', 'IDN', 2.4), ('Urdu', 'PAK', 7.6), ('French', 'LBN', 0.0), ('Mari', 'RUS', 0.4), ('Tahitian', 'PYF', 46.4), ('Kongo', 'COD', 16.0), ('Slovene', 'HRV', 0.0), ('Arabic-French-English', 'TUN', 3.2), ('Creole English', 'PAN', 14.0), ('Gujarati', 'IND', 4.8), ('Khmer', 'VNM', 1.4), ('Swedish', 'NOR', 0.3), ('Romanian', 'AUT', 0.2), ('Somali', 'SOM', 98.3), ('Mende', 'SLE', 34.8), ('Spanish', 'ECU', 93.0), ('Malinke', 'GMB', 34.1), ('Arabic', 'OMN', 76.7), ('Zhuang', 'CHN', 1.4), ('Tsonga', 'MOZ', 12.4), ('Arabic', 'TUR', 1.4), ('Puyi', 'CHN', 0.2), ('Busansi', 'BFA', 3.5), ('Turkish', 'TUR', 87.6), ('Russian', 'GEO', 8.8), ('Swedish', 'DNK', 0.3), ('Italian', 'CHE', 7.7), ('Dutch', 'BEL', 59.2), ('Hindi', 'SUR', 0.0), ('Somali', 'ETH', 4.1), ('Greek', 'GRC', 98.5), ('Kiribati', 'KIR', 98.9), ('Mandarin Chinese', 'MAC', 1.2), ('Hindi', 'FJI', 43.7), ('Soga', 'UGA', 8.2), ('Kpelle', 'GIN', 4.6), ('Pangasinan', 'PHL', 1.8), ('Thai', 'LAO', 7.8), ('Pohnpei', 'FSM', 23.8), ('Ndebele', 'ZAF', 1.5), ('Tiv', 'NGA', 2.3), ('Somba', 'BEN', 6.7), ('Akan', 'CIV', 30.0), ('Tatar', 'UZB', 1.8), ('Gaeli', 'GBR', 0.1), ('Mongo', 'COD', 13.5), ('Ilocano', 'PHL', 9.3), ('Soninke', 'SEN', 1.3), ('Slovak', 'HUN', 0.1), ('Bubi', 'GNQ', 8.7), ('Slovak', 'YUG', 0.7), ('Ukrainian', 'BLR', 1.3), ('Zande', 'COD', 6.1), ('Moba', 'TGO', 5.4), ('Hakka', 'HKG', 1.6), ('Burmese', 'MMR', 69.0), ('Kurdish', 'SYR', 9.0), ('English', 'VCT', 0.0), ('Korean', 'USA', 0.3), ('Gisu', 'UGA', 4.5), ('Kongo', 'COG', 51.5), ('Khmer', 'THA', 1.3), ('Persian', 'IRQ', 0.8), ('Sunda', 'IDN', 15.8), ('Tadzhik', 'KGZ', 0.8), ('Armenian', 'JOR', 1.0), ('Belorussian', 'UKR', 0.3), ('Adja', 'BEN', 11.1), ('Mahoré', 'MYT', 41.9), ('Wolea', 'FSM', 3.7), ('Irish', 'IRL', 1.6), ('Russian', 'UKR', 32.9), ('Ewe', 'TGO', 23.2), ('Spanish', 'PAN', 76.8), ('Kiribati', 'TUV', 7.5), ('Russian', 'EST', 27.8), ('Arabic', 'DZA', 86.0), ('German', 'KAZ', 3.1), ('Maka', 'CMR', 4.9), ('Russian', 'UZB', 10.9), ('Russian', 'RUS', 86.6), ('Araucan', 'CHL', 9.6), ('Zulu', 'SWZ', 2.0), ('Turkish', 'DNK', 0.8), ('Kanuri', 'NER', 4.4), ('Dutch', 'ANT', 0.0), ('Kannada', 'IND', 3.9), ('Persian', 'IRN', 45.7), ('Galecian', 'ESP', 6.4), ('Malay', 'CCK', 0.0), ('Caprivi', 'NAM', 4.7), ('Kazakh', 'TKM', 2.0), ('Chinese', 'KHM', 3.1), ('Shona', 'BWA', 12.3), ('Afar', 'ERI', 4.3), ('Ami', 'TWN', 0.6), ('Teso', 'UGA', 6.0), ('Ibo', 'NGA', 18.1), ('Belorussian', 'EST', 1.4), ('Mbum', 'CAF', 6.4), ('Nyanja', 'MOZ', 3.3), ('Creole English', 'JAM', 94.2), ('French', 'BEL', 32.6), ('Romani', 'ROM', 0.7), ('Balochi', 'PAK', 3.0), ('Creole French', 'MUS', 70.6), ('Tsonga', 'ZAF', 4.3), ('Kamba', 'KEN', 11.2), ('Punjabi', 'IND', 2.8), ('Southsotho', 'ZAF', 7.6), ('German', 'LIE', 89.0), ('Arabic', 'GIB', 7.4), ('Romani', 'BGR', 3.7), ('Russian', 'AZE', 3.0), ('Nuer', 'SDN', 4.9), ('Turkish', 'LIE', 2.5), ('Azerbaijani', 'AZE', 89.0), ('Italian', 'CAN', 1.7), ('Malay', 'MYS', 58.4), ('Portuguese', 'TMP', 0.0), ('Comorian-Arabic', 'COM', 1.6), ('Spanish', 'PRY', 55.1), ('Spanish', 'CAN', 0.7), ('Senufo and Minianka', 'MLI', 12.0), ('Temne', 'SLE', 31.8), ('Japanese', 'JPN', 99.1), ('Indian Languages', 'ARG', 0.3), ('Russian', 'LVA', 32.5), ('Pitcairnese', 'PCN', 0.0), ('Dzongkha', 'BTN', 50.0), ('German', 'ITA', 0.5), ('Ketšua', 'ECU', 7.0), ('Nyanja', 'ZWE', 2.2), ('Spanish', 'USA', 7.5), ('Edo', 'NGA', 3.3), ('Malay', 'IDN', 12.1), ('Greek', 'AUS', 1.6), ('English', 'PLW', 3.2), ('Swedish', 'FIN', 5.7), ('Creole English', 'GRD', 100.0), ('Norwegian', 'SJM', 0.0), ('Hausa', 'NER', 53.1), ('Creole French', 'GLP', 95.0), ('[South]Mande', 'CIV', 7.7), ('Swazi', 'SWZ', 89.9), ('Albaniana', 'ITA', 0.2), ('Japanese', 'USA', 0.2), ('Guaymí', 'PAN', 5.3), ('Yucatec', 'MEX', 1.1), ('Hindi', 'JAM', 1.9), ('Dari', 'AFG', 32.1), ('Polish', 'POL', 97.6), ('English', 'DNK', 0.3), ('Chinese', 'THA', 12.1), ('Ful', 'GMB', 16.2), ('Ndebele', 'BWA', 1.3), ('Hindi', 'MUS', 1.2), ('Turkish', 'AUT', 1.5), ('Hindko', 'PAK', 2.4), ('Berberi', 'DZA', 14.0), ('French', 'MYT', 20.3), ('Spanish', 'VEN', 96.9), ('Spanish', 'URY', 95.7), ('Samoan', 'WSM', 47.5), ('English', 'MYS', 1.6), ('Sumo', 'NIC', 0.2), ('Bhojpuri', 'NPL', 7.5), ('Marendje', 'MOZ', 3.5), ('Belorussian', 'LVA', 4.1), ('Zande', 'SDN', 2.7), ('Gio', 'LBR', 7.9), ('Italian', 'DEU', 0.7), ('Danish', 'DNK', 93.5), ('Spanish', 'HND', 97.2), ('Mantšu', 'CHN', 0.9), ('Khmer', 'KHM', 88.6), ('Creole English', 'NIC', 0.5), ('Albaniana', 'YUG', 16.5), ('Romanian', 'HUN', 0.1), ('Dagara', 'BFA', 3.1), ('Romanian', 'MDA', 61.9), ('Lugbara', 'UGA', 4.7), ('Arabic', 'LBY', 96.0), ('Tagalog', 'USA', 0.4), ('Romanian', 'ROM', 90.7), ('Italian', 'USA', 0.6), ('Vietnamese', 'VNM', 86.8), ('Papuan Languages', 'SLB', 8.6), ('Arabic', 'BEL', 1.6), ('Portuguese', 'FRA', 1.2), ('Catalan', 'ESP', 16.9), ('Italian', 'AUS', 2.2), ('Avarian', 'RUS', 0.4), ('Rwanda', 'COD', 10.3), ('Vietnamese', 'KHM', 5.5), ('Serbo-Croatian', 'AUT', 2.2), ('Embera', 'PAN', 0.6), ('Tatar', 'KAZ', 2.0), ('Malinke', 'LBR', 5.1), ('Chinese', 'NRU', 8.5), ('Kirgiz', 'KGZ', 59.7), ('Marshallese', 'MHL', 96.8), ('Malinke', 'GNB', 6.9), ('Samoan', 'ASM', 90.6), ('Russian', 'BLR', 32.0), ('Pampango', 'PHL', 3.0), ('Sena', 'MOZ', 9.4), ('Serbo-Croatian', 'ROM', 0.1), ('Gilaki', 'IRN', 5.3), ('Hindi', 'IND', 39.9), ('Tadzhik', 'TJK', 62.2), ('Nung', 'VNM', 1.1), ('Serbo-Croatian', 'MKD', 2.0), ('Spanish', 'SLV', 100.0), ('Canton Chinese', 'HKG', 88.7), ('Min', 'TWN', 66.7), ('Danish', 'NOR', 0.4), ('Russian', 'KAZ', 34.7), ('Grebo', 'LBR', 8.9), ('Otomí', 'MEX', 0.4), ('Haya', 'TZA', 5.9), ('Chinese', 'PYF', 2.9), ('Bengali', 'BGD', 97.7), ('Korean', 'GUM', 3.3), ('Turkmenian', 'IRN', 1.6), ('English', 'WSM', 0.6), ('Arabic', 'JOR', 97.9), ('English', 'BRN', 3.1), ('Bulgariana', 'BGR', 83.2), ('Quiché', 'GTM', 10.1), ('Arabic', 'EGY', 98.8), ('Philippene Languages', 'MNP', 34.1), ('Gagauzi', 'MDA', 3.2), ('English', 'FLK', 0.0), ('English', 'USA', 86.2), ('Russian', 'ISR', 8.9), ('Fang', 'GNQ', 84.8), ('Kru', 'CIV', 10.5), ('Chinese', 'USA', 0.6), ('Arabic', 'DJI', 10.6), ('Belorussian', 'BLR', 65.6), ('Pashto', 'PAK', 13.1), ('Arabic', 'FRA', 2.5), ('Trukese', 'FSM', 41.6), ('Gorane', 'TCD', 6.2), ('Malay', 'SGP', 14.1), ('Philippene Languages', 'PLW', 9.2), ('Turkish', 'CYP', 22.4), ('English', 'ASM', 3.1), ('Seselwa', 'SYC', 91.3), ('Garifuna', 'BLZ', 6.8), ('English', 'AIA', 0.0), ('Kiga', 'UGA', 8.3), ('Bullom-sherbro', 'SLE', 3.8), ('Crioulo', 'GNB', 36.4), ('Russian', 'KGZ', 16.2), ('Asami', 'BTN', 15.2), ('English', 'GIB', 88.9), ('Ndebele', 'ZWE', 16.2), ('Diola', 'GMB', 9.2), ('Mortlock', 'FSM', 7.6), ('Tamil', 'REU', 0.0), ('Nepali', 'NPL', 50.4), ('English', 'ABW', 9.5), ('French', 'AND', 6.2), ('Nsenga', 'ZMB', 4.3), ('Creole French', 'BHS', 10.3), ('Canton Chinese', 'AUS', 1.1), ('Mongolian', 'CHN', 0.4), ('Karen', 'MMR', 6.2), ('Luchazi', 'AGO', 2.4), ('English', 'NZL', 87.0), ('Caribbean', 'GUY', 2.2), ('Tibetan', 'CHN', 0.4), ('English', 'GBR', 97.3), ('Chakma', 'BGD', 0.4), ('Bashkir', 'RUS', 0.7), ('Kanem-bornu', 'TCD', 9.0), ('Joruba', 'GHA', 1.3), ('Ukrainian', 'EST', 2.8), ('Bengali', 'IND', 8.2), ('Shan', 'MMR', 8.5), ('English', 'LSO', 0.0), ('Serbo-Croatian', 'HRV', 95.9), ('Punjabi', 'CAN', 0.7), ('Spanish', 'VIR', 13.3), ('Sranantonga', 'SUR', 81.0), ('Uzbek', 'KGZ', 14.1), ('Akan', 'GHA', 52.4), ('Ainu', 'JPN', 0.0), ('Uzbek', 'AFG', 8.8), ('Kekchí', 'GTM', 4.9), ('Norwegian', 'NOR', 96.6), ('Maori', 'NZL', 4.3), ('Chinese', 'CHN', 92.0), ('Kalenjin', 'KEN', 10.8), ('Luimbe-nganguela', 'AGO', 5.4), ('Arabic', 'TUN', 69.9), ('Malagasy', 'MDG', 98.9), ('Masai', 'KEN', 1.6), ('Portuguese', 'LUX', 13.0), ('Polish', 'LTU', 7.0), ('Creole French', 'MTQ', 96.6), ('Songhai', 'MLI', 6.9), ('Tongan', 'ZMB', 11.0), ('Cebuano', 'PHL', 23.3), ('Tatar', 'RUS', 3.2), ('Bambara', 'MLI', 31.8), ('Singali', 'LKA', 60.3), ('Urdu', 'QAT', 0.0), ('Italian', 'LUX', 4.6), ('Miao', 'VNM', 0.9), ('Portuguese', 'MAC', 2.3), ('Ketšua', 'PER', 16.4), ('Luxembourgish', 'LUX', 64.4), ('Mandyako', 'GNB', 4.9), ('Romani', 'ITA', 0.2), ('Creole English', 'VCT', 99.1), ('Portuguese', 'USA', 0.2), ('English', 'MSR', 0.0), ('Dhivehi', 'MDV', 100.0), ('Watyi', 'TGO', 10.3), ('Turkmenian', 'TKM', 76.7), ('Man', 'VNM', 0.7), ('Kabyé', 'TGO', 13.8), ('Thai', 'THA', 52.6), ('Tamashek', 'MLI', 7.3), ('Telugu', 'IND', 7.8), ('Turkish', 'FRA', 0.4), ('Portuguese', 'BRA', 97.5), ('Kuranko', 'SLE', 3.4), ('Nyanja', 'ZMB', 7.8), ('Diola', 'SEN', 5.0), ('Nyaneka-nkhumbi', 'AGO', 5.4), ('Tamil', 'MUS', 0.8), ('Czech', 'CZE', 81.2), ('Hakka', 'TWN', 11.0), ('Turkmenian', 'AFG', 1.9), ('Lao', 'THA', 26.9), ('Swahili', 'TZA', 8.8), ('Mongolian', 'MNG', 78.8), ('Gur', 'CIV', 11.7), ('Ukrainian', 'LTU', 1.1), ('Creole English', 'COL', 0.1), ('Soninke', 'GMB', 7.6), ('Gbaya', 'CAF', 23.8), ('Bali', 'IDN', 1.7), ('Maguindanao', 'PHL', 1.4), ('Kazakh', 'KGZ', 0.8), ('Hungarian', 'AUT', 0.4), ('English', 'MCO', 6.5), ('Goajiro', 'VEN', 0.4), ('Spanish', 'CHL', 89.7), ('English', 'SYC', 3.8), ('Mossi', 'GHA', 15.8), ('Kavango', 'NAM', 9.7), ('Ronga', 'MOZ', 3.7), ('English', 'IRL', 98.4), ('Hungarian', 'ROM', 7.2), ('French', 'RWA', 0.0), ('Hadjarai', 'TCD', 6.7), ('Creole English', 'KNA', 100.0), ('Armenian', 'AZE', 2.0), ('Rapa nui', 'CHL', 0.2), ('Malay', 'BRN', 45.5), ('Creole English', 'ATG', 95.7), ('Mam', 'GTM', 2.7), ('Danish', 'GRL', 12.5), ('English', 'NRU', 7.5), ('French', 'NCL', 34.3), ('Kikuyu', 'KEN', 20.9), ('English', 'SHN', 0.0), ('Yao', 'MWI', 13.2), ('Dariganga', 'MNG', 1.4), ('Italian', 'MCO', 16.1), ('Atayal', 'TWN', 0.4), ('Chewa', 'ZMB', 5.7), ('Serbo-Croatian', 'AUS', 0.6), ('Zulu', 'ZAF', 22.7), ('Bajan', 'BRB', 95.1), ('Chilluk', 'SDN', 1.7), ('Khasi', 'BGD', 0.1), ('Ukrainian', 'KAZ', 5.0), ('Susu', 'GIN', 11.0), ('Creole English', 'BHS', 89.7), ('Samoan-English', 'WSM', 52.0), ('Ukrainian', 'KGZ', 1.7), ('English', 'MLT', 2.1), ('Czech', 'AUT', 0.2), ('English', 'ANT', 7.8), ('Arabic', 'DNK', 0.7), ('Bajad', 'MNG', 1.9), ('Nama', 'NAM', 12.4), ('Spanish', 'CRI', 97.5), ('Wallis', 'WLF', 0.0), ('Hiligaynon', 'PHL', 9.1), ('Assyrian', 'IRQ', 0.8), ('Polish', 'CAN', 0.7), ('Greek', 'DEU', 0.4), ('Portuguese', 'CAN', 0.7), ('Punu-sira-nzebi', 'GAB', 17.1), ('Turkish', 'MKD', 4.0), ('Maya Languages', 'BLZ', 9.6), ('English', 'VGB', 0.0), ('Fang', 'GAB', 35.8), ('Tamang', 'NPL', 4.9), ('Creole English', 'CRI', 2.0), ('Kurdish', 'TUR', 10.6), ('Haiti Creole', 'HTI', 100.0), ('Udmur', 'RUS', 0.3), ('Lithuanian', 'LTU', 81.6), ('Fijian', 'FJI', 50.8), ('Ha', 'TZA', 3.5), ('Swahili', 'BDI', 0.0), ('Armenian', 'GEO', 6.8), ('German', 'DEU', 91.3), ('Bulgariana', 'MDA', 1.6), ('Arabic', 'PAN', 0.6), ('Moravian', 'CZE', 12.9), ('Southern Slavic Languages', 'SWE', 1.3), ('French', 'ITA', 0.5), ('Ketšua', 'BOL', 8.1), ('Portuguese', 'GNB', 8.1), ('Kazakh', 'RUS', 0.4), ('Polish', 'CZE', 0.6), ('Italian', 'ITA', 94.1), ('Malagasy', 'REU', 1.4), ('Gogo', 'TZA', 3.9), ('Orija', 'IND', 3.3), ('Kono-vai', 'SLE', 5.1), ('Albaniana', 'ALB', 97.9), ('Tatar', 'KGZ', 1.3), ('Creole French', 'LCA', 80.0), ('English', 'TCA', 0.0), ('Ukrainian and Russian', 'SVK', 0.6), ('Tamil', 'SGP', 7.4), ('Soninke', 'MLI', 8.7), ('Palau', 'PLW', 82.2), ('San', 'NAM', 1.9), ('Ful', 'MLI', 13.9), ('Italian', 'BEL', 2.4), ('Ambo', 'AGO', 2.4), ('English', 'NIU', 0.0), ('French', 'MTQ', 0.0), ('Ful', 'BFA', 9.7), ('Arabic', 'ARE', 42.0), ('Spanish', 'ARG', 96.8), ('Herero', 'NAM', 8.0), ('French', 'GLP', 0.0), ('Malenasian Languages', 'NCL', 45.4), ('Xhosa', 'ZAF', 17.7), ('Arabic', 'TCD', 12.3), ('Lomwe', 'MOZ', 7.8), ('Masana', 'CMR', 3.9), ('Armenian', 'ARM', 93.4), ('Punjabi', 'PAK', 48.2), ('Turkish', 'NLD', 0.8), ('Caribbean', 'COL', 0.1), ('Serbo-Croatian', 'YUG', 75.2), ('Malinke', 'SEN', 3.8), ('Mixtec', 'MEX', 0.6), ('English', 'BRB', 0.0), ('Mandara', 'CMR', 5.7), ('English', 'BHR', 0.0), ('Georgiana', 'GEO', 71.7), ('Hungarian', 'YUG', 3.4), ('Danish', 'FRO', 0.0), ('Kiribati', 'NRU', 17.9), ('Tamil', 'IND', 6.3), ('Madura', 'IDN', 4.3), ('Chamorro', 'GUM', 29.6), ('Aizo', 'BEN', 8.7), ('Turkish', 'BEL', 0.9), ('Spanish', 'DOM', 98.0), ('English', 'PRI', 47.4), ('Romani', 'CZE', 0.3), ('Turkish', 'GRC', 0.9), ('Lao-Soung', 'LAO', 5.2), ('Arabic', 'QAT', 40.7), ('Italian', 'BRA', 0.4), ('Newari', 'NPL', 3.7), ('Afrikaans', 'NAM', 9.5), ('Nkole', 'UGA', 10.7), ('Tokelau', 'TKL', 0.0), ('Macedonian', 'YUG', 0.5), ('Guaraní', 'PRY', 40.1), ('Santhali', 'BGD', 0.1), ('Tongan', 'ASM', 3.1), ('Rwanda', 'RWA', 100.0), ('Malinke', 'GIN', 23.2), ('French', 'CHE', 19.2), ('Balante', 'GNB', 14.6), ('Hehet', 'TZA', 6.9), ('Russian', 'TJK', 9.7), ('Albaniana', 'MKD', 22.9), ('Uzbek', 'KAZ', 2.3), ('Joruba', 'NGA', 21.4), ('Spanish', 'BOL', 87.7), ('Arabic', 'KWT', 78.1), ('Slovene', 'SVN', 87.9), ('Fukien', 'HKG', 1.9), ('Vietnamese', 'AUS', 0.8), ('Waray-waray', 'PHL', 3.8), ('French', 'SPM', 0.0), ('Kazakh', 'UZB', 3.8), ('Greenlandic', 'GRL', 87.5), ('Korean', 'MNP', 6.5), ('Slovene', 'AUT', 0.4), ('Brahui', 'PAK', 1.2), ('Sidamo', 'ETH', 3.2), ('Turkana', 'KEN', 1.4), ('Spanish', 'CUB', 100.0), ('Cakchiquel', 'GTM', 8.9), ('Osseetti', 'GEO', 2.4), ('Norwegian', 'DNK', 0.3), ('Ful', 'GNB', 16.6), ('Kirundi', 'BDI', 98.1), ('Mbundu', 'AGO', 21.6), ('Carolinian', 'MNP', 4.8), ('Mandjia', 'CAF', 14.8), ('Miskito', 'NIC', 1.6), ('Shambala', 'TZA', 4.3), ('Limba', 'SLE', 8.3), ('German', 'NAM', 0.9), ('Fur', 'SDN', 2.1), ('Hausa', 'NGA', 21.1), ('Hungarian', 'HUN', 98.5), ('Japanese', 'BRA', 0.4), ('Malay', 'THA', 3.6), ('Chinese', 'PRK', 0.1), ('Teke', 'COD', 2.7), ('Turkish', 'DEU', 2.6), ('Portuguese', 'CPV', 0.0), ('Kissi', 'GIN', 6.0), ('Spanish', 'ABW', 7.4), ('Tuvalu', 'TUV', 92.5), ('Indian Languages', 'BRA', 0.2), ('Soqutri', 'YEM', 0.0), ('Chinese', 'MNP', 7.1), ('Sotho', 'LSO', 85.0), ('Chinese', 'KOR', 0.1), ('Bura', 'NGA', 1.6), ('Polish', 'DEU', 0.3), ('Kurdish', 'IRN', 9.1), ('English', 'NFK', 0.0), ('Ukrainian', 'CAN', 0.6), ('Polynesian Languages', 'NCL', 11.6), ('English', 'TKL', 0.0), ('French', 'SYC', 1.3), ('English', 'ZWE', 2.2), ('Venda', 'ZAF', 2.2), ('Uighur', 'CHN', 0.6), ('Comorian', 'COM', 75.0), ('Gurma', 'TGO', 3.4), ('Arabic', 'LBN', 93.0), ('Silesiana', 'CZE', 0.4), ('Gurma', 'GHA', 3.3), ('Estonian', 'EST', 65.3), ('Spanish', 'SWE', 0.6), ('Spanish', 'AND', 44.6), ('Tujia', 'CHN', 0.5), ('Asami', 'IND', 1.5), ('Swedish', 'SWE', 89.5), ('Soninke', 'MRT', 2.7), ('Creole French', 'DMA', 0.0), ('Indian Languages', 'GUF', 1.9), ('Arawakan', 'COL', 0.1), ('Hungarian', 'SVN', 0.5), ('Ukrainian', 'RUS', 1.3), ('Uzbek', 'TJK', 23.2), ('Rundi', 'COD', 3.8), ('Romani', 'MKD', 2.3), ('French', 'LUX', 4.2), ('Chinese', 'SGP', 77.1), ('Malagasy', 'MYT', 16.1), ('Warrau', 'VEN', 0.1), ('Pashto', 'AFG', 52.4), ('Icelandic', 'ISL', 95.7), ('Polish', 'UKR', 0.1), ('German', 'CAN', 1.6), ('German', 'LUX', 2.3), ('Saame', 'FIN', 0.0), ('Chinese', 'CRI', 0.2), ('Malay-English', 'BRN', 28.8), ('Javanese', 'IDN', 39.4), ('German', 'ROM', 0.4), ('German', 'POL', 1.3), ('Spanish', 'PER', 79.8), ('Circassian', 'JOR', 1.0), ('French', 'STP', 0.7), ('Luguru', 'TZA', 4.9), ('Aimará', 'CHL', 0.5), ('Mano', 'LBR', 7.2), ('Ful', 'NGA', 11.3), ('Greek', 'CYP', 74.1), ('Nubian Languages', 'SDN', 8.1), ('Arabic', 'ISR', 18.0), ('Miskito', 'HND', 0.2), ('Catalan', 'AND', 32.3), ('Sardinian', 'ITA', 2.7), ('Hui', 'CHN', 0.8), ('Macedonian', 'BGR', 2.6), ('Hebrew', 'PSE', 4.1), ('German', 'BRA', 0.5), ('Tuvalu', 'NRU', 8.5), ('Italian', 'FRA', 0.4), ('English', 'KNA', 0.0), ('Papiamento', 'ANT', 86.2), ('Tadzhik', 'UZB', 4.4), ('Polish', 'BLR', 0.6), ('Mordva', 'RUS', 0.5), ('Northsotho', 'ZAF', 9.1), ('Russian', 'MDA', 23.2), ('Fries', 'NLD', 3.7), ('Boa', 'COD', 2.3), ('Mazandarani', 'IRN', 3.6), ('Russian', 'FIN', 0.4), ('Chinese', 'CXR', 0.0), ('Aimará', 'BOL', 3.2), ('Arabic', 'SAU', 95.0), ('Portuguese', 'PRT', 99.0), ('Malajalam', 'IND', 3.6), ('Ngbaka', 'CAF', 7.5), ('Dinka', 'SDN', 11.5), ('English', 'KWT', 0.0), ('Luri', 'IRN', 4.3), ('Norwegian', 'SWE', 0.5), ('Philippene Languages', 'GUM', 19.7), ('French', 'HTI', 0.0), ('English', 'BMU', 100.0), ('Lithuanian', 'LVA', 1.2), ('Azerbaijani', 'GEO', 5.5), ('Spanish', 'FRA', 0.4), ('Kazakh', 'KAZ', 46.0), ('Finnish', 'SWE', 2.4), ('Wolof', 'SEN', 48.1), ('German', 'CZE', 0.5), ('Tuvalu', 'KIR', 0.5), ('Ewe', 'GHA', 11.9), ('French', 'MCO', 41.9), ('English', 'AUS', 81.2), ('Bislama', 'VUT', 56.6), ('Arawakan', 'GUY', 1.4), ('Kayah', 'MMR', 0.4), ('Iban', 'MYS', 2.8), ('Arabic-French', 'TUN', 26.3), ('English', 'CAN', 60.4), ('Romansh', 'CHE', 0.6), ('Papiamento', 'ABW', 76.7), ('Ovambo', 'NAM', 50.7), ('Bicol', 'PHL', 5.7), ('Ukrainian', 'LVA', 2.9), ('Acholi', 'UGA', 4.4), ('Fon', 'BEN', 39.8), ('Shona', 'ZWE', 72.1), ('Sindhi', 'PAK', 11.8), ('German', 'CHE', 63.6), ('Dorbet', 'MNG', 2.7), ('Ful', 'GIN', 38.6), ('Rwanda', 'UGA', 3.2), ('Ngoni', 'MWI', 6.7), ('Chichewa', 'MWI', 58.3), ('Arabic', 'ESH', 100.0), ('Arabic', 'PSE', 95.9), ('Berberi', 'LBY', 1.0), ('Ukrainian', 'UKR', 64.7), ('Ibibio', 'NGA', 5.6), ('Mossi', 'BFA', 50.2), ('Italian', 'ARG', 1.7), ('English', 'CCK', 0.0), ('Chinese', 'PLW', 1.6), ('Urdu', 'IND', 5.1), ('Sunda', 'TMP', 0.0), ('Wolof', 'MRT', 6.6), ('Korean', 'KOR', 99.9), ('Spanish', 'PRI', 51.3), ('Guaraní', 'BOL', 0.1), ('Nyika', 'KEN', 4.8), ('Dong', 'CHN', 0.2), ('Marathi', 'MUS', 0.7), ('Hassaniya', 'MRT', 81.7), ('Dutch', 'ABW', 5.3), ('Yalunka', 'SLE', 3.4), ('Kurdish', 'IRQ', 19.0), ('Azerbaijani', 'IRN', 16.8), ('Tho', 'VNM', 1.8), ('Somali', 'DJI', 43.9), ('Spanish', 'COL', 99.0), ('Makonde', 'TZA', 5.9), ('Mpongwe', 'GAB', 14.6), ('Tamashek', 'NER', 10.4), ('Mboshi', 'COG', 11.4), ('Korean', 'PRK', 99.9), ('Tongan', 'TON', 98.3), ('Arabic', 'NLD', 0.9), ('Swazi', 'ZAF', 2.5), ('Arabic', 'AUS', 1.0), ('Bariba', 'BEN', 8.7), ('Zulu', 'LSO', 15.0), ('Oromo', 'ETH', 31.0), ('Hindi', 'TTO', 3.4), ('Makua', 'MOZ', 27.8), ('Slovak', 'SVK', 85.6), ('Naudemba', 'TGO', 4.1), ('English', 'ISL', 0.0), ('Polish', 'LVA', 2.1), ('Tandjile', 'TCD', 6.5), ('Maithili', 'NPL', 11.9), ('Gusii', 'KEN', 6.1), ('Bakhtyari', 'IRN', 1.7), ('English', 'CYM', 0.0), ('Macedonian', 'MKD', 66.5), ('Kosrean', 'FSM', 7.3), ('Wolof', 'GMB', 12.6), ('Luvale', 'AGO', 3.6), ('Spanish', 'ESP', 74.4), ('Ouaddai', 'TCD', 8.7), ('Marathi', 'IND', 7.4), ('Afar', 'DJI', 34.8), ('Canton Chinese', 'MAC', 85.6), ('Tamil', 'MYS', 3.9), ('Lozi', 'ZMB', 6.4), ('English', 'MAC', 0.5), ('Lotuko', 'SDN', 1.5), ('Russian', 'TKM', 6.7), ('Slovak', 'CZE', 3.1), ('Eskimo Languages', 'CAN', 0.1), ('German', 'BEL', 1.0), ('Romanian', 'UKR', 0.7), ('Bhojpuri', 'MUS', 21.1), ('Zenaga', 'MRT', 1.2), ('Tigrinja', 'ETH', 7.2), ('Chokwe', 'AGO', 4.2), ('Ane', 'TGO', 5.7), ('Saame', 'NOR', 0.0), ('Bilin', 'ERI', 3.0), ('Tšam', 'KHM', 2.4), ('Punu', 'COG', 2.9), ('Arabic', 'SYR', 90.0), ('Macedonian', 'ALB', 0.1), ('Maori', 'COK', 0.0), ('Garifuna', 'HND', 1.3), ('Romani', 'YUG', 1.4), ('Gurma', 'BFA', 5.7), ('English', 'TTO', 93.5), ('Muong', 'VNM', 1.5), ('French', 'VIR', 2.5), ('English', 'GUM', 37.5), ('Azerbaijani', 'ARM', 2.6), ('Ful', 'MRT', 1.2), ('Chechen', 'RUS', 0.6), ('Shona', 'MOZ', 6.5), ('Kazakh', 'MNG', 5.9), ('Dyula', 'BFA', 2.6), ('Ukrainian', 'MDA', 8.6), ('Balochi', 'OMN', 0.0), ('Mandarin Chinese', 'TWN', 20.1), ('Loma', 'LBR', 5.8), ('Ful', 'SEN', 21.7), ('Fang', 'CMR', 19.7), ('Sinaberberi', 'EGY', 0.0), ('German', 'PRY', 0.9), ('Tikar', 'CMR', 7.4), ('Luhya', 'KEN', 13.8), ('Kpelle', 'LBR', 19.5), ('Crioulo', 'STP', 86.3), ('Russian', 'SJM', 0.0), ('Chinese', 'CAN', 2.5), ('Ganda', 'UGA', 18.1), ('English', 'ATG', 0.0), ('Mayo-kebbi', 'TCD', 11.5), ('Yi', 'CHN', 0.6), ('Walaita', 'ETH', 2.8), ('Comorian-French', 'COM', 12.9), ('Pilipino', 'PHL', 29.3), ('German', 'AUS', 0.6), ('Mbete', 'GAB', 13.8), ('Amhara', 'ETH', 30.0), ('Futuna', 'WLF', 0.0), ('Bassa', 'LBR', 13.7), ('Hungarian', 'SVK', 10.5), ('Friuli', 'ITA', 1.2), ('Tswana', 'BWA', 75.5), ('Chuvash', 'RUS', 0.9), ('French', 'USA', 0.7), ('Uzbek', 'TKM', 9.2), ('Monegasque', 'MCO', 16.1), ('Teke', 'COG', 17.3), ('Ful', 'BEN', 5.6), ('Creole French', 'REU', 91.5), ('Tripuri', 'BGD', 0.1), ('French', 'VUT', 14.2), ('English', 'VIR', 81.7), ('Chuabo', 'MOZ', 5.7), ('Zapotec', 'MEX', 0.6), ('Chaga and Pare', 'TZA', 4.9), ('Serbo-Croatian', 'HUN', 0.2), ('Creole French', 'DOM', 2.0), ('Saraiki', 'PAK', 9.8), ('Marma', 'BGD', 0.2), ('Russian', 'LTU', 8.1), ('Chinese', 'BRN', 9.3), ('Chin', 'MMR', 2.2), ('French', 'MDG', 0.0), ('Arabic', 'SDN', 49.4), ('Gurage', 'ETH', 4.7), ('French', 'MUS', 3.4), ('Sara', 'TCD', 27.7), ('Sara', 'CAF', 6.4), ('Tigrinja', 'ERI', 49.1), ('Arabic', 'SOM', 0.0), ('Portuguese', 'PRY', 3.2), ('English', 'NOR', 0.5), ('Basque', 'ESP', 1.6), ('Kymri', 'GBR', 0.9), ('Cuna', 'PAN', 2.0), ('Spanish', 'GTM', 64.7), ('Beja', 'SDN', 6.4), ('Niue', 'NIU', 0.0), ('Latvian', 'LVA', 55.1), ('Sango', 'COG', 2.6), ('English', 'LCA', 20.0), ('Creole English', 'GUY', 96.4), ('Kru', 'LBR', 7.2), ('Hadareb', 'ERI', 3.8), ('Banda', 'CAF', 23.5), ('Slovene', 'ITA', 0.2), ('Polynesian Languages', 'SLB', 3.8), ('Serbo-Croatian', 'BIH', 99.2), ('Romani', 'SVK', 1.7), ('Kongo', 'AGO', 13.2), ('Chinese', 'VNM', 1.4), ('Mon', 'MMR', 2.4), ('Chibcha', 'COL', 0.4), ('Abhyasi', 'GEO', 1.7), ('English', 'JPN', 0.1), ('Bemba', 'ZMB', 29.7), ('Italian', 'LIE', 2.5), ('French', 'BDI', 0.0), ('Lomwe', 'MWI', 18.4), ('Ukrainian', 'POL', 0.6), ('English', 'MNP', 4.8), ('Estonian', 'FIN', 0.2), ('Tharu', 'NPL', 5.4), ('Chinese', 'JPN', 0.2), ('Balochi', 'AFG', 0.9), ('Luo', 'KEN', 12.8), ('Kachin', 'MMR', 1.4), ('Nauru', 'NRU', 57.5), ('Malenasian Languages', 'PNG', 20.0), ('Romani', 'HUN', 0.5), ('Bulgariana', 'UKR', 0.3), ('Greek', 'ALB', 1.8), ('French', 'FRA', 93.6), ('San', 'BWA', 3.5), ('Spanish', 'BLZ', 31.6), ('Paiwan', 'TWN', 0.3), ('Comorian-Swahili', 'COM', 0.5), ('Japanese', 'GUM', 2.0), ('Ga-adangme', 'GHA', 7.8), ('Yap', 'FSM', 5.8), ('Ijo', 'NGA', 1.8), ('Loma', 'GIN', 2.3), ('Finnish', 'FIN', 92.7), ('English', 'UMI', 0.0), ('Comorian-madagassi', 'COM', 5.5), ('Korean', 'JPN', 0.5), ('Belorussian', 'LTU', 1.4), ('Creole French', 'GUF', 94.3), ('Aimará', 'PER', 2.3), ('Hungarian', 'UKR', 0.3), ('Southern Slavic Languages', 'DEU', 1.4), ('Kanuri', 'NGA', 4.1), ('English', 'MHL', 0.0), ('Comorian', 'REU', 2.8), ('Nahua', 'SLV', 0.0), ('Hebrew', 'ISR', 63.1), ('Vietnamese', 'USA', 0.2), ('French', 'PYF', 40.8), ('Duala', 'CMR', 10.9), ('Lango', 'UGA', 5.9), ('Hindi', 'NPL', 3.0), ('Khoekhoe', 'BWA', 2.5), ('German', 'DNK', 0.5), ('English', 'COK', 0.0), ('Tamil', 'LKA', 19.6), ('Creole English', 'TTO', 2.9), ('Tigre', 'ERI', 31.7), ('Belorussian', 'POL', 0.5), ('Creole English', 'DMA', 100.0), ('German', 'AUT', 92.0), ('German', 'USA', 0.7), ('Belorussian', 'RUS', 0.3), ('Chiu chau', 'HKG', 1.4), ('Ovimbundu', 'AGO', 37.2), ('Chinese', 'REU', 2.8), ('Faroese', 'FRO', 100.0), ('Mbete', 'COG', 4.8), ('English', 'CXR', 0.0), ('French', 'CAN', 23.4), ('Tswana', 'ZAF', 8.1), ('Arabic', 'YEM', 99.6), ('Bamileke-bamum', 'CMR', 18.6), ('Joruba', 'BEN', 12.2), ('Maltese', 'MLT', 95.8), ('English', 'BLZ', 50.8), ('Mixed Languages', 'LKA', 19.6), ('Berberi', 'MAR', 33.0), ('Chibcha', 'CRI', 0.3), ('Spanish', 'MEX', 92.1), ('Azerbaijani', 'IRQ', 1.7), ('Nyakusa', 'TZA', 5.4), ('Arabic', 'MAR', 65.0), ('Czech and Moravian', 'SVK', 1.1), ('Buryat', 'MNG', 1.7), ('Serer', 'SEN', 12.5), ('Serbo-Croatian', 'SVN', 7.9), ('Arabic', 'SWE', 0.8), ('Ful', 'NER', 9.7), ('Arabic', 'IRQ', 77.2), ('Portuguese', 'AND', 10.8), ('Finnish', 'EST', 0.7), ('Tukulor', 'MRT', 5.4), ('Thai', 'VNM', 1.6), ('Ukrainian', 'ROM', 0.3), ('Arabic', 'BHR', 67.7), ('Rakhine', 'MMR', 4.5), ('Papuan Languages', 'PNG', 78.1), ('Lao', 'LAO', 67.2), ('Karakalpak', 'UZB', 2.0), ('Dusun', 'MYS', 1.1), ('Armenian', 'LBN', 5.9), ('Yalunka', 'GIN', 2.9), ('Uzbek', 'UZB', 72.6), ('Balochi', 'IRN', 2.3), ('English', 'HKG', 2.2), ('Ful', 'SLE', 3.8), ('Creole English', 'HND', 0.2), ('Italian', 'VAT', 0.0), ('Polish', 'USA', 0.3), ('Italian', 'SMR', 100.0), ('Maranao', 'PHL', 1.3), ('Arabic', 'IRN', 2.2), ('Batakki', 'IDN', 2.2), ('Chinese', 'MYS', 9.0), ('German', 'HUN', 0.4), ('Hungarian', 'CZE', 0.2), ('Philippene Languages', 'JPN', 0.1), ('Turkish', 'BGR', 9.4), ('Luba', 'COD', 18.0), ('Saho', 'ERI', 3.0), ('Afrikaans', 'ZAF', 14.3), ('Ngala and Bangi', 'COD', 5.8), ('Tswa', 'MOZ', 6.0), ('Bugi', 'IDN', 2.2), ('Ful', 'CMR', 9.6), ('Garo', 'BGD', 0.1), ('English', 'ZAF', 8.5), ('Kuy', 'THA', 1.1), ('Malenasian Languages', 'SLB', 85.6), ('Malinke', 'CIV', 11.4), ('English', 'TUV', 0.0)","SELECT T1.Language, T1.CountryCode, max( T1.Percentage) FROM countrylanguage AS T1  GROUP BY T1.CountryCode",,medium,False,0,
417,world_1,What is the total number of countries where Spanish is spoken by the largest percentage of people?,"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode","(1, 7.4), (1, 97.5), (1, 55.1), (1, 93.0), (1, 79.8), (1, 95.7), (1, 100.0), (1, 51.3), (1, 76.8), (1, 0.4), (1, 89.7), (1, 96.9), (1, 64.7), (1, 96.8), (1, 7.5), (1, 97.2), (1, 13.3), (1, 100.0), (1, 97.6), (1, 99.0), (1, 0.7), (1, 31.6), (1, 44.6), (1, 87.7), (1, 92.1), (1, 0.6), (1, 98.0), (1, 74.4)","SELECT count( *), max( T2.Percentage) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'Spanish'","(28, 100.0)",extra,False,0,
418,world_1,What are the codes of countries where Spanish is spoken by the largest percentage of people?,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  'Spanish' GROUP BY CountryCode","('ABW', 7.4), ('CRI', 97.5), ('PRY', 55.1), ('ECU', 93.0), ('PER', 79.8), ('URY', 95.7), ('SLV', 100.0), ('PRI', 51.3), ('PAN', 76.8), ('FRA', 0.4), ('CHL', 89.7), ('VEN', 96.9), ('GTM', 64.7), ('ARG', 96.8), ('USA', 7.5), ('HND', 97.2), ('VIR', 13.3), ('CUB', 100.0), ('NIC', 97.6), ('COL', 99.0), ('CAN', 0.7), ('BLZ', 31.6), ('AND', 44.6), ('BOL', 87.7), ('MEX', 92.1), ('SWE', 0.6), ('DOM', 98.0), ('ESP', 74.4)","SELECT T1.CountryCode, max( T1.Percentage) FROM countrylanguage AS T1 WHERE T1.Language = 'Spanish' GROUP BY T1.CountryCode","('ABW', 7.4), ('CRI', 97.5), ('PRY', 55.1), ('ECU', 93.0), ('PER', 79.8), ('URY', 95.7), ('SLV', 100.0), ('PRI', 51.3), ('PAN', 76.8), ('FRA', 0.4), ('CHL', 89.7), ('VEN', 96.9), ('GTM', 64.7), ('ARG', 96.8), ('USA', 7.5), ('HND', 97.2), ('VIR', 13.3), ('CUB', 100.0), ('NIC', 97.6), ('COL', 99.0), ('CAN', 0.7), ('BLZ', 31.6), ('AND', 44.6), ('BOL', 87.7), ('MEX', 92.1), ('SWE', 0.6), ('DOM', 98.0), ('ESP', 74.4)",medium,True,1,
419,orchestra,How many conductors are there?,SELECT count(*) FROM conductor,"(12,)",SELECT count( *) FROM conductor AS T1,"(12,)",easy,True,1,
420,orchestra,List the names of conductors in ascending order of age.,SELECT Name FROM conductor ORDER BY Age ASC,"('Antal Doráti',), ('Igor Stravinsky',), ('Michael Tilson Thomas',), ('Colin Davis',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Paul Jorgensen',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)",SELECT T1.Name FROM conductor AS T1     ORDER BY T1.Age ASC,"('Antal Doráti',), ('Igor Stravinsky',), ('Michael Tilson Thomas',), ('Colin Davis',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Paul Jorgensen',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)",easy,True,1,
421,orchestra,What are the names of conductors whose nationalities are not 'USA'?,SELECT Name FROM conductor WHERE Nationality != 'USA',"('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)",SELECT T1.Name FROM conductor AS T1 WHERE T1.Nationality != 'USA',"('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)",easy,True,1,
422,orchestra,What are the record companies of orchestras in descending order of years in which they were founded?,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,"('Columbia Masterworks',), ('Philips Classics Records',), ('Philips',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Delos Records',), ('Decca Records',), ('Kultur',)",SELECT T1.Record_Company FROM orchestra AS T1     ORDER BY T1.Year_of_Founded DESC,"('Columbia Masterworks',), ('Philips Classics Records',), ('Philips',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Delos Records',), ('Decca Records',), ('Kultur',)",easy,True,1,
423,orchestra,What is the average attendance of shows?,SELECT avg(Attendance) FROM SHOW,"(1326.4,)",SELECT avg( T1.Attendance) FROM show AS T1,"(1326.4,)",easy,True,1,
424,orchestra,What are the maximum and minimum share of performances whose type is not 'Live final'.,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != 'Live final'","('44.7%', '22.7%')","SELECT max( T1.Share), min( T1.Share) FROM performance AS T1 WHERE T1.Type != 'Live final'","('44.7%', '22.7%')",medium,True,1,
425,orchestra,How many different nationalities do conductors have?,SELECT count(DISTINCT Nationality) FROM conductor,"(3,)",SELECT DISTINCT count(DISTINCT T1.Nationality) FROM conductor AS T1,"(3,)",easy,True,1,
426,orchestra,List names of conductors in descending order of years of work.,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,"('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Michael Tilson Thomas',), ('Charles Dutoit',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Igor Stravinsky',), ('Seiji Ozawa',), ('Antal Doráti',), ('Colin Davis',)",SELECT T1.Name FROM conductor AS T1     ORDER BY T1.Year_of_Work DESC,"('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Michael Tilson Thomas',), ('Charles Dutoit',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Igor Stravinsky',), ('Seiji Ozawa',), ('Antal Doráti',), ('Colin Davis',)",easy,True,1,
427,orchestra,List the name of the conductor with the most years of work.,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,"('Robert Craft',)",SELECT T1.Name FROM conductor AS T1    ORDER BY T1.Year_of_Work DESC LIMIT 1,"('Robert Craft',)",medium,True,1,
428,orchestra,Show the names of conductors and the orchestras they have conducted.,"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID","('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')","SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID","('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')",medium,True,1,
429,orchestra,Show the names of conductors that have conducted more than one orchestras.,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID HAVING count( *) > 1,,medium,True,1,
430,orchestra,Show the name of the conductor that has conducted the most number of orchestras.,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,"('Seiji Ozawa',)",SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID  GROUP BY T2.Conductor_ID  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
431,orchestra,Please show the name of the conductor that has conducted orchestras founded after 2008.,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,"('Igor Stravinsky',)",SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008,"('Igor Stravinsky',)",medium,True,1,
432,orchestra,Please show the different record companies and the corresponding number of orchestras.,"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company","('RCA', 1), ('Kultur', 1), ('Delos Records', 1), ('Decca Records', 2), ('Mercury Records', 1), ('Columbia Masterworks', 1), ('Koch Records / Naxos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Philips', 1), ('Philips Classics Records', 1)","SELECT T1.Record_Company, count( *) FROM orchestra AS T1  GROUP BY T1.Record_Company","('RCA', 1), ('Kultur', 1), ('Delos Records', 1), ('Decca Records', 2), ('Mercury Records', 1), ('Columbia Masterworks', 1), ('Koch Records / Naxos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Philips', 1), ('Philips Classics Records', 1)",medium,True,1,
433,orchestra,Please show the record formats of orchestras in ascending order of count.,SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,"('DVD',), ('CD / LP',), ('CD',)",SELECT T1.Major_Record_Format FROM orchestra AS T1 JOIN performance AS T13 ON T1.Orchestra_ID = T13.Orchestra_ID  GROUP BY T1.Major_Record_Format   ORDER BY count( *) ASC,"('DVD',), ('CD / LP',), ('CD',)",medium,True,1,
434,orchestra,List the record company shared by the most number of orchestras.,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,"('Decca Records',)",SELECT T1.Record_Company FROM orchestra AS T1  GROUP BY T1.Record_Company  ORDER BY count( *) DESC LIMIT 1,"('Decca Records',)",hard,True,1,
435,orchestra,List the names of orchestras that have no performance.,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),"('San Francisco Symphony Orchestra',)",SELECT T1.Orchestra FROM orchestra AS T1 WHERE T1.Orchestra_ID NOT IN (SELECT T22.Orchestra_ID FROM performance AS T22        ),"('San Francisco Symphony Orchestra',)",hard,True,1,
436,orchestra,Show the record companies shared by orchestras founded before 2003 and after 2003.,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,"('Decca Records',)",SELECT T1.Record_Company FROM orchestra AS T1 WHERE T1.Year_of_Founded < 2003     INTERSECT SELECT T2.Record_Company FROM orchestra AS T2 WHERE T2.Year_of_Founded > 2003,"('Decca Records',)",hard,True,1,
437,orchestra,Find the number of orchestras whose record format is 'CD' or 'DVD'.,SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  'CD' OR Major_Record_Format  =  'DVD',"(11,)",SELECT count( *) FROM orchestra AS T1 WHERE T1.Major_Record_Format = 'CD' or T1.Major_Record_Format = 'DVD',"(11,)",medium,True,1,
438,orchestra,Show the years in which orchestras that have given more than one performance are founded.,SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T1.Year_of_Founded HAVING COUNT(*)  >  1,"(2002.0,), (2003.0,), (2008.0,)",SELECT T1.Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID  GROUP BY T2.Orchestra_ID HAVING count( *) > 1,,medium,False,0,
439,network_1,How many high schoolers are there?,SELECT count(*) FROM high_schooler,"(16,)",SELECT count( *) FROM high_schooler AS T1,"(16,)",easy,True,1,
440,network_1,Show the names and grades of each high schooler.,"SELECT name ,  grade FROM high_schooler","('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)","SELECT T1.name, T1.grade FROM high_schooler AS T1","('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)",medium,True,1,
441,network_1,Show all the grades of the high schoolers.,SELECT grade FROM high_schooler,"(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)",SELECT T1.grade FROM high_schooler AS T1,"(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)",easy,True,1,
442,network_1,What grade is Kyle in?,SELECT grade FROM high_schooler WHERE name  =  'Kyle',"(12,)",SELECT T1.grade FROM high_schooler AS T1 WHERE T1.name = 'Kyle',"(12,)",easy,True,1,
443,network_1,Show the names of all high schoolers in grade 10.,SELECT name FROM high_schooler WHERE grade  =  10,"('Haley',), ('Andrew',), ('Kris',), ('Brittany',)",SELECT T1.name FROM high_schooler AS T1 WHERE T1.grade = 10,"('Haley',), ('Andrew',), ('Kris',), ('Brittany',)",easy,True,1,
444,network_1,Show the ID of the high schooler named Kyle.,SELECT ID FROM high_schooler WHERE name  =  'Kyle',"(1934,)",SELECT T1.ID FROM high_schooler AS T1 WHERE T1.name = 'Kyle',"(1934,)",easy,True,1,
445,network_1,How many high schoolers are there in grade 9 or 10?,SELECT count(*) FROM high_schooler WHERE grade  =  9 OR grade  =  10,"(8,)",SELECT count( *) FROM high_schooler AS T1 WHERE T1.grade = 9 or T1.grade = 10,"(8,)",medium,True,1,
446,network_1,Show the number of high schoolers for each grade.,"SELECT grade ,  count(*) FROM high_schooler GROUP BY grade","(10, 4), (9, 4), (12, 4), (11, 4)","SELECT T1.grade, count( *) FROM high_schooler AS T1  GROUP BY T1.grade","(10, 4), (9, 4), (12, 4), (11, 4)",medium,True,1,
447,network_1,Which grade has the most high schoolers?,SELECT grade FROM high_schooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,"(10,)",SELECT T1.grade FROM high_schooler AS T1  GROUP BY T1.grade  ORDER BY count( *) DESC LIMIT 1,"(10,)",hard,True,1,
448,network_1,Show me all grades that have at least 4 students.,SELECT grade FROM high_schooler GROUP BY grade HAVING count(*)  >=  4,"(10,), (9,), (12,), (11,)",SELECT T1.grade FROM high_schooler AS T1  GROUP BY T1.grade HAVING count( *) >= 4,"(10,), (9,), (12,), (11,)",easy,True,1,
449,network_1,Show the student IDs and numbers of friends corresponding to each.,"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id","(1510, 2), (1316, 1), (1661, 1), (1689, 2), (1501, 1), (1381, 1), (1782, 3), (1468, 2), (1709, 1), (1934, 1), (1911, 1), (1101, 1), (1304, 1), (1247, 2)","SELECT T1.student_id, count( *) FROM friend AS T1  GROUP BY T1.student_id","(1510, 2), (1316, 1), (1661, 1), (1689, 2), (1501, 1), (1381, 1), (1782, 3), (1468, 2), (1709, 1), (1934, 1), (1911, 1), (1101, 1), (1304, 1), (1247, 2)",medium,True,1,
450,network_1,Show the names of high school students and their corresponding number of friends.,"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id GROUP BY T2.name","('Logan', 1), ('Kris', 2), ('Jessica', 1), ('Haley', 1), ('Cassandra', 1), ('Austin', 1), ('Kyle', 1), ('Tiffany', 1), ('Jordan', 3), ('Gabriel', 3), ('Alexis', 2), ('Andrew', 3)","SELECT T1.name, count( *) FROM high_schooler AS T1 JOIN friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T1.name","('Logan', 1), ('Kris', 1), ('Jessica', 2), ('Haley', 1), ('Cassandra', 1), ('Austin', 1), ('John', 1), ('Kyle', 2), ('Jordan', 2), ('Tiffany', 1), ('Gabriel', 2), ('Brittany', 2), ('Alexis', 2), ('Andrew', 1)",medium,False,0,
451,network_1,What is the name of the high schooler who has the greatest number of friends?,SELECT T2.name FROM Friend AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1,"('Jordan',)",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T2.friend_id  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
452,network_1,Show the names of high schoolers who have at least 3 friends.,SELECT T2.name FROM Friend AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id GROUP BY T2.name HAVING count(*)  >=  3,"('Jordan',), ('Gabriel',), ('Andrew',)",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.ID = T2.friend_id  GROUP BY T2.friend_id HAVING count( *) >= 3,,medium,False,0,
453,network_1,Show the names of all of the high schooler Kyle's friends.,SELECT T3.name FROM Friend AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id JOIN high_schooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  'Kyle',"('Jordan',)",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.ID = T2.friend_id WHERE T1.name = 'Kyle',"('Kyle',), ('Kyle',)",hard,False,0,
454,network_1,How many friends does the high school student Kyle have?,SELECT count(*) FROM Friend AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle',"(1,)",SELECT count( *) FROM friend AS T1 JOIN high_schooler AS T2 ON T1.friend_id = T2.ID WHERE T2.name = 'Kyle',"(2,)",medium,False,0,
455,network_1,Show ids of all students who do not have any friends.,SELECT id FROM high_schooler EXCEPT SELECT student_id FROM Friend,"(1641,), (1025,)",SELECT T1.ID FROM high_schooler AS T1        EXCEPT SELECT T2.student_id FROM friend AS T2,"(1641,), (1025,)",hard,True,1,
456,network_1,Show names of all high school students who do not have any friends.,SELECT name FROM high_schooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id,"('John',), ('Brittany',)",SELECT T1.name FROM high_schooler AS T1        EXCEPT SELECT T2.name FROM high_schooler AS T2 JOIN friend AS T3 ON T2.ID = T3.friend_id,,hard,False,0,
457,network_1,Show the ids of high schoolers who have friends and are also liked by someone else.,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,"(1468,), (1709,), (1934,), (1689,), (1101,), (1501,), (1304,), (1247,)",SELECT T1.student_id FROM friend AS T1      INTERSECT SELECT T2.liked_id FROM likes AS T2,"(1468,), (1709,), (1934,), (1689,), (1101,), (1501,), (1304,), (1247,)",hard,True,1,
458,network_1,Show name of all students who have some friends and also are liked by someone else.,SELECT T2.name FROM Friend AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN high_schooler AS T2 ON T1.liked_id  =  T2.id,"('Kyle',), ('Jordan',), ('Gabriel',), ('Kris',), ('Jessica',), ('Haley',), ('Alexis',), ('Cassandra',)",SELECT T1.name FROM high_schooler AS T1      INTERSECT SELECT T2.name FROM high_schooler AS T2 JOIN likes AS T3 ON T2.ID = T3.student_id,"('Austin',), ('John',), ('Kyle',), ('Gabriel',), ('Jessica',), ('Brittany',), ('Alexis',), ('Cassandra',), ('Andrew',)",hard,False,0,
459,network_1,Count the number of likes for each student id.,"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id","(1641, 1), (1025, 1), (1782, 1), (1316, 1), (1709, 1), (1934, 1), (1689, 1), (1911, 1), (1501, 1), (1247, 1)","SELECT T1.student_id, count( *) FROM likes AS T1  GROUP BY T1.student_id","(1641, 1), (1025, 1), (1782, 1), (1316, 1), (1709, 1), (1934, 1), (1689, 1), (1911, 1), (1501, 1), (1247, 1)",medium,True,1,
460,network_1,"Show the names of high schoolers who have likes, and numbers of likes for each.","SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id GROUP BY T2.name","('Austin', 1), ('John', 1), ('Kyle', 1), ('Gabriel', 2), ('Jessica', 1), ('Brittany', 1), ('Alexis', 1), ('Cassandra', 1), ('Andrew', 1)","SELECT T1.name, count( *) FROM high_schooler AS T1 JOIN likes AS T2 ON T1.ID = T2.student_id  GROUP BY T1.name","('Austin', 1), ('John', 1), ('Kyle', 1), ('Gabriel', 2), ('Jessica', 1), ('Brittany', 1), ('Alexis', 1), ('Cassandra', 1), ('Andrew', 1)",medium,True,1,
461,network_1,What is the name of the high schooler who has the greatest number of likes?,SELECT T2.name FROM Likes AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id GROUP BY T2.name ORDER BY count(*) DESC LIMIT 1,"('Gabriel',)",SELECT T1.name FROM high_schooler AS T1 JOIN likes AS T2 ON T1.ID = T2.student_id  GROUP BY T2.student_id  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
462,network_1,Show the names of students who have at least 2 likes.,SELECT T2.name FROM Likes AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id GROUP BY T2.name HAVING count(*)  >=  2,"('Gabriel',)",SELECT T1.name FROM high_schooler AS T1 JOIN likes AS T2 ON T1.ID = T2.student_id  GROUP BY T2.student_id HAVING count( *) >= 2,,medium,False,0,
463,network_1,Show the names of students who have a grade higher than 5 and have at least 2 friends.,SELECT T2.name FROM Friend AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T2.name HAVING count(*)  >=  2,"('Andrew',), ('Jordan',), ('Gabriel',), ('Kris',), ('Alexis',)",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.ID = T2.friend_id WHERE T1.grade > 5 GROUP BY T2.friend_id HAVING count( *) >= 2,,hard,False,0,
464,network_1,How many likes does Kyle have?,SELECT count(*) FROM Likes AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  'Kyle',"(1,)",SELECT count( *) FROM likes AS T1 JOIN high_schooler AS T2 ON T1.student_id = T2.ID WHERE T2.name = 'Kyle',"(1,)",medium,True,1,
465,network_1,Find the average grade of all students who have some friends.,SELECT avg(grade) FROM high_schooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id),"(10.428571428571,)",SELECT avg( T1.grade) FROM high_schooler AS T1 WHERE T1.ID in (SELECT T22.student_id FROM friend AS T22 JOIN high_schooler AS T23 ON T22.friend_id = T23.ID        ),"(10.428571428571,)",hard,True,1,
466,network_1,Find the minimum grade of students who have no friends.,SELECT min(grade) FROM high_schooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.id),"(10,)",SELECT min( T1.grade) FROM high_schooler AS T1 WHERE T1.ID NOT IN (SELECT T22.student_id FROM friend AS T22 JOIN high_schooler AS T23 ON T22.friend_id = T23.ID        ),"(10,)",extra,True,1,
467,dog_kennels,Which states have both owners and professionals living there?,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,"('Mississippi',), ('Wisconsin',), ('Indiana',)",SELECT T1.state FROM owners AS T1      INTERSECT SELECT T2.state FROM professionals AS T2,"('Mississippi',), ('Wisconsin',), ('Indiana',)",hard,True,1,
468,dog_kennels,What is the average age of the dogs who have gone through any treatments?,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),"(5.111111111111,)",SELECT avg( T1.age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id,"(5.466666666667,)",hard,False,0,
469,dog_kennels,"Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.","SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')","SELECT T1.professional_id, T1.last_name, T1.cell_number FROM professionals AS T1 WHERE T1.state = 'Indiana'      UNION SELECT T2.professional_id, T2.last_name, T2.cell_number FROM professionals AS T2 JOIN treatments AS T3 ON T2.professional_id = T3.professional_id  GROUP BY T2.professional_id HAVING count( *) > 2","(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')",extra,True,1,
470,dog_kennels,Which dogs have not cost their owner more than 1000 for treatment? List the dog names.,SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 ),"('Kacey',), ('Hipolito',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Betty',), ('Holden',), ('Jesus',), ('Mavis',)",SELECT T1.name FROM dogs AS T1 WHERE T1.dog_id NOT IN (SELECT T22.dog_id FROM treatments AS T22  GROUP BY T22.dog_id HAVING sum( T22.cost_of_treatment) > 1000     ),"('Kacey',), ('Hipolito',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Betty',), ('Holden',), ('Jesus',), ('Mavis',)",hard,True,1,
471,dog_kennels,Which first names are used for professionals or owners but are not used as dog names?,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,"('Tre',), ('Heather',), ('Cindy',), ('Vernice',), ('Ruben',), ('Karley',), ('Melisa',), ('Adelle',), ('Velva',), ('Olaf',), ('Kade',), ('Monte',), ('Orlando',), ('Lorenz',), ('Rolando',), ('Winfield',), ('Sigurd',), ('Nora',), ('Domenica',), ('Brady',), ('Rachelle',), ('Johann',), ('Ericka',), ('Jaclyn',), ('Jayson',), ('Gay',), ('Lesly',), ('Taryn',), ('Emelie',), ('Danny',)",SELECT T1.first_name FROM professionals AS T1       UNION SELECT T2.first_name FROM owners AS T2,"('Heather',), ('Tre',), ('Cindy',), ('Vernice',), ('Melisa',), ('Karley',), ('Ruben',), ('Adelle',), ('Velva',), ('Olaf',), ('Kade',), ('Monte',), ('Orlando',), ('Lorenz',), ('Rolando',), ('Winfield',), ('Nora',), ('Sigurd',), ('Domenica',), ('Brady',), ('Rachelle',), ('Johann',), ('Ericka',), ('Jaclyn',), ('Jayson',), ('Gay',), ('Lesly',), ('Emelie',), ('Taryn',), ('Danny',)",hard,True,1,
472,dog_kennels,"Which professional did not operate any treatment on dogs? List the professional's id, role and email.","SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","(13, 'Veterenarian', 'delphine29@example.com'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (11, 'Employee', 'west.eula@example.net'), (1, 'Employee', 'deanna.schuster@example.com'), (3, 'Employee', 'uboehm@example.org'), (15, 'Employee', 'jeichmann@example.com'), (2, 'Employee', 'lucile.shanahan@example.org')","SELECT T1.professional_id, T1.role_code, T1.email_address FROM professionals AS T1        EXCEPT SELECT T2.professional_id, T2.role_code, T2.email_address FROM professionals AS T2 JOIN treatments AS T3 ON T2.professional_id = T3.professional_id","(13, 'Veterenarian', 'delphine29@example.com'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (11, 'Employee', 'west.eula@example.net'), (1, 'Employee', 'deanna.schuster@example.com'), (3, 'Employee', 'uboehm@example.org'), (15, 'Employee', 'jeichmann@example.com'), (2, 'Employee', 'lucile.shanahan@example.org')",extra,True,1,
473,dog_kennels,"Which owner owns the most dogs? List the owner id, first name and last name.","SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id, T2.first_name, T2.last_name ORDER BY count(*) DESC LIMIT 1","(14, 'Rachelle', 'Funk')","SELECT T1.owner_id, T2.first_name, T2.last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id = T2.owner_id  GROUP BY T1.owner_id  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
474,dog_kennels,"Which professionals have done at least two treatments? List the professional's id, role, and first name.","SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","(8, 'Employee', 'Karley'), (10, 'Employee', 'Domenica'), (9, 'Veterenarian', 'Monte'), (4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (14, 'Employee', 'Sigurd')","SELECT T1.professional_id, T1.role_code, T1.first_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id  GROUP BY T2.professional_id HAVING count( *) >= 2",,medium,False,0,
475,dog_kennels,What is the name of the breed with the most dogs?,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,"('Bulldog',)",SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_code = T2.breed_code  GROUP BY T2.breed_code  ORDER BY count( *) DESC LIMIT 1,,extra,False,0,
476,dog_kennels,Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","(14, 'Funk')","SELECT T1.owner_id, T1.last_name FROM owners AS T1 JOIN dogs AS T3 ON T1.owner_id = T3.owner_id  GROUP BY T3.owner_id  ORDER BY count( *) DESC LIMIT 1",,extra,False,0,
477,dog_kennels,What is the description of the treatment type that costs the least money in total?,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,"('Take for a Walk',)",SELECT T1.treatment_type_description FROM treatment_types AS T1 JOIN treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code  GROUP BY T2.treatment_type_code  ORDER BY sum( T2.cost_of_treatment) ASC LIMIT 1,,extra,False,0,
478,dog_kennels,Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1","(3, '02647')","SELECT T1.owner_id, T1.zip_code FROM owners AS T1 JOIN dogs AS T3 ON T1.owner_id = T3.owner_id JOIN treatments AS T2 ON T3.dog_id = T2.dog_id  GROUP BY T3.owner_id  ORDER BY sum( T2.cost_of_treatment) DESC LIMIT 1",,extra,False,0,
479,dog_kennels,Which professionals have done at least two types of treatments? List the professional id and cell phone.,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","(8, '328.842.3792'), (10, '461-801-2600'), (9, '962-983-8109x3509'), (4, '00230569697'), (6, '139-321-7313'), (14, '1-185-137-1945x409')","SELECT T1.professional_id, T1.cell_number FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id JOIN treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code  GROUP BY T1.professional_id HAVING count( *) >= 2","(8, '328.842.3792'), (10, '461-801-2600'), (9, '962-983-8109x3509'), (4, '00230569697'), (6, '139-321-7313'), (14, '1-185-137-1945x409')",medium,True,1,
480,dog_kennels,What are the first name and last name of the professionals who have done treatment with cost below average?,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE cost_of_treatment  <  (SELECT avg(cost_of_treatment) FROM Treatments );","('Domenica', 'Jacobs'), ('Karley', 'Hyatt'), ('Vernice', 'Tillman'), ('Monte', 'Kshlerin'), ('Ruben', ""O'Reilly"")","SELECT DISTINCT T1.first_name, T1.last_name FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT avg( T23.cost_of_treatment) FROM treatments AS T23        )","('Domenica', 'Jacobs'), ('Karley', 'Hyatt'), ('Vernice', 'Tillman'), ('Monte', 'Kshlerin'), ('Ruben', ""O'Reilly"")",extra,True,1,
481,dog_kennels,"List the date of each treatment, together with the first name of the professional who operated it.","SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')","SELECT T1.date_of_treatment, T2.first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id = T2.professional_id","('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')",medium,True,1,
482,dog_kennels,List the cost of each treatment and the corresponding treatment type description.,"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code","(567.0, 'Take for a Walk'), (147.0, 'Vaccination'), (429.0, 'Physical examination'), (266.0, 'Vaccination'), (668.0, 'Vaccination'), (313.0, 'Physical examination'), (852.0, 'Physical examination'), (407.0, 'Physical examination'), (139.0, 'Take for a Walk'), (681.0, 'Take for a Walk'), (514.0, 'Vaccination'), (428.0, 'Physical examination'), (945.0, 'Vaccination'), (349.0, 'Take for a Walk'), (656.0, 'Take for a Walk')","SELECT T1.cost_of_treatment, T2.treatment_type_description FROM treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code","(567.0, 'Take for a Walk'), (147.0, 'Vaccination'), (429.0, 'Physical examination'), (266.0, 'Vaccination'), (668.0, 'Vaccination'), (313.0, 'Physical examination'), (852.0, 'Physical examination'), (407.0, 'Physical examination'), (139.0, 'Take for a Walk'), (681.0, 'Take for a Walk'), (514.0, 'Vaccination'), (428.0, 'Physical examination'), (945.0, 'Vaccination'), (349.0, 'Take for a Walk'), (656.0, 'Take for a Walk')",medium,True,1,
483,dog_kennels,"List each owner's first name, last name, and the size of his for her dog.","SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED'), ('Nora', 'Haley', 'MED')","SELECT T1.first_name, T1.last_name, T2.size_code FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id","('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED'), ('Nora', 'Haley', 'MED')",medium,True,1,
484,dog_kennels,List pairs of the owner's first name and the dogs's name.,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline'), ('Nora', 'Mavis')","SELECT T1.first_name, T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id","('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline'), ('Nora', 'Mavis')",medium,True,1,
485,dog_kennels,List the names of the dogs of the rarest breed and the treatment dates of them.,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )","('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')","SELECT T1.name, T2.date_of_treatment FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT T23.breed_code FROM dogs AS T23  GROUP BY T23.breed_code  ORDER BY count( *) ASC LIMIT 1    )","('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')",extra,True,1,
486,dog_kennels,Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'","('Melisa', 'Bessie')","SELECT T1.first_name, T2.name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'","('Melisa', 'Bessie')",medium,True,1,
487,dog_kennels,What are the arriving date and the departing date of the dogs who have gone through a treatment?,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id","('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22')","SELECT DISTINCT T1.date_arrived, T1.date_departed FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id = T2.dog_id","('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22')",medium,True,1,
488,dog_kennels,List the last name of the owner owning the youngest dog.,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),"('Fisher',), ('Rippin',), ('Feil',)",SELECT T1.last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = (SELECT max( T23.age) FROM dogs AS T23        ),"('Fisher',), ('Rippin',), ('Feil',)",extra,True,1,
489,dog_kennels,List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.,SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',"('uboehm@example.org',), ('mekhi.little@example.org',)",SELECT T1.email_address FROM professionals AS T1 WHERE T1.state = 'Hawaii' or T1.state = 'Wisconsin',"('uboehm@example.org',), ('mekhi.little@example.org',)",medium,True,1,
490,dog_kennels,What are the arriving date and the departing date of all the dogs?,"SELECT date_arrived ,  date_departed FROM Dogs","('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46')","SELECT T1.date_arrived, T1.date_departed FROM dogs AS T1","('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46')",medium,True,1,
491,dog_kennels,How many dogs went through any treatments?,SELECT count(DISTINCT dog_id) FROM Treatments,"(9,)",SELECT DISTINCT count(DISTINCT T1.dog_id) FROM treatments AS T1,"(9,)",easy,True,1,
492,dog_kennels,How many professionals have performed any treatment to dogs?,SELECT count(DISTINCT professional_id) FROM Treatments,"(8,)",SELECT DISTINCT count(DISTINCT T1.professional_id) FROM treatments AS T1,"(8,)",easy,True,1,
493,dog_kennels,"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.","SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","('Employee', '6915 Oberbrunner Point Suite 491 Gleasonville, LA', 'West Heidi', 'Indiana')","SELECT T1.role_code, T1.street, T1.city, T1.state FROM professionals AS T1 WHERE T1.city like '%West%'","('Employee', '6915 Oberbrunner Point Suite 491 Gleasonville, LA', 'West Heidi', 'Indiana')",medium,True,1,
494,dog_kennels,"Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.","SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')","SELECT T1.first_name, T1.last_name, T1.email_address FROM owners AS T1 WHERE T1.state like '%North%'","('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')",medium,True,1,
495,dog_kennels,How many dogs have an age below the average?,SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),"(9,)",SELECT count( *) FROM dogs AS T1 WHERE T1.age < (SELECT avg( T22.age) FROM dogs AS T22        ),"(9,)",hard,True,1,
496,dog_kennels,How much does the most recent treatment cost?,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,"(407.0,)",SELECT T1.cost_of_treatment FROM treatments AS T1    ORDER BY T1.date_of_treatment DESC LIMIT 1,"(407.0,)",medium,True,1,
497,dog_kennels,How many dogs have not gone through any treatment?,SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ),"(6,)",SELECT count( *) FROM dogs AS T1 WHERE T1.dog_id NOT IN (SELECT T22.dog_id FROM treatments AS T22        ),"(6,)",extra,True,1,
498,dog_kennels,How many owners temporarily do not have any dogs?,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),"(3,)",SELECT count( *) FROM owners AS T1 WHERE T1.owner_id NOT IN (SELECT T22.owner_id FROM dogs AS T22        ),"(3,)",extra,True,1,
499,dog_kennels,How many professionals did not operate any treatment on dogs?,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),"(7,)",SELECT count( *) FROM professionals AS T1 WHERE T1.professional_id NOT IN (SELECT T22.professional_id FROM treatments AS T22        ),"(7,)",extra,True,1,
500,dog_kennels,"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.","SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  '1'","('Kacey', 6, 7.57), ('Lyric', 4, 4.36), ('Evangeline', 1, 4.01)","SELECT T1.name, T1.age, T1.weight FROM dogs AS T1 WHERE T1.abandoned_yn = '1'","('Kacey', 6, 7.57), ('Lyric', 4, 4.36), ('Evangeline', 1, 4.01)",medium,True,1,
501,dog_kennels,What is the average age of all the dogs?,SELECT avg(age) FROM Dogs,"(5.066666666667,)",SELECT avg( T1.age) FROM dogs AS T1,"(5.066666666667,)",easy,True,1,
502,dog_kennels,What is the age of the oldest dog?,SELECT max(age) FROM Dogs,"(9,)",SELECT max( T1.age) FROM dogs AS T1,"(9,)",easy,True,1,
503,dog_kennels,How much does each charge type costs? List both charge type and amount.,"SELECT charge_type ,  charge_amount FROM Charges","('Daily Accommodation', 98.0), ('Drugs', 322.0), ('Health Check', 640.0)","SELECT T1.charge_type, T1.charge_amount FROM charges AS T1","('Daily Accommodation', 98.0), ('Drugs', 322.0), ('Health Check', 640.0)",medium,True,1,
504,dog_kennels,How much does the most expensive charge type costs?,SELECT max(charge_amount) FROM Charges,"(640.0,)",SELECT max( T1.charge_amount) FROM charges AS T1,"(640.0,)",easy,True,1,
505,dog_kennels,"List the email, cell phone and home phone of all the professionals.","SELECT email_address ,  cell_number ,  home_phone FROM professionals","('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')","SELECT T1.email_address, T1.cell_number, T1.home_phone FROM professionals AS T1","('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')",medium,True,1,
506,dog_kennels,What are all the possible breed type and size type combinations?,"SELECT DISTINCT breed_code ,  size_code FROM dogs","('ESK', 'MED'), ('HUS', 'SML'), ('BUL', 'LGE'), ('ESK', 'SML'), ('HUS', 'MED'), ('BUL', 'MED'), ('ESK', 'LGE')","SELECT DISTINCT T1.breed_code, T1.size_code FROM dogs AS T1","('ESK', 'MED'), ('HUS', 'SML'), ('BUL', 'LGE'), ('ESK', 'SML'), ('HUS', 'MED'), ('BUL', 'MED'), ('ESK', 'LGE')",medium,True,1,
507,dog_kennels,List the first name of all the professionals along with the description of the treatment they have done.,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code","('Ruben', 'Physical examination'), ('Karley', 'Vaccination'), ('Danny', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Domenica', 'Vaccination'), ('Ruben', 'Take for a Walk'), ('Domenica', 'Take for a Walk'), ('Monte', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Monte', 'Physical examination'), ('Vernice', 'Physical examination'), ('Sigurd', 'Vaccination')","SELECT DISTINCT T1.first_name, T2.treatment_type_description FROM professionals AS T1 JOIN treatments AS T3 ON T1.professional_id = T3.professional_id JOIN treatment_types AS T2 ON T3.treatment_type_code = T2.treatment_type_code","('Ruben', 'Physical examination'), ('Karley', 'Vaccination'), ('Danny', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Domenica', 'Vaccination'), ('Ruben', 'Take for a Walk'), ('Domenica', 'Take for a Walk'), ('Monte', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Monte', 'Physical examination'), ('Vernice', 'Physical examination'), ('Sigurd', 'Vaccination')",medium,True,1,
508,singer,How many singers are there?,SELECT count(*) FROM singer,"(8,)",SELECT count( *) FROM singer AS T1,"(8,)",easy,True,1,
509,singer,List the name of singers in ascending order of net worth.,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,"('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)",SELECT T1.Name FROM singer AS T1     ORDER BY T1.Net_Worth_Millions ASC,"('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)",easy,True,1,
510,singer,What are the birth year and citizenship of singers?,"SELECT Birth_Year ,  Citizenship FROM singer","(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')","SELECT T1.Birth_Year, T1.Citizenship FROM singer AS T1","(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')",medium,True,1,
511,singer,List the name of singers whose citizenship is not 'France'.,SELECT Name FROM singer WHERE Citizenship != 'France',"('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)",SELECT T1.Name FROM singer AS T1 WHERE T1.Citizenship != 'France',"('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)",easy,True,1,
512,singer,Show the name of singers whose birth year is either 1948 or 1949?,SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,"('Christy Walton',), ('Alice Walton',)",SELECT T1.Name FROM singer AS T1 WHERE T1.Birth_Year = 1948 or T1.Birth_Year = 1949,"('Christy Walton',), ('Alice Walton',)",medium,True,1,
513,singer,What is the name of the singer with the largest net worth?,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,"('Liliane Bettencourt',)",SELECT T1.Name FROM singer AS T1    ORDER BY T1.Net_Worth_Millions DESC LIMIT 1,"('Liliane Bettencourt',)",medium,True,1,
514,singer,Show different citizenship of singers and the number of singers of each citizenship.,"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","('Chile', 1), ('Australia', 1), ('United States', 4), ('France', 1), ('Germany', 1)","SELECT T1.Citizenship, count( *) FROM singer AS T1  GROUP BY T1.Citizenship","('Chile', 1), ('Australia', 1), ('United States', 4), ('France', 1), ('Germany', 1)",medium,True,1,
515,singer,Please show the most common citizenship of singers.,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1,"('United States',)",SELECT T1.Citizenship FROM singer AS T1  GROUP BY T1.Citizenship  ORDER BY count( *) DESC LIMIT 1,"('United States',)",hard,True,1,
516,singer,Show different citizenships and the maximum net worth of singers of each citizenship.,"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","('Chile', 17.4), ('Australia', 17.0), ('United States', 28.8), ('France', 30.0), ('Germany', 14.3)","SELECT T1.Citizenship, max( T1.Net_Worth_Millions) FROM singer AS T1  GROUP BY T1.Citizenship","('Chile', 17.4), ('Australia', 17.0), ('United States', 28.8), ('France', 30.0), ('Germany', 14.3)",medium,True,1,
517,singer,Show titles of songs and names of singers.,"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID","(""Do They Know It's Christmas"", 'Liliane Bettencourt'), (""F**k It (I Don't Want You Back)"", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')","SELECT T1.Title, T2.Name FROM song AS T1 JOIN singer AS T2 ON T1.Singer_ID = T2.Singer_ID","(""Do They Know It's Christmas"", 'Liliane Bettencourt'), (""F**k It (I Don't Want You Back)"", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')",medium,True,1,
518,singer,Show distinct names of singers that have songs with sales more than 300000.,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,"('Christy Walton',), ('Iris Fontbona',), ('Liliane Bettencourt',)",SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000,"('Christy Walton',), ('Iris Fontbona',), ('Liliane Bettencourt',)",medium,True,1,
519,singer,Show the names of singers that have more than one song.,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,"('Christy Walton',), ('Liliane Bettencourt',)",SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T2.Singer_ID HAVING count( *) > 1,,medium,False,0,
520,singer,Show the names of singers and the total sales of their songs.,"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","('Iris Fontbona', 335000.0), ('Susanne Klatten', 261000.0), ('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0)","SELECT T1.Name, sum( T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID  GROUP BY T1.Name","('Iris Fontbona', 335000.0), ('Susanne Klatten', 261000.0), ('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0)",medium,True,1,
521,singer,List the name of singers that do not have any song.,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),"('Alice Walton',), ('Abigail Johnson',)",SELECT T1.Name FROM singer AS T1 WHERE T1.Singer_ID NOT IN (SELECT T22.Singer_ID FROM song AS T22        ),"('Alice Walton',), ('Abigail Johnson',)",hard,True,1,
522,singer,Show the citizenship shared by singers with birth year before 1945 and after 1955.,SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,"('United States',)",SELECT T1.Citizenship FROM singer AS T1 WHERE T1.Birth_Year < 1945     INTERSECT SELECT T2.Citizenship FROM singer AS T2 WHERE T2.Birth_Year > 1955,"('United States',)",hard,True,1,
523,real_estate_properties,How many available features are there in total?,SELECT count(*) FROM Other_Available_Features,"(3,)",SELECT count( *) FROM other_available_features AS T1,"(3,)",easy,True,1,
524,real_estate_properties,What is the feature type name of feature AirCon?,SELECT T2.feature_type_name FROM other_available_features AS T1 JOIN reference_feature_types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  'AirCon',"('Amenity, eg Pool.',)",SELECT T1.feature_type_name FROM reference_feature_types AS T1 JOIN other_available_features AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_name = 'AirCon',"('Amenity, eg Pool.',)",medium,True,1,
525,real_estate_properties,Show the property type descriptions of properties belonging to that code.,SELECT T2.property_type_description FROM properties AS T1 JOIN reference_property_types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T2.property_type_description,"('Shop, Retail Outlet.',), ('Apartment, Flat, Condo, etc.',), ('Field, Meadow.',), ('House, Bungalow, etc.',), ('Other, to be determined.',)",SELECT T1.property_type_description FROM reference_property_types AS T1 JOIN properties AS T2 ON T1.property_type_code = T2.property_type_code,"('House, Bungalow, etc.',), ('House, Bungalow, etc.',), ('Other, to be determined.',), ('Field, Meadow.',), ('Apartment, Flat, Condo, etc.',), ('Shop, Retail Outlet.',), ('Shop, Retail Outlet.',), ('Apartment, Flat, Condo, etc.',), ('Apartment, Flat, Condo, etc.',), ('Apartment, Flat, Condo, etc.',), ('Other, to be determined.',), ('Apartment, Flat, Condo, etc.',), ('Other, to be determined.',), ('Other, to be determined.',), ('Apartment, Flat, Condo, etc.',)",medium,False,0,
526,real_estate_properties,What are the names of properties that are either houses or apartments with more than 1 room?,SELECT property_name FROM Properties WHERE property_type_code  =  'House' UNION SELECT property_name FROM Properties WHERE property_type_code  =  'Apartment' AND room_count  >  1,"('longacre',), ('parc coliseum',), ('parc east',), ('park',), ('renoir',), ('ten tower',), ('the cole',), ('vogue',)",SELECT T1.property_name FROM properties AS T1 WHERE T1.property_type_code = 'House'      UNION SELECT T2.property_name FROM properties AS T2 WHERE T2.property_type_code = 'Apartment' and T2.room_count > 1,"('longacre',), ('parc coliseum',), ('parc east',), ('park',), ('renoir',), ('ten tower',), ('the cole',), ('vogue',)",hard,True,1,
