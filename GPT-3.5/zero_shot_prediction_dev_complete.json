[
    {
        "db_id": "concert_singer",
        "natural_language_question": "How many singers do we have?",
        "prompt": " Translate the following question into SPARQL: How many singers do we have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?singer_id) WHERE {   ?singer a :singer . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What is the total number of singers?",
        "prompt": " Translate the following question into SPARQL: What is the total number of singers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ( COUNT(?singer) AS ?total_singers )  WHERE {   ?singer a :singer  }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "prompt": " Translate the following question into SPARQL: Show name, country, age for all singers ordered by age from the oldest to the youngest.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?country ?age WHERE {   ?singer a :singer .   ?singer :name ?name .   ?singer :country ?country .   ?singer :age ?age . } ORDER BY DESC(?age)"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are the names, countries, and ages for every singer in descending order of age?",
        "prompt": " Translate the following question into SPARQL: What are the names, countries, and ages for every singer in descending order of age?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?country ?age  WHERE {   ?singer a :singer .   ?singer :name ?name .   ?singer :country ?country .   ?singer :age ?age . } ORDER BY DESC(?age)"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What is the average, minimum, and maximum age of all singers from France?",
        "prompt": " Translate the following question into SPARQL: What is the average, minimum, and maximum age of all singers from France?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (AVG(?age) AS ?averageAge) (MIN(?age) AS ?minimumAge) (MAX(?age) AS ?maximumAge) WHERE {    ?singer :singer#age ?age .    ?singer :singer#country \"France\" . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What is the average, minimum, and maximum age for all French singers?",
        "prompt": " Translate the following question into SPARQL: What is the average, minimum, and maximum age for all French singers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (AVG(?age) as ?avgAge) (MIN(?age) as ?minAge) (MAX(?age) as ?maxAge) WHERE {   ?singer a :singer .   ?singer :country \"French\" .   ?singer :age ?age . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Show the name and the release year of the song by the youngest singer.",
        "prompt": " Translate the following question into SPARQL: Show the name and the release year of the song by the youngest singer.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?song_name ?song_release_year WHERE {   ?singer a :singer .   ?singer :song_name ?song_name .   ?singer :song_release_year ?song_release_year .   FILTER(?singer :age = MIN(?age)) }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are the names and release years for all the songs of the youngest singer?",
        "prompt": " Translate the following question into SPARQL: What are the names and release years for all the songs of the youngest singer?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?songName ?releaseYear WHERE {   ?singer a :singer .   ?concert a :concert .   ?singer :name ?singerName .   ?singer :age ?age .   ?singer :singer_id ?singerID .   ?concert :concert_id ?concertID .   ?concert :year ?year .   ?singer :song_name ?songName .   ?singer :song_release_year ?releaseYear .   ?singer_in_concert :singer_id ?singerID .   ?singer_in_concert :concert_id ?concertID .   FILTER(?age = (SELECT MIN(?age) WHERE {?singer a :singer ; :age ?age})). }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are all distinct countries where singers above age 20 are from?",
        "prompt": " Translate the following question into SPARQL: What are all distinct countries where singers above age 20 are from?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?country  WHERE {   ?singer :singer#country ?country .   ?singer :singer#age ?age .   FILTER (?age > 20) }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are  the different countries with singers above age 20?",
        "prompt": " Translate the following question into SPARQL: What are  the different countries with singers above age 20?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?country WHERE {   ?singer a :singer .   ?singer :country ?country .   ?singer :age ?age .   FILTER (?age > 20) . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Show all countries and the number of singers in each country.",
        "prompt": " Translate the following question into SPARQL: Show all countries and the number of singers in each country.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country (count(?singer) as ?num_singers) WHERE {   ?singer :country ?country  } GROUP BY ?country"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "How many singers are from each country?",
        "prompt": " Translate the following question into SPARQL: How many singers are from each country?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country (COUNT(?singer) AS ?count)  WHERE {     ?singer a :singer .     ?singer :country ?country . } GROUP BY ?country"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "List all song names by singers above the average age.",
        "prompt": " Translate the following question into SPARQL: List all song names by singers above the average age.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?songName WHERE {   ?singer :singer#age ?age .   FILTER(?age > (SELECT AVG(?singerAge) WHERE { ?s :singer#age ?singerAge }))   ?singer :singer#song_name ?songName . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are all the song names by singers who are older than average?",
        "prompt": " Translate the following question into SPARQL: What are all the song names by singers who are older than average?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?song WHERE {   ?singer :age ?age .   ?singer :song_name ?song .   FILTER(?age > (SELECT AVG(?age) WHERE {?singer :age ?age2})) }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "prompt": " Translate the following question into SPARQL: Show location and name for all stadiums with a capacity between 5000 and 10000.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?location ?name WHERE {   ?stadium a :stadium ;            :capacity ?capacity ;            :name ?name ;            :location ?location .   FILTER (?capacity >= 5000 && ?capacity <= 10000) }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "prompt": " Translate the following question into SPARQL: What are the locations and names of all stations with capacity between 5000 and 10000?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?location WHERE {   ?station :name ?name ;            :location ?location ;            :capacity ?capacity .   FILTER (?capacity >= 5000 && ?capacity <= 10000) }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What is the maximum capacity and the average of all stadiums ?",
        "prompt": " Translate the following question into SPARQL: What is the maximum capacity and the average of all stadiums ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (MAX(?cap) AS ?maximum_capacity) (AVG(?avg) AS ?average_capacity)  WHERE {   ?stadium a :stadium .   ?stadium :capacity ?cap .   ?stadium :average ?avg . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What is the average and maximum capacities for all stadiums ?",
        "prompt": " Translate the following question into SPARQL: What is the average and maximum capacities for all stadiums ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?capacity) AS ?avg_capacity MAX(?capacity) AS ?max_capacity WHERE {   ?stadium rdf:type :stadium .   ?stadium :capacity ?capacity .  }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What is the name and capacity for the stadium with highest average attendance?",
        "prompt": " Translate the following question into SPARQL: What is the name and capacity for the stadium with highest average attendance?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?capacity WHERE {   ?stadium :name ?name ;            :capacity ?capacity ;            :highest \"true\" .   ?concert :ref-stadium_id ?stadium . } ORDER BY DESC(?capacity) LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What is the name and capacity for the stadium with the highest average attendance?",
        "prompt": " Translate the following question into SPARQL: What is the name and capacity for the stadium with the highest average attendance?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?capacity WHERE {   ?stadium :capacity ?capacity ;            :name ?name ;            :highest ?highest_avg .   FILTER(?highest_avg IN (SELECT MAX(?avg) WHERE { ?stadium :average ?avg })) }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "How many concerts are there in year 2014 or 2015?",
        "prompt": " Translate the following question into SPARQL: How many concerts are there in year 2014 or 2015?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?c) as ?num_concerts)  WHERE {   ?c a :concert .   {?c :year \"2014\"}    UNION {?c :year \"2015\"} }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "How many concerts occurred in 2014 or 2015?",
        "prompt": " Translate the following question into SPARQL: How many concerts occurred in 2014 or 2015?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?concert) as ?count) WHERE {   ?concert a :concert.   FILTER(?concert/:year = 2014 || ?concert/:year = 2015) }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Show the stadium name and the number of concerts in each stadium.",
        "prompt": " Translate the following question into SPARQL: Show the stadium name and the number of concerts in each stadium.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name (COUNT(?concert) AS ?num_concerts) WHERE {   ?stadium a :stadium .   ?stadium :name ?name .   ?concert a :concert ;            :ref-stadium_id ?stadium . } GROUP BY ?name"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "For each stadium, how many concerts play there?",
        "prompt": " Translate the following question into SPARQL: For each stadium, how many concerts play there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?stadium (COUNT(DISTINCT ?concert) AS ?numConcerts) WHERE {   ?concert :ref-stadium_id ?stadium.   ?concert rdf:type :concert. } GROUP BY ?stadium"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "prompt": " Translate the following question into SPARQL: Show the stadium name and capacity with most number of concerts in year 2014 or after.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?stadium_name ?capacity WHERE {    ?stadium :name ?stadium_name ;             :capacity ?capacity .    {       SELECT ?concert_id       WHERE {           ?concert :year ?year .          FILTER(?year >= 2014) .          BIND(STRDT(CONCAT(\"http://valuenet/ontop/concert#\", ?concert_id), <http://www.w3.org/2001/XMLSchema#string>) AS ?uri) .          ?uri :ref-stadium_id ?stadium_id .       }    }    ?stadium :stadium_id ?stadium_id . } GROUP BY ?stadium_name ?capacity ORDER BY DESC(COUNT(?concert_id)) LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "prompt": " Translate the following question into SPARQL: What is the name and capacity of the stadium with the most concerts after 2013 ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?stadium_name ?stadium_capacity  WHERE {   ?stadium :name ?stadium_name ;            :capacity ?stadium_capacity .   ?concert :ref-stadium_id ?stadium .   FILTER (?concert_year > 2013) }  GROUP BY ?stadium_name ?stadium_capacity ORDER BY DESC(COUNT(?concert))  LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Which year has most number of concerts?",
        "prompt": " Translate the following question into SPARQL: Which year has most number of concerts?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?year (COUNT(?concert) AS ?num_concerts) WHERE {   ?concert :year ?year . } GROUP BY ?year ORDER BY DESC(?num_concerts) LIMIT 1  This query retrieves the year attribute of all concerts and counts how many concerts happen in each year. It then groups the results by year, and orders them in descending order of number of concerts. Finally, it selects the year with the highest number of concerts by limiting the results to the first row."
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What is the year that had the most concerts?",
        "prompt": " Translate the following question into SPARQL: What is the year that had the most concerts?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?year  WHERE {   ?concert :year ?year . } GROUP BY ?year  ORDER BY DESC(COUNT(?concert)) LIMIT 1"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Show the stadium names without any concert.",
        "prompt": " Translate the following question into SPARQL: Show the stadium names without any concert.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?stadium a :stadium .   ?stadium :name ?name .   FILTER NOT EXISTS {     ?concert a :concert .     ?concert :ref-stadium_id ?stadium .   } }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are the names of the stadiums without any concerts?",
        "prompt": " Translate the following question into SPARQL: What are the names of the stadiums without any concerts?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?stadiumName WHERE{   ?stadium :name ?stadiumName.   FILTER NOT EXISTS {     ?concert :ref-stadium_id ?stadium.     ?concert :concert_name ?concertName.     ?concert :theme \"concert\".   } }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "prompt": " Translate the following question into SPARQL: Show countries where a singer above age 40 and a singer below 30 are from.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?country WHERE {   ?singer1 a :singer .   ?singer2 a :singer .   ?singer1 :age ?age1.   ?singer2 :age ?age2.   ?singer1 :country ?country.   ?singer2 :country ?country.   FILTER (?age1 > 40 && ?age2 < 30) }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "prompt": " Translate the following question into SPARQL: Show names for all stadiums except for stadiums having a concert in year 2014.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?stadium a :stadium .   ?stadium :name ?name .   FILTER NOT EXISTS {     ?concert a :concert .     ?concert :stadium_id ?stadium .     ?concert :year \"2014\" .   } }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are the names of all stadiums that did not have a concert in 2014?",
        "prompt": " Translate the following question into SPARQL: What are the names of all stadiums that did not have a concert in 2014?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   ?stadium a :stadium .   ?stadium :name ?name .   FILTER NOT EXISTS {     ?concert a :concert .     ?concert :ref-stadium_id ?stadium .     ?concert :year 2014 .   } }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "prompt": " Translate the following question into SPARQL: Show the name and theme for all concerts and the number of singers in each concert.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name ?theme (COUNT(?singer) AS ?numSingers) WHERE {   ?concert a :concert .   ?concert :concert_name ?name .   ?concert :theme ?theme .   ?singerInConcert a :singer_in_concert .   ?singerInConcert :ref-concert_id ?concert .   ?singerInConcert :ref-singer_id ?singer . } GROUP BY ?name ?theme"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are the names , themes , and number of singers for every concert ?",
        "prompt": " Translate the following question into SPARQL: What are the names , themes , and number of singers for every concert ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?concertName ?theme (COUNT(?singer) AS ?numSingers) WHERE {   ?concert :concert_name ?concertName ;            :theme ?theme ;            :concert_id ?concertID .   ?singerInConcert :concert_id ?concertID ;                    :singer_id ?singerID .   ?singer :singer_id ?singerID ;           :name ?singerName . } GROUP BY ?concertName ?theme"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "List singer names and number of concerts for each singer.",
        "prompt": " Translate the following question into SPARQL: List singer names and number of concerts for each singer.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?singer_name (COUNT(?concert_id) as ?num_concerts) WHERE {   ?singer :name ?singer_name .   ?singer_concert :ref-singer_id ?singer .   ?singer_concert :ref-concert_id ?concert .   ?concert :concert_id ?concert_id . } GROUP BY ?singer_name"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are the names of the singers and number of concerts for each person?",
        "prompt": " Translate the following question into SPARQL: What are the names of the singers and number of concerts for each person?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name (COUNT(?concert) AS ?numConcerts) WHERE {   ?singer a :singer .   ?singer :name ?name .   ?singer_in_concert :ref-singer_id ?singer .   ?singer_in_concert :ref-concert_id ?concert . } GROUP BY ?name"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "List all singer names in concerts in year 2014.",
        "prompt": " Translate the following question into SPARQL: List all singer names in concerts in year 2014.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?singerName WHERE {   ?concert a :concert .   ?concert :year \"2014\" .   ?singerInConcert a :singer_in_concert .   ?singerInConcert :ref-concert_id ?concert .   ?singerInConcert :ref-singer_id ?singer .   ?singer a :singer .   ?singer :name ?singerName . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are the names of the singers who performed in a concert in 2014?",
        "prompt": " Translate the following question into SPARQL: What are the names of the singers who performed in a concert in 2014?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?name  WHERE {   ?concert :year 2014 .   ?performance :ref-concert_id ?concert .   ?performance :ref-singer_id ?singer .   ?singer :name ?name . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "prompt": " Translate the following question into SPARQL: what is the name and nation of the singer who have a song having 'Hey' in its name?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?name ?nation WHERE {   ?singer :name ?name ;           :country ?nation .   ?singer :song_name ?song .   FILTER(CONTAINS(?song, 'Hey')) }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "prompt": " Translate the following question into SPARQL: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?singerName ?country WHERE {   ?singer a :singer .   ?singer :name ?singerName .   ?singer :country ?country .   ?song a :song .   ?song :title ?title .   FILTER regex(?title, \"Hey\", \"i\") .   ?singer :sings ?song . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "prompt": " Translate the following question into SPARQL: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?stadium_name ?stadium_location WHERE {   ?concert_2014 a :concert ;               :year \"2014\" .   ?concert_2015 a :concert ;               :year \"2015\" .   ?stadium a :stadium ;            :stadium_id ?stadium_id ;            :name ?stadium_name ;            :location ?stadium_location .   ?concert_2014 :ref-stadium_id ?stadium_id .   ?concert_2015 :ref-stadium_id ?stadium_id . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "prompt": " Translate the following question into SPARQL: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?stadium_name ?location WHERE {   ?concert :concert_name ?name ;            :stadium_id ?stadium_id ;            :year \"2014\" .   ?concert2 :concert_name ?name2 ;             :stadium_id ?stadium_id ;             :year \"2015\" .   ?stadium :stadium_id ?stadium_id ;            :name ?stadium_name ;            :location ?location . }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "prompt": " Translate the following question into SPARQL: Find the number of concerts happened in the stadium with the highest capacity .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?concert) AS ?numConcerts) WHERE {   ?concert :ref-stadium_id ?stadium .   ?stadium :capacity ?capacity .   {     SELECT (MAX(?cap) AS ?maxCap)     WHERE {       ?stadium :capacity ?cap .     }   }   FILTER(?capacity = ?maxCap) }"
    },
    {
        "db_id": "concert_singer",
        "natural_language_question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "prompt": " Translate the following question into SPARQL: What are the number of concerts that occurred in the stadium with the largest capacity ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['concert', 'singer', 'singer_in_concert', 'stadium'], 'object_properties': ['concert#ref-stadium_id', 'singer_in_concert#ref-concert_id', 'singer_in_concert#ref-singer_id'], 'data_properties': ['concert#concert_id', 'concert#concert_name', 'concert#stadium_id', 'concert#theme', 'concert#year', 'singer#age', 'singer#country', 'singer#is_male', 'singer#name', 'singer#singer_id', 'singer#song_name', 'singer#song_release_year', 'singer_in_concert#concert_id', 'singer_in_concert#singer_id', 'stadium#average', 'stadium#capacity', 'stadium#highest', 'stadium#location', 'stadium#lowest', 'stadium#name', 'stadium#stadium_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?concert) AS ?numConcerts WHERE {   ?stadium a :stadium .   ?stadium :highest ?capacity .   ?concert a :concert .   ?concert :ref-stadium_id ?stadium . } GROUP BY ?stadium ORDER BY DESC(?capacity) LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the number of pets whose weight is heavier than 10.",
        "prompt": " Translate the following question into SPARQL: Find the number of pets whose weight is heavier than 10.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?pet) AS ?count) WHERE {   ?pet :pets#weight ?weight .   FILTER (?weight > 10)  }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "How many pets have a greater weight than 10?",
        "prompt": " Translate the following question into SPARQL: How many pets have a greater weight than 10?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?pet) as ?numPets) WHERE {   ?pet rdf:type :pets .   ?pet :weight ?weight .   FILTER(?weight > 10) }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the weight of the youngest dog.",
        "prompt": " Translate the following question into SPARQL: Find the weight of the youngest dog.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MIN(?weight) as ?young_weight WHERE {   ?pet a :pets ;        :weight ?weight ;        :pet_age ?age .   FILTER (?age = (SELECT MIN(?minage) WHERE {?p a :pets ; :pet_age ?minage})) }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "How much does the youngest dog weigh?",
        "prompt": " Translate the following question into SPARQL: How much does the youngest dog weigh?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?weight  WHERE {     ?dog a :pets .     ?dog :pets#pet_age ?age .     ?dog :pets#weight ?weight .     FILTER (?age = MIN(?age)) }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "prompt": " Translate the following question into SPARQL: Find the maximum weight for each type of pet. List the maximum weight and pet type.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (MAX(?weight) AS ?max_weight) ?pet_type WHERE {   ?pet :pettype ?pet_type ;        :weight ?weight . } GROUP BY ?pet_type"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "List the maximum weight and type for each type of pet.",
        "prompt": " Translate the following question into SPARQL: List the maximum weight and type for each type of pet.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?type (MAX(?weight) AS ?maxWeight) WHERE {     ?pet :pettype ?type ;          :weight ?weight . } GROUP BY ?type"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find number of pets owned by students who are older than 20.",
        "prompt": " Translate the following question into SPARQL: Find number of pets owned by students who are older than 20.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?pet) as ?numPets) WHERE {   ?student a :student .   ?student :age ?age .   FILTER (?age > 20)   ?petOwner :ref-stuid ?student ;             :ref-petid ?pet .   ?pet :pettype ?petType . }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "How many pets are owned by students that have an age greater than 20?",
        "prompt": " Translate the following question into SPARQL: How many pets are owned by students that have an age greater than 20?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?pet) AS ?numPets) WHERE {   ?student a :student ;            :age ?age ;            :has_pet#ref-stuid ?petOwner .   ?pet a :pets ;        :pettype ?petType ;        :has_pet#ref-petid ?petOwner ;        :pet_age ?petAge .   FILTER (?age > 20) } GROUP BY ?student HAVING (COUNT(?pet) > 0)"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the number of dog pets that are raised by female students (with sex F).",
        "prompt": " Translate the following question into SPARQL: Find the number of dog pets that are raised by female students (with sex F).  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?pet) WHERE {   ?has_pet :ref-petid ?pet .   ?has_pet :ref-stuid ?student .   ?student :sex \"F\" .   ?pet :pettype \"dog\" . }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "How many dog pets are raised by female students?",
        "prompt": " Translate the following question into SPARQL: How many dog pets are raised by female students?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?pet) AS ?num_dogs)  WHERE { \t?student a :student . \t?student :sex \"female\" . \t?pet a :pets . \t?has_pet :ref-stuid ?student . \t?has_pet :ref-petid ?pet . \t?pet :pettype \"dog\" . }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the number of distinct type of pets.",
        "prompt": " Translate the following question into SPARQL: Find the number of distinct type of pets.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?pettype) AS ?numPets)  WHERE {   ?pet :pettype ?pettype . }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "How many different types of pet are there?",
        "prompt": " Translate the following question into SPARQL: How many different types of pet are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?pet_type) AS ?num_types) WHERE {   ?pet :pettype ?pet_type . }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the first name of students who have cat or dog pet.",
        "prompt": " Translate the following question into SPARQL: Find the first name of students who have cat or dog pet.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName WHERE {   ?student :has_pet ?pet .   FILTER((?pet/:pettype)=\"cat\" || (?pet/:pettype)=\"dog\")   ?student :fname ?firstName . } LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What are the first names of every student who has a cat or dog as a pet?",
        "prompt": " Translate the following question into SPARQL: What are the first names of every student who has a cat or dog as a pet?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?firstname WHERE {   ?student a :student ;            :fname ?firstname ;            :has_pet ?haspet .   ?haspet :ref-petid ?petid ;           :ref-stuid ?student .   ?pet :petid ?petid ;        :pettype ?type .   FILTER (?type = \"cat\" || ?type = \"dog\") }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the first name of students who have both cat and dog pets .",
        "prompt": " Translate the following question into SPARQL: Find the first name of students who have both cat and dog pets .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?firstName WHERE {   ?student :has_pet ?pet1 .   ?student :has_pet ?pet2 .   ?pet1 :pettype \"cat\" .   ?pet2 :pettype \"dog\" .   ?student :fname ?firstName . }  GROUP BY ?firstName LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What are the students' first names who have both cats and dogs as pets?",
        "prompt": " Translate the following question into SPARQL: What are the students' first names who have both cats and dogs as pets?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName  WHERE { \t?student :fname ?firstName . \t?student :has_pet ?pet1 . \t?pet1 :pettype \"cat\" . \t?student :has_pet ?pet2 . \t?pet2 :pettype \"dog\" . \tFILTER (?pet1 != ?pet2) }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the major and age of students who do not have a cat pet.",
        "prompt": " Translate the following question into SPARQL: Find the major and age of students who do not have a cat pet.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?major ?age  WHERE {   ?student a :student .   ?student :major ?major .   ?student :age ?age .   FILTER NOT EXISTS {     ?student :has_pet#ref-stuid ?pet .     ?pet :pettype \"cat\" .   } }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "prompt": " Translate the following question into SPARQL: What major is every student who does not own a cat as a pet, and also how old are they?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?major ?age WHERE {   ?student a :student.   MINUS {?student :has_pet ?pet.          ?pet :pets#pettype \"cat\".}   ?student :student#major ?major;            :student#age ?age. }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the id of students who do not have a cat pet.",
        "prompt": " Translate the following question into SPARQL: Find the id of students who do not have a cat pet.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id WHERE {   ?s a :student .   ?s :stuid ?id .   FILTER NOT EXISTS {     ?s :has_pet ?p .     ?p :pettype \"cat\" .   } }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What are the ids of the students who do not own cats as pets?",
        "prompt": " Translate the following question into SPARQL: What are the ids of the students who do not own cats as pets?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?stuid  WHERE {   ?stuid :has_pet#ref-stuid ?st .   FILTER NOT EXISTS {     ?st :has_pet#ref-petid ?p .     ?p :pets#pettype \"cat\" .   } }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "prompt": " Translate the following question into SPARQL: Find the first name and age of students who have a dog but do not have a cat as a pet.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?fname ?age WHERE {   ?student a :student .   ?student :fname ?fname .   ?student :age ?age .   ?student1 a :pet .   ?student1 :pettype \"dog\" .   ?has_pet :ref-stuid ?student .   ?has_pet :ref-petid ?student1 .   FILTER NOT EXISTS {     ?student2 a :pet .     ?student2 :pettype \"cat\" .     ?has_pet1 :ref-stuid ?student .     ?has_pet1 :ref-petid ?student2 .   } } ORDER BY ?age LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What is the first name of every student who has a dog but does not have a cat?",
        "prompt": " Translate the following question into SPARQL: What is the first name of every student who has a dog but does not have a cat?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstname  WHERE {    ?student a :student .   ?student :has_pet ?pet .   ?pet :pettype \"dog\" .   FILTER NOT EXISTS {      ?student :has_pet ?cat .     ?cat :pettype \"cat\"    }   ?student :fname ?firstname . }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the type and weight of the youngest pet.",
        "prompt": " Translate the following question into SPARQL: Find the type and weight of the youngest pet.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?type ?weight  WHERE {   ?pet a :pets ;        :pettype ?type ;        :weight ?weight ;        :pet_age ?age .   FILTER(?age = (SELECT MIN(?petAge)                   WHERE {                    ?p a :pets ;                       :pet_age ?petAge .                  })) }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What type of pet is the youngest animal, and how much does it weigh?",
        "prompt": " Translate the following question into SPARQL: What type of pet is the youngest animal, and how much does it weigh?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?pettype ?weight WHERE {   ?pet :pets#pettype ?pettype ;        :pets#weight ?weight ;        :pets#pet_age ?age .   FILTER(?age = MIN(?age)) }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the id and weight of all pets whose age is older than 1.",
        "prompt": " Translate the following question into SPARQL: Find the id and weight of all pets whose age is older than 1.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?id ?weight  WHERE {   ?pet a :pets .   ?pet :pets#petid ?id .   ?pet :pets#weight ?weight .   ?pet :pets#pet_age ?age .   FILTER(?age > 1) }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What is the id and weight of every pet who is older than 1?",
        "prompt": " Translate the following question into SPARQL: What is the id and weight of every pet who is older than 1?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?weight WHERE { \t?pet :pets#petid ?id ; \t     :pets#weight ?weight ; \t     :pets#pet_age ?age . \tFILTER (?age > 1) }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the average and maximum age for each type of pet.",
        "prompt": " Translate the following question into SPARQL: Find the average and maximum age for each type of pet.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?petType AVG(?petAge) AS ?averageAge MAX(?petAge) AS ?maxAge WHERE {   ?pet :pettype ?petType ;        :pet_age ?petAge . } GROUP BY ?petType"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What is the average and maximum age for each pet type?",
        "prompt": " Translate the following question into SPARQL: What is the average and maximum age for each pet type?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?petType AVG(?petAge) AS ?averageAge MAX(?petAge) AS ?maxAge WHERE {    ?pet a :pets.    ?pet :pettype ?petType.    ?pet :pet_age ?petAge. } GROUP BY ?petType"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the average weight for each pet type.",
        "prompt": " Translate the following question into SPARQL: Find the average weight for each pet type.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?petType (AVG(?weight) AS ?avgWeight) WHERE {   ?pet :pettype ?petType ;        :weight ?weight . } GROUP BY ?petType"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What is the average weight for each type of pet?",
        "prompt": " Translate the following question into SPARQL: What is the average weight for each type of pet?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?petType (AVG(?petWeight) AS ?averageWeight) WHERE {   ?pet :pettype ?petType ;        :weight ?petWeight . }  GROUP BY ?petType"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the first name and age of students who have a pet.",
        "prompt": " Translate the following question into SPARQL: Find the first name and age of students who have a pet.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?fname ?age WHERE {   ?s a :student .   ?s :has_pet ?p .   ?p :pet_age ?age .   ?s :fname ?fname . }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What are the different first names and ages of the students who do have pets?",
        "prompt": " Translate the following question into SPARQL: What are the different first names and ages of the students who do have pets?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?fname ?age WHERE {   ?st a :student .   ?st :fname ?fname .   ?st :age ?age .   ?st :has_pet#ref-stuid ?ps .   ?pt a :pets .   ?pt :pet_age ?pet_age .   FILTER(?ps = ?st && ?pet_age != \"\") }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "prompt": " Translate the following question into SPARQL: Find the id of the pet owned by student whose last name is \u2018Smith\u2019.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?pet_id WHERE {   ?student :lname \"Smith\" .   ?student :stuid ?student_id .   ?has_pet :ref-stuid ?student_id .   ?has_pet :ref-petid ?pet_id . }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "prompt": " Translate the following question into SPARQL: What is the id of the pet owned by the student whose last name is 'Smith'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?petid  WHERE {   ?student :lname \"Smith\" .   ?has_pet :ref-stuid ?student .   ?has_pet :ref-petid ?petid . }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the number of pets for each student who has any pet and student id.",
        "prompt": " Translate the following question into SPARQL: Find the number of pets for each student who has any pet and student id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?stuid (COUNT(?petid) as ?numPets) WHERE {   ?st :has_pet#ref-stuid ?stuid .    ?st :has_pet#ref-petid ?pet .    ?pet :pets#petid ?petid . } GROUP BY ?stuid"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "prompt": " Translate the following question into SPARQL: For students who have pets , how many pets does each student have ? list their ids instead of names .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?studentId (COUNT(?pet) AS ?numPets) WHERE {   ?hasPet :has_pet#ref-stuid ?student .   ?hasPet :has_pet#ref-petid ?pet .   ?student a :student .   ?pet a :pets . } GROUP BY ?studentId HAVING (COUNT(?pet) > 0)"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the first name and gender of student who have more than one pet.",
        "prompt": " Translate the following question into SPARQL: Find the first name and gender of student who have more than one pet.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName ?gender WHERE {   ?student a :student .   ?student :fname ?firstName .   ?student :sex ?gender .   ?student :has_pet ?pet1 .   ?student :has_pet ?pet2 .   FILTER(?pet1 != ?pet2) }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What is the first name and gender of the all the students who have more than one pet?",
        "prompt": " Translate the following question into SPARQL: What is the first name and gender of the all the students who have more than one pet?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?fname ?gender WHERE {   ?student :has_pet ?pet1.   ?student :has_pet ?pet2.   FILTER (?pet1 != ?pet2)   ?student :student#fname ?fname;            :student#sex ?gender. }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the last name of the student who has a cat that is age 3.",
        "prompt": " Translate the following question into SPARQL: Find the last name of the student who has a cat that is age 3.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?lname WHERE {     ?student a :student .     ?pet a :pets .     ?student :has_pet#ref-petid ?pet .     ?pet :pets#pet_age \"3\" .     ?student :student#lname ?lname . } ORDER BY DESC(?petid) LIMIT 1."
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What is the last name of the student who has a cat that is 3 years old?",
        "prompt": " Translate the following question into SPARQL: What is the last name of the student who has a cat that is 3 years old?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?last_name WHERE {     ?student :has_pet ?pet .     ?pet :pettype \"cat\" .     ?pet :pet_age \"3\" .     ?student :lname ?last_name . } ORDER BY DESC(?last_name) LIMIT 1"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "Find the average age of students who do not have any pet .",
        "prompt": " Translate the following question into SPARQL: Find the average age of students who do not have any pet .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?age) as ?averageAge WHERE {  \t?stuid a :student . \t \tOPTIONAL {?stuid :has_pet ?petid .} \t \tFILTER(!bound(?petid)) \t \t?stuid :student#age ?age . }"
    },
    {
        "db_id": "pets_1",
        "natural_language_question": "What is the average age for all students who do not own any pets ?",
        "prompt": " Translate the following question into SPARQL: What is the average age for all students who do not own any pets ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['has_pet', 'pets', 'student'], 'object_properties': ['has_pet#ref-petid', 'has_pet#ref-stuid'], 'data_properties': ['has_pet#petid', 'has_pet#stuid', 'pets#pet_age', 'pets#petid', 'pets#pettype', 'pets#weight', 'student#advisor', 'student#age', 'student#city_code', 'student#fname', 'student#lname', 'student#major', 'student#sex', 'student#stuid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?age) AS ?average_age WHERE {   ?student a :student .   FILTER NOT EXISTS {     ?student :has_pet ?pet .   }   ?student :student#age ?age . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many continents are there?",
        "prompt": " Translate the following question into SPARQL: How many continents are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?continent) AS ?numContinents)  WHERE {   ?continent a :continents . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the number of continents?",
        "prompt": " Translate the following question into SPARQL: What is the number of continents?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?continent) AS ?numContinents) WHERE {   ?continent a :continents . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "prompt": " Translate the following question into SPARQL: How many countries does each continent have? List the continent id, continent name and the number of countries.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?contId ?contName (COUNT(?country) AS ?numCountries) WHERE {   ?country :ref-continent ?continent .   ?continent :contid ?contId ;              :continent ?contName . } GROUP BY ?contId ?contName"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "For each continent, list its id, name, and how many countries it has?",
        "prompt": " Translate the following question into SPARQL: For each continent, list its id, name, and how many countries it has?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?continent_id ?continent_name (COUNT(?country) AS ?num_of_countries) WHERE {   ?continent a :continents ;              :contid ?continent_id ;              :continent ?continent_name .   ?country a :countries ;            :continent ?continent . } GROUP BY ?continent_id ?continent_name"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many countries are listed?",
        "prompt": " Translate the following question into SPARQL: How many countries are listed?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(?country)  WHERE {     ?country a :countries . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many countries exist?",
        "prompt": " Translate the following question into SPARQL: How many countries exist?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "SELECT (COUNT(?country) AS ?num_countries) WHERE {   ?country a :countries . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many models does each car maker produce? List maker full name, id and the number.",
        "prompt": " Translate the following question into SPARQL: How many models does each car maker produce? List maker full name, id and the number.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?makerFullName ?makerId (COUNT(?model) AS ?numModels) WHERE {   ?maker a :car_makers ;          :fullname ?makerFullName ;          :id ?makerId .   ?model :makeid ?makerId . } GROUP BY ?maker ?makerFullName ?makerId ORDER BY ?makerFullName"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "prompt": " Translate the following question into SPARQL: What is the full name of each car maker, along with its id and how many models it produces?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX :<http://valuenet/ontop/>  SELECT ?id ?fullname (COUNT(?model) AS ?numModels) WHERE {   ?maker a :car_makers ;          :fullname ?fullname ;          :id ?id .   ?model a :model_list ;          :ref-maker ?maker ;          :model ?modelName .   FILTER (LANG(?modelName) = \"\" || LANGMATCHES(LANG(?modelName), \"en\")) } GROUP BY ?id ?fullname"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Which model of the car has the minimum horsepower?",
        "prompt": " Translate the following question into SPARQL: Which model of the car has the minimum horsepower?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?model WHERE {   ?car :ref-model ?modelId .   ?car :ref-maker ?makerId .   ?car :horsepower ?hp .   ?model :modelid ?modelId .   ?maker :id ?makerId .   ?maker :maker ?makerName .   FILTER(?hp = (SELECT MIN(?hp2) WHERE {?car2 :ref-model ?modelId2 . ?car2 :horsepower ?hp2})) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the model of the car with the smallest amount of horsepower?",
        "prompt": " Translate the following question into SPARQL: What is the model of the car with the smallest amount of horsepower?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?model WHERE {   ?car :cars_data#horsepower ?hp .   ?car :car_names#model ?model .   {     SELECT (MIN(?hp) AS ?minhp)     WHERE {       ?c :cars_data#horsepower ?hp .     }   FILTER(?hp = ?minhp)   } } LIMIT 1."
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Find the model of the car whose weight is below the average weight.",
        "prompt": " Translate the following question into SPARQL: Find the model of the car whose weight is below the average weight.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?model WHERE {   ?car :weight ?weight .   FILTER (?weight < (     SELECT AVG(?w) AS ?avg_weight     WHERE {       ?c :weight ?w .     }   ))   ?car :ref-model ?model . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the model for the car with a weight smaller than the average?",
        "prompt": " Translate the following question into SPARQL: What is the model for the car with a weight smaller than the average?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?model WHERE {   ?car :weight ?weight .   FILTER(?weight < (SELECT AVG(?w) WHERE {?c :weight ?w})) .   ?car :ref-model ?model . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Find the name of the makers that produced some cars in the year of 1970?",
        "prompt": " Translate the following question into SPARQL: Find the name of the makers that produced some cars in the year of 1970?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?makerName WHERE {   ?maker :maker \"car makers\" .   ?car :makeid ?maker .   ?car :year \"1970\" .   ?maker :fullname ?makerName . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the name of the different car makers who produced a car in 1970?",
        "prompt": " Translate the following question into SPARQL: What is the name of the different car makers who produced a car in 1970?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?makerName WHERE {   ?maker :maker ?makerName .   ?car :make ?maker .   ?car :year \"1970\" . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Find the make and production time of the cars that were produced in the earliest year?",
        "prompt": " Translate the following question into SPARQL: Find the make and production time of the cars that were produced in the earliest year?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?make ?productionTime WHERE {   ?car a :cars_data .   ?car :make ?make .   ?car :year ?productionTime .   {     SELECT (MIN(?year) as ?minYear)     WHERE {       ?car a :cars_data .       ?car :year ?year .     }   }   FILTER(?productionTime = ?minYear) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "prompt": " Translate the following question into SPARQL: What is the maker of the carr produced in the earliest year and what year was it?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?maker ?year WHERE {   ?car :ref-model ?model .   ?model :make ?maker .   ?car :year ?year .   ?car :ref-model ?model .   ?model :makeid ?makerid .   ?model :modelid ?modelid .   FILTER(?year = (SELECT MIN(?minYear) WHERE {?car :year ?minYear}))   FILTER(?makerid = (SELECT ?makerid WHERE {?model :makeid ?makerid})) } LIMIT 1"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Which distinct car models are the produced after 1980?",
        "prompt": " Translate the following question into SPARQL: Which distinct car models are the produced after 1980?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?model WHERE {   ?car :year ?year .   ?car :ref-model ?model .   FILTER (?year > 1980) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the different models for the cards produced after 1980?",
        "prompt": " Translate the following question into SPARQL: What are the different models for the cards produced after 1980?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?model WHERE {   ?car :ref-maker ?maker .   ?car :ref-model ?model .   ?car :year ?year .   FILTER(?year > 1980) . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many car makers are there in each continents? List the continent name and the count.",
        "prompt": " Translate the following question into SPARQL: How many car makers are there in each continents? List the continent name and the count.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?continent (COUNT(DISTINCT ?maker) AS ?count) WHERE {   ?country a :countries .   ?country :continent ?continent .   ?maker a :car_makers .   ?maker :country ?country . } GROUP BY ?continent"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the name of each continent and how many car makers are there in each one?",
        "prompt": " Translate the following question into SPARQL: What is the name of each continent and how many car makers are there in each one?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?continentName (COUNT(?carMaker) AS ?numCarMakers) WHERE {   ?continent a :continents;              :continent ?continentName.   ?country a :countries;            :continent ?continent;            :countryid ?countryId.   ?carMaker a :car_makers;             :ref-country ?countryId. } GROUP BY ?continentName."
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Which of the countries has the most car makers? List the country name.",
        "prompt": " Translate the following question into SPARQL: Which of the countries has the most car makers? List the country name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName WHERE {   {     SELECT ?country (count(distinct ?maker) as ?count)     WHERE {       ?maker car_makers#ref-country ?country ;              car_makers#maker ?makerName .     }     GROUP BY ?country     ORDER BY DESC(?count) LIMIT 1   }   ?country countries#countryid ?countryId ;            countries#countryname ?countryName .     }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the name of the country with the most car makers?",
        "prompt": " Translate the following question into SPARQL: What is the name of the country with the most car makers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?countryName WHERE {   {     SELECT (COUNT(DISTINCT ?maker) AS ?numMakers) ?country     WHERE {       ?maker :ref-country ?country .     }     GROUP BY ?country     ORDER BY DESC(?numMakers)     LIMIT 1   }   ?country :countryname ?countryName. }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "prompt": " Translate the following question into SPARQL: How many car models are produced by each maker ? Only list the count and the maker full name .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?makerFullName (COUNT(?modelName) AS ?count) WHERE {   ?maker a :car_makers ;          :fullname ?makerFullName .   ?model a :model_list ;          :ref-maker ?maker ;          :model ?modelName . } GROUP BY ?makerFullName"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "prompt": " Translate the following question into SPARQL: What is the number of car models that are produced by each maker and what is the id and full name of each maker?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?maker (count(?model) as ?num_models) ?id ?fullname WHERE {   ?maker a :car_makers ;          :id ?id ;          :fullname ?fullname .   OPTIONAL {     ?model a :car_names ;            :make ?makeid ;            :model ?modelid .     ?maker :car_makers#maker ?makeid .   } } GROUP BY ?maker ?id ?fullname ORDER BY DESC(?num_models)"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "prompt": " Translate the following question into SPARQL: What is the accelerate of the car make amc hornet sportabout (sw)?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?accelerate WHERE {   ?car a :cars_data .   ?car :cars_data#accelerate ?accelerate .   ?car :car_names#make \"amc hornet sportabout (sw)\" . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "prompt": " Translate the following question into SPARQL: How much does the car accelerate that makes amc hornet sportabout (sw)?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?accelerate WHERE {     ?car :ref-model \"amc hornet sportabout (sw)\" ;          :accelerate ?accelerate . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many car makers are there in france?",
        "prompt": " Translate the following question into SPARQL: How many car makers are there in france?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?maker) AS ?count) WHERE { \t?maker a :car_makers . \t?maker :country :countries#France . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the number of makers of care in France?",
        "prompt": " Translate the following question into SPARQL: What is the number of makers of care in France?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?maker) as ?count_of_makers) WHERE {   ?maker a :car_makers .   ?maker :country \"France\" . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many car models are produced in the usa?",
        "prompt": " Translate the following question into SPARQL: How many car models are produced in the usa?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "SELECT (count(?model) as ?count) WHERE {   ?model a :car_names .   ?model :makeid ?maker .   ?maker :ref-country ?country .   ?country :countryname \"usa\" . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the count of the car models produced in the United States?",
        "prompt": " Translate the following question into SPARQL: What is the count of the car models produced in the United States?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?model) AS ?count) WHERE {   ?model :makeid ?makeid .   ?make :ref-country ?country .   ?country :countryname \"United States\" .   FILTER (?makeid = ?make) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "prompt": " Translate the following question into SPARQL: What is the average miles per gallon(mpg) of the cars with 4 cylinders?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?mpg) AS ?average_mpg WHERE{   ?car :ref-model ?model .   ?car :cylinders 4 .   ?car :mpg ?mpg . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "prompt": " Translate the following question into SPARQL: What is the average miles per gallon of all the cards with 4 cylinders?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?mpg) as ?average_mpg WHERE {   ?car :mpg ?mpg.   ?car :cylinders 4. }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "prompt": " Translate the following question into SPARQL: What is the smallest weight of the car produced with 8 cylinders on 1974 ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MIN(?weight) WHERE {   ?car a :cars_data .   ?car :cylinders \"8\" .   ?car :year \"1974\" .   ?car :weight ?weight . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "prompt": " Translate the following question into SPARQL: What is the minimum weight of the car with 8 cylinders produced in 1974 ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MIN(?weight) WHERE{   ?car :cars_data#weight ?weight .   ?car :cars_data#cylinders \"8\"^^xsd:int .   ?car :cars_data#year \"1974\"^^xsd:int . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are all the makers and models?",
        "prompt": " Translate the following question into SPARQL: What are all the makers and models?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?maker ?model WHERE {   ?maker a :car_makers .   ?car a :car_names .   ?car :makeid ?makeId .   ?maker :id ?makerId .   ?car :model ?model .   ?maker :maker ?makerName .   ?car :make ?makerName .   ?car :modelid ?modelId .   FILTER(?makeId = ?makerId && ?modelId = ?carId). }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the makers and models?",
        "prompt": " Translate the following question into SPARQL: What are the makers and models?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?maker ?model WHERE {   ?car a :cars_data.   ?car :cars_data#ref-id ?id .   ?car :car_names#ref-model ?modelid .   ?model a :model_list .   ?model :model_list#ref-maker ?makerid .   ?maker a :car_makers .   ?maker :car_makers#id ?makerid .   ?maker :car_makers#maker ?maker .   ?model :model_list#modelid ?modelid .   ?model :model_list#model ?model . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the countries having at least one car maker? List name and id.",
        "prompt": " Translate the following question into SPARQL: What are the countries having at least one car maker? List name and id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName ?countryID WHERE {   ?carMaker :country ?countryID .   ?country :ref-country ?countryID .   ?country :countryname ?countryName . } GROUP BY ?countryName ?countryID HAVING (COUNT(?carMaker) >= 1)"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the names and ids of all countries with at least one car maker?",
        "prompt": " Translate the following question into SPARQL: What are the names and ids of all countries with at least one car maker?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country_id ?country_name WHERE {   ?car_maker :ref-country ?country .   ?country :countryname ?country_name .   ?country :countryid ?country_id . } GROUP BY ?country_id ?country_name HAVING (COUNT(?car_maker)>0)"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the number of the cars with horsepower more than 150?",
        "prompt": " Translate the following question into SPARQL: What is the number of the cars with horsepower more than 150?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?car) AS ?count) WHERE {   ?car a :cars_data .   ?car :cars_data#horsepower ?hp .   FILTER (?hp > 150) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the number of cars with a horsepower greater than 150?",
        "prompt": " Translate the following question into SPARQL: What is the number of cars with a horsepower greater than 150?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "SELECT (COUNT(?car) AS ?numCars) WHERE {   ?car :horsepower ?hp .   FILTER (?hp > 150)  }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the average weight of cars each year?",
        "prompt": " Translate the following question into SPARQL: What is the average weight of cars each year?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?weight) AS ?average_weight WHERE {   ?car :weight ?weight .   ?car :year ?year . } GROUP BY ?year"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the average weight and year for each year?",
        "prompt": " Translate the following question into SPARQL: What is the average weight and year for each year?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?weight) as ?avg_weight, ?year WHERE {   ?car :weight ?weight .   ?car :year ?year . }  GROUP BY (?year)"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Which countries in europe have at least 3 car manufacturers?",
        "prompt": " Translate the following question into SPARQL: Which countries in europe have at least 3 car manufacturers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?country WHERE {   ?car :ref-make ?maker .   ?car :ref-country ?country .   {     SELECT ?maker (COUNT(DISTINCT ?country) AS ?makerCnt)     WHERE {       ?car :ref-make ?maker .       ?maker :country ?country .     } GROUP BY ?maker HAVING (COUNT(DISTINCT ?country) >= 3)   }   FILTER regex(str(?country), \"europe\", \"i\") }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the names of all European countries with at least 3 manufacturers?",
        "prompt": " Translate the following question into SPARQL: What are the names of all European countries with at least 3 manufacturers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?name WHERE {    ?country a :countries .    ?country :countryname ?name .    {       SELECT ?country (COUNT(DISTINCT ?maker) AS ?count)       WHERE {          ?maker a :car_makers .          ?maker :ref-country ?country .       }       GROUP BY ?country       HAVING (?count >= 3)    }    ?country :ref-continent :continents/Europe . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "prompt": " Translate the following question into SPARQL: What is the maximum horsepower and the make of the car models with 3 cylinders?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MAX(?horsepower) ?make WHERE {   ?car a :cars_data .   ?car :cars_data#cylinders \"3\"^^xsd:int .   ?car :cars_data#horsepower ?horsepower .   ?car :cars_data#ref-id ?model .   ?model :car_names#make ?make . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "prompt": " Translate the following question into SPARQL: What is the largest amount of horsepower for the models with 3 cylinders and what make is it?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?make ?hp WHERE {   ?car :cars_data#horsepower ?hp .   ?car :car_names#make ?make .   ?car :cars_data#cylinders \"3\"^^xsd:int . } ORDER BY DESC(?hp) LIMIT 1"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "prompt": " Translate the following question into SPARQL: Which model saves the most gasoline? That is to say, have the maximum miles per gallon.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>   SELECT ?model ?mpg  WHERE {    ?carData :mpg ?mpg .    ?carData :ref-model ?modelId .    ?modelList :modelid ?modelId .    ?modelList :model ?model .  }  ORDER BY DESC(?mpg)  LIMIT 1"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the car model with the highest mpg ?",
        "prompt": " Translate the following question into SPARQL: What is the car model with the highest mpg ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?model  WHERE {   ?car :mpg ?mpg .   ?car :ref-model ?model .   {     SELECT (MAX(?mpg) as ?max_mpg)     WHERE {       ?car :mpg ?mpg .     }   }   FILTER (?mpg = ?max_mpg) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the average horsepower of the cars before 1980?",
        "prompt": " Translate the following question into SPARQL: What is the average horsepower of the cars before 1980?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?hp) AS ?averageHorsepower WHERE {   ?car a :cars_data .   ?car :horsepower ?hp .   FILTER (?car :year ?year . ?year < 1980) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the average horsepower for all cars produced before 1980 ?",
        "prompt": " Translate the following question into SPARQL: What is the average horsepower for all cars produced before 1980 ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?horsepower) as ?average_horsepower WHERE {   ?car a :cars_data .   ?car :year ?year .   FILTER(?year < 1980)    ?car :horsepower ?horsepower . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the average edispl of the cars of model volvo?",
        "prompt": " Translate the following question into SPARQL: What is the average edispl of the cars of model volvo?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?edispl) as ?averageEdispl  WHERE {   ?car a :cars_data;        :edispl ?edispl;        :ref-id ?id.   ?model a :model_list;          :ref-maker ?maker;          :model ?modelName.   ?makerName a :car_makers;              :id ?maker;              :maker ?makerName.   FILTER regex (?modelName, \"volvo\", \"i\") }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the average edispl for all volvos?",
        "prompt": " Translate the following question into SPARQL: What is the average edispl for all volvos?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?edispl) as ?average_edispl WHERE {     ?car a :cars_data .     ?car :edispl ?edispl .     ?car :makeid ?makeid .     ?car :modelid ?modelid .     ?make a :car_makers .     ?make :maker \"Volvo\" . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the maximum accelerate for different number of cylinders?",
        "prompt": " Translate the following question into SPARQL: What is the maximum accelerate for different number of cylinders?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MAX(?accel) WHERE {   ?car :cars_data#cylinders ?cylinders .   ?car :cars_data#accelerate ?accel . } GROUP BY ?cylinders"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the maximum accelerate for all the different cylinders?",
        "prompt": " Translate the following question into SPARQL: What is the maximum accelerate for all the different cylinders?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MAX(?max_accelerate) WHERE {   ?car :cars_data#accelerate ?max_accelerate .   ?car :cars_data#cylinders ?cylinders . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Which model has the most version(make) of cars?",
        "prompt": " Translate the following question into SPARQL: Which model has the most version(make) of cars?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?model (COUNT(?make) AS ?count) WHERE {   ?car :ref-id ?id .   ?car :ref-model ?model .   ?make :ref-model ?model . } GROUP BY ?model ORDER BY DESC(?count) LIMIT 1"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What model has the most different versions?",
        "prompt": " Translate the following question into SPARQL: What model has the most different versions?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?versions) AS ?numVersions) ?model WHERE {   ?model a :model_list ;          :ref-maker ?maker ;          :modelid ?modelid .   ?car_name a :car_names ;             :ref-model ?modelid ;             :model ?modelName .   ?car_data a :cars_data ;             :ref-id ?carId ;             :makeid ?modelid .   ?versions a :cars_data ;             :makeid ?modelid ;             :mpg ?mpg ;             :weight ?weight   FILTER NOT EXISTS {     ?otherVersions a :cars_data ;                    :makeid ?modelid ;                    :mpg ?otherMpg ;                    :weight ?otherWeight     FILTER (?otherMpg > ?mpg || (?otherMpg = ?mpg && ?otherWeight > ?weight))   } } GROUP BY ?model ORDER BY DESC(?numVersions) LIMIT 1"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many cars have more than 4 cylinders?",
        "prompt": " Translate the following question into SPARQL: How many cars have more than 4 cylinders?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?car) AS ?numCars) WHERE {   ?car a :cars_data .   ?car :cylinders ?cylinders .   FILTER(?cylinders > 4)  }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the number of cars with more than 4 cylinders?",
        "prompt": " Translate the following question into SPARQL: What is the number of cars with more than 4 cylinders?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?car) AS ?num_cars) WHERE {   ?car a :cars_data ;        :cylinders ?cylinders .   FILTER (?cylinders > 4) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "how many cars were produced in 1980?",
        "prompt": " Translate the following question into SPARQL: how many cars were produced in 1980?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "SELECT (COUNT(?car) AS ?count) WHERE {   ?car :year \"1980\"^^xsd:int . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "In 1980, how many cars were made?",
        "prompt": " Translate the following question into SPARQL: In 1980, how many cars were made?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "SELECT (SUM(?cars) AS ?total_cars) WHERE {   ?car cars_data#year \"1980\"^^xsd:int .   ?car cars_data#id ?car_id .   ?car cars_data#mpg ?mpg .   ?car cars_data#cylinders ?cylinders .   ?car cars_data#horsepower ?horsepower .   ?car cars_data#weight ?weight .   BIND((?mpg * ?cylinders * 0.7457) / (?horsepower * ?weight) AS ?cars) } PREFIX : <http://valuenet/ontop/>\""
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many car models were produced by the maker with full name American Motor Company?",
        "prompt": " Translate the following question into SPARQL: How many car models were produced by the maker with full name American Motor Company?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?model) AS ?numModels) WHERE {   ?car :makeid ?maker .   ?maker :fullname \"American Motor Company\" .   ?car :model ?model . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the number of car models created by the car maker American Motor Company?",
        "prompt": " Translate the following question into SPARQL: What is the number of car models created by the car maker American Motor Company?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?model) AS ?numModels) WHERE {   ?maker :car_makers#maker \"American Motor Company\".   ?makerId :car_makers#id ?makerIdValue.   ?modelList :model_list#ref-maker ?makerId.   ?modelList :model_list#model ?model. }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Which makers designed more than 3 car models? List full name and the id.",
        "prompt": " Translate the following question into SPARQL: Which makers designed more than 3 car models? List full name and the id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?fullname  WHERE {   ?maker a :car_makers ;          :fullname ?fullname ;          :id ?id .   {     SELECT ?maker (COUNT(?model) AS ?count)     WHERE {       ?model a :model_list ;              :ref-maker ?maker .     }     GROUP BY ?maker     HAVING(?count > 3)   } }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the names and ids of all makers with more than 3 models?",
        "prompt": " Translate the following question into SPARQL: What are the names and ids of all makers with more than 3 models?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?makerName ?makerId WHERE {   ?maker a :car_makers .   ?maker :id ?makerId .   ?maker :maker ?makerName .   {     SELECT ?makerId (COUNT(?model) AS ?modelCount)     WHERE {       ?model a :model_list .       ?model :ref-maker ?makerId .     }     GROUP BY ?makerId     HAVING (?modelCount > 3)   } }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "prompt": " Translate the following question into SPARQL: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?model WHERE {   ?maker :fullname \"General Motors\" .   ?car :weight ?weight .   FILTER (?weight > 3500 || ?maker = ?maker).   ?model :ref-maker ?maker . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "prompt": " Translate the following question into SPARQL: What are the different models created by either the car maker General Motors or weighed more than 3500?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?model WHERE {   {?c :ref-model ?m .    ?m :make ?make .    ?maker :ref-maker ?make .   ?maker :maker \"General Motors\" .    ?c :weight ?w .    FILTER(?w > 3500)}    UNION    {?m :make ?make .    ?maker :ref-maker ?make .   ?maker :maker \"General Motors\" .    ?m :weight ?w .    FILTER(?w > 3500)}    BIND(CONCAT(?make, \" \", ?m) as ?model) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "prompt": " Translate the following question into SPARQL: In which years cars were produced weighing no less than 3000 and no more than 4000 ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?year  WHERE {   ?car a :cars_data ;        :id ?id ;        :weight ?weight ;        :year ?year .   FILTER (?weight >= 3000 && ?weight <= 4000) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "prompt": " Translate the following question into SPARQL: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?year WHERE {   ?car1 :weight ?weight1 ;         :year ?year ;         a :cars_data .   ?car2 :weight ?weight2 ;         :year ?year ;         a :cars_data .   FILTER (?weight1 < 4000 && ?weight2 > 3000) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the horsepower of the car with the largest accelerate?",
        "prompt": " Translate the following question into SPARQL: What is the horsepower of the car with the largest accelerate?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?horsepower WHERE {   ?car :cars_data#horsepower ?horsepower .   ?car :cars_data#accelerate ?max_accelerate .   FILTER(?max_accelerate = (SELECT (MAX(?accelerate))                             WHERE {?c :cars_data#accelerate ?accelerate} ) ) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the horsepower of the car with the greatest accelerate?",
        "prompt": " Translate the following question into SPARQL: What is the horsepower of the car with the greatest accelerate?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?horsepower WHERE {   ?car :cars_data#horsepower ?horsepower .   ?car :cars_data#accelerate ?accelerate .   FILTER(?accelerate IN (SELECT MAX(?accelerate2) WHERE { ?car2 :cars_data#accelerate ?accelerate2 . }))  }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "prompt": " Translate the following question into SPARQL: For model volvo, how many cylinders does the car with the least accelerate have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (MIN(?cylinders) AS ?minCylinders)  WHERE {   ?car :ref-model :model_list/model ;        :cylinders ?cylinders ;        :accelerate ?accelerate ;        :ref-maker ?maker .      ?maker :maker \"volvo\" . } ORDER BY ASC(?accelerate) LIMIT 1"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "prompt": " Translate the following question into SPARQL: For a volvo model, how many cylinders does the version with least accelerate have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>   SELECT (MIN(?cylinders) AS ?min_cylinders) WHERE {   ?car a :cars_data .   ?car :cars_data#cylinders ?cylinders .   ?car :cars_data#accelerate ?accelerate .   ?car :car_names#make \"volvo\" . }  ORDER BY ASC(?accelerate)  LIMIT 1."
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "prompt": " Translate the following question into SPARQL: How many cars have a larger accelerate than the car with the largest horsepower?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?car) AS ?count) WHERE {   ?car a :cars_data .   ?car :cars_data#accelerate ?accelerate .   FILTER(?accelerate > (     SELECT MAX(?horsepower)     WHERE {       ?car1 a :cars_data .       ?car1 :cars_data#horsepower ?horsepower .     }   )) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "prompt": " Translate the following question into SPARQL: What is the number of cars with a greater accelerate than the one with the most horsepower?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?car) as ?num_cars) WHERE {     {         SELECT MAX(?hp) as ?max_hp         WHERE {             ?car :horsepower ?hp .         }     }     ?car :accelerate ?accel .     FILTER (?accel > ?max_hp) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many countries has more than 2 car makers ?",
        "prompt": " Translate the following question into SPARQL: How many countries has more than 2 car makers ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?country) AS ?count) WHERE {   ?maker a :car_makers .   ?maker :ref-country ?country .   {     SELECT ?country (COUNT(DISTINCT ?maker) AS ?numMakers)     WHERE {       ?maker a :car_makers .       ?maker :ref-country ?country .     }     GROUP BY ?country     HAVING (?numMakers > 2)   } }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the number of countries with more than 2 car makers ?",
        "prompt": " Translate the following question into SPARQL: What is the number of countries with more than 2 car makers ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(?country) as ?count WHERE {   SELECT ?country (COUNT(DISTINCT ?maker) as ?num_makers)   WHERE {     ?maker :ref-country ?country .   }   GROUP BY ?country   HAVING (?num_makers > 2) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "How many cars has over 6 cylinders?",
        "prompt": " Translate the following question into SPARQL: How many cars has over 6 cylinders?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(*) as ?count) WHERE {   ?car :cars_data#cylinders ?cylinders .   FILTER (?cylinders > 6) . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the number of carsw ith over 6 cylinders?",
        "prompt": " Translate the following question into SPARQL: What is the number of carsw ith over 6 cylinders?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?car) AS ?num_cars_over_6_cyl) WHERE {   ?car a :cars_data ;        :cylinders ?cylinders .   FILTER(?cylinders > 6) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "prompt": " Translate the following question into SPARQL: For the cars with 4 cylinders, which model has the largest horsepower?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?model ?hp  WHERE {   ?car :cylinders 4 .   ?car :horsepower ?hp .   ?car :ref-model ?modelid .   ?model :modelid ?modelid . }  ORDER BY DESC(?hp) LIMIT 1"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "prompt": " Translate the following question into SPARQL: For all of the 4 cylinder cars, which model has the most horsepower?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?model (MAX(?hp) as ?max_hp) WHERE {   ?car :cylinders \"4\"^^<http://www.w3.org/2001/XMLSchema#integer> .   ?car :horsepower ?hp .   ?car :ref-model ?model . } GROUP BY ?model ORDER BY DESC(?max_hp) LIMIT 1"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "prompt": " Translate the following question into SPARQL: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?makeid ?makename WHERE {   ?car :horsepower ?hp .   ?car :cylinders ?cylinders .   ?make :id ?makeid .   ?make :maker ?makename .   FILTER (?cylinders <= 3)   FILTER (?hp > (SELECT MIN(?hp2) WHERE {?car2 :horsepower ?hp2})) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "prompt": " Translate the following question into SPARQL: Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?makeid ?makename WHERE {   ?car :cylinders ?cylinders .   ?car :makeid ?makeid .   ?make :id ?makeid .   ?make :maker ?makename .   FILTER(!bound(?horsepower) || ?horsepower < :min-horsepower) .   FILTER(?cylinders < 4) . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "prompt": " Translate the following question into SPARQL: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MAX(?mpg) AS ?max_mpg WHERE {   ?car :cars_data#mpg ?mpg .   ?car :cars_data#cylinders \"8\"^^xsd:int .   ?car :cars_data#year ?year .   FILTER(?year < 1980) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "prompt": " Translate the following question into SPARQL: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MAX(?mpg) AS ?max_mpg  WHERE {   ?car a :cars_data .   ?car :mpg ?mpg .   FILTER (?car :cylinders \"8\" OR ?car :year < \"1980\") }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "prompt": " Translate the following question into SPARQL: Which models are lighter than 3500 but not built by the 'Ford Motor Company'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?model_name WHERE {   ?car :weight ?weight .   ?car :ref-model ?model .   ?model :model ?model_name .   FILTER(?weight < 3500 && NOT EXISTS {?car :ref-maker :Ford_Motor_Company}) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "prompt": " Translate the following question into SPARQL: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?model WHERE {   ?car a :cars_data ;        :weight ?weight ;        :ref-id ?model_id .   ?model a :model_list ;          :modelid ?model_id ;          :maker ?maker .   ?maker a :car_makers .   FILTER(?weight < 3500 && NOT EXISTS {?maker a :car_makers ; :fullname \"Ford Motor Company\"}) }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the name of the countries where there is not a single car maker?",
        "prompt": " Translate the following question into SPARQL: What are the name of the countries where there is not a single car maker?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?countryName WHERE {   ?country a :countries .   FILTER NOT EXISTS {?maker a :car_makers ; :ref-country ?country .}   ?country :countryname ?countryName . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the names of the countries with no car makers?",
        "prompt": " Translate the following question into SPARQL: What are the names of the countries with no car makers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?countryname  WHERE {   ?country a :countries .   FILTER NOT EXISTS {     ?maker a :car_makers .     ?maker :car_makers#ref-country ?country .   }   ?country :countries#countryname ?countryname . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "prompt": " Translate the following question into SPARQL: Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?maker WHERE {   ?maker a :car_makers ;          :id ?id .   {     SELECT ?maker (COUNT(DISTINCT ?model) AS ?modelCount) WHERE {       ?model a :car_names ;              :makeid ?makeid ;              :make ?maker .       ?cars a :cars_data ;             :ref-id ?makeid .     } GROUP BY ?maker   } FILTER(?modelCount >= 2)     FILTER EXISTS {       SELECT ?anotherMaker WHERE {         ?anotherMaker a :car_makers .         FILTER(?anotherMaker != ?maker)       } LIMIT 3     } }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "prompt": " Translate the following question into SPARQL: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?maker_id ?maker_name WHERE {    # Find all car makers that produce at least 2 models    ?maker_id a :car_makers .    ?maker_id :maker ?maker_name .    ?model :makeid ?maker_id .    ?model :model ?model_name .    {       SELECT ?maker_id       WHERE {          ?model :makeid ?maker_id .          ?model :model ?model_name .       }       GROUP BY ?maker_id       HAVING (COUNT(?model) >= 2)    }    # Find all cars produced by each maker    ?car :makeid ?maker_id .    ?car :id ?car_id .    {       SELECT ?maker_id       WHERE {          ?car :makeid ?maker_id .       }       GROUP BY ?maker_id       HAVING (COUNT(?car) > 3)    } } ORDER BY ?maker_id"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "prompt": " Translate the following question into SPARQL: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?id ?name WHERE {   ?country a :countries .   ?country :countryname ?name .   {     SELECT (COUNT(DISTINCT ?maker) AS ?count) WHERE {       ?maker a :car_makers ;         :ref-country ?country ;         :maker ?makername .       OPTIONAL { ?car a :cars_data ;         :ref-id ?maker ;         :make ?make ;         FILTER(?make = 'fiat') .       }     }   FILTER (?count > 3 || EXISTS {?car}) .   }   ?country :countryid ?id . }"
    },
    {
        "db_id": "car_1",
        "natural_language_question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "prompt": " Translate the following question into SPARQL: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['car_makers', 'car_names', 'cars_data', 'continents', 'countries', 'model_list'], 'object_properties': ['car_makers#ref-country', 'car_names#ref-model', 'cars_data#ref-id', 'countries#ref-continent', 'model_list#ref-maker'], 'data_properties': ['car_makers#country', 'car_makers#fullname', 'car_makers#id', 'car_makers#maker', 'car_names#make', 'car_names#makeid', 'car_names#model', 'cars_data#accelerate', 'cars_data#cylinders', 'cars_data#edispl', 'cars_data#horsepower', 'cars_data#id', 'cars_data#mpg', 'cars_data#weight', 'cars_data#year', 'continents#contid', 'continents#continent', 'countries#continent', 'countries#countryid', 'countries#countryname', 'model_list#maker', 'model_list#model', 'model_list#modelid']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?name WHERE {     ?c a :countries ;         :countryname ?name ;         :countryid ?id .              { SELECT DISTINCT ?countryid       WHERE {           { SELECT ?countryid (COUNT(DISTINCT ?maker) AS ?num_makers)             WHERE {                 ?cm a :car_makers ;                     :country ?c ;                     :id ?maker_id ;                     :maker ?maker .                 BIND(?c AS ?countryid)             }             GROUP BY ?countryid             HAVING (?num_makers > 3)           }       }       UNION       { SELECT DISTINCT ?countryid         WHERE {             ?cd a :cars_data ;                 :ref-id ?car_id ;                 :make \"Fiat\" .             ?cn a :car_names ;                 :ref-model ?car_id .             ?cm a :car_makers ;                 :ref-country ?country ;                 :id ?maker_id ;                 :maker ?maker .             ?c a :countries ;                 :countryid ?countryid ;                 :countryname ?countryname .             FILTER (?country = ?c)         }       }     } }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which country does Airline 'JetBlue Airways' belong to?",
        "prompt": " Translate the following question into SPARQL: Which country does Airline 'JetBlue Airways' belong to?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country WHERE {   ?airline a :airlines .   ?airline :Airline \"JetBlue Airways\" .   ?airline :Country ?country . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What country is Jetblue Airways affiliated with?",
        "prompt": " Translate the following question into SPARQL: What country is Jetblue Airways affiliated with?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country WHERE {   ?airline a :airlines .   ?airline :Airline \"Jetblue Airways\" .   ?airline :Country ?country . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What is the abbreviation of Airline 'JetBlue Airways'?",
        "prompt": " Translate the following question into SPARQL: What is the abbreviation of Airline 'JetBlue Airways'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?abbreviation  WHERE {   ?airline a :airlines ;            :Airline \"JetBlue Airways\" ;            :Abbreviation ?abbreviation . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which abbreviation corresponds to Jetblue Airways?",
        "prompt": " Translate the following question into SPARQL: Which abbreviation corresponds to Jetblue Airways?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?abbreviation  WHERE {   ?airline a :airlines .   ?airline :Abbreviation ?abbreviation .   FILTER(?airline = \"Jetblue Airways\") }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "List all airline names and their abbreviations in 'USA'.",
        "prompt": " Translate the following question into SPARQL: List all airline names and their abbreviations in 'USA'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airlineName ?abbreviation WHERE {   ?airline :Airline ?airlineName ;            :Abbreviation ?abbreviation ;            :Country 'USA' . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What are the airline names and abbreviations for airlines in the USA?",
        "prompt": " Translate the following question into SPARQL: What are the airline names and abbreviations for airlines in the USA?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?airline_name ?airline_abbreviation WHERE {   ?airline a :airlines .   ?airline :Airline ?airline_name .   ?airline :Abbreviation ?airline_abbreviation .   ?airline :Country \"USA\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "List the airport code and name in the city of Anthony.",
        "prompt": " Translate the following question into SPARQL: List the airport code and name in the city of Anthony.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?code ?name WHERE {   ?airport a :airports ;            :City \"Anthony\" ;            :AirportCode ?code ;            :AirportName ?name . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Give the airport code and airport name corresonding to the city Anthony.",
        "prompt": " Translate the following question into SPARQL: Give the airport code and airport name corresonding to the city Anthony.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?code ?name  WHERE {    ?airport :AirportCode ?code ;             :AirportName ?name ;             :City \"Anthony\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many airlines do we have?",
        "prompt": " Translate the following question into SPARQL: How many airlines do we have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?airline) AS ?airlineCount) WHERE {   ?airline a :airlines. }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What is the total number of airlines?",
        "prompt": " Translate the following question into SPARQL: What is the total number of airlines?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?airline) AS ?totalAirlines) WHERE {   ?airline a :airlines. }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many airports do we have?",
        "prompt": " Translate the following question into SPARQL: How many airports do we have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?airport) AS ?airportCount) WHERE {   ?airport a :airports . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Return the number of  airports.",
        "prompt": " Translate the following question into SPARQL: Return the number of  airports.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(?airport) WHERE {?airport a :airports}"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many flights do we have?",
        "prompt": " Translate the following question into SPARQL: How many flights do we have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?flight) AS ?numFlights) WHERE {   ?flight a :flights . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Return the number of flights.",
        "prompt": " Translate the following question into SPARQL: Return the number of flights.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "SELECT (COUNT(?flight) AS ?num_flights)  WHERE {   ?flight a :flights . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which airline has abbreviation 'UAL'?",
        "prompt": " Translate the following question into SPARQL: Which airline has abbreviation 'UAL'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airline WHERE {   ?airline :Abbreviation \"UAL\" .   ?airline a :airlines . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Give the airline with abbreviation 'UAL'.",
        "prompt": " Translate the following question into SPARQL: Give the airline with abbreviation 'UAL'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airline WHERE {   ?airline :Abbreviation 'UAL' .   ?airline a :airlines . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many airlines are from USA?",
        "prompt": " Translate the following question into SPARQL: How many airlines are from USA?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?airline) AS ?numAirlines) WHERE {   ?airline :Airline ?airlineName.   ?airline :Country \"USA\". }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Return the number of airlines in the USA.",
        "prompt": " Translate the following question into SPARQL: Return the number of airlines in the USA.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?airline) AS ?numAirlines) WHERE {   ?airline a :airlines .   ?airline :Country \"USA\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which city and country is the Alton airport at?",
        "prompt": " Translate the following question into SPARQL: Which city and country is the Alton airport at?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?city ?country WHERE {   :Alton_airport a :airports ;   :City ?city ;   :Country ?country . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Give the city and country for the Alton airport.",
        "prompt": " Translate the following question into SPARQL: Give the city and country for the Alton airport.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?city ?country  WHERE {   ?airport :AirportName \"Alton airport\" .   ?airport :City ?city .   ?airport :Country ?country . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What is the airport name for airport 'AKO'?",
        "prompt": " Translate the following question into SPARQL: What is the airport name for airport 'AKO'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airportName WHERE {   ?airport :AirportCode \"AKO\" .   ?airport :AirportName ?airportName . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Return the name of the airport with code 'AKO'.",
        "prompt": " Translate the following question into SPARQL: Return the name of the airport with code 'AKO'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airportName WHERE {   ?airport :AirportCode \"AKO\" .   ?airport :AirportName ?airportName . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What are airport names at City 'Aberdeen'?",
        "prompt": " Translate the following question into SPARQL: What are airport names at City 'Aberdeen'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airportName WHERE {   ?airport a :airports ;            :City \"Aberdeen\" ;            :AirportName ?airportName . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What are the names of airports in Aberdeen?",
        "prompt": " Translate the following question into SPARQL: What are the names of airports in Aberdeen?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airportName WHERE {   ?airport a :airports .   ?airport :AirportName ?airportName .   ?airport :City \"Aberdeen\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many flights depart from 'APG'?",
        "prompt": " Translate the following question into SPARQL: How many flights depart from 'APG'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "SELECT (COUNT(?flight) AS ?numFlights) WHERE {   ?flight :Airline ?airline .   ?flight :SourceAirport ?source .   FILTER(?source = \"APG\") }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Count the number of flights departing from 'APG'.",
        "prompt": " Translate the following question into SPARQL: Count the number of flights departing from 'APG'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?flight) AS ?countFlights) WHERE {   ?flight :Airline ?airline.   ?flight :SourceAirport ?source.   FILTER(?source = \"APG\"). }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many flights have destination ATO?",
        "prompt": " Translate the following question into SPARQL: How many flights have destination ATO?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "SELECT (COUNT(?flight) AS ?numFlights) WHERE {   ?flight :ref-DestAirport ?destAirport .   FILTER (?destAirport = \"ATO\") }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Count the number of flights into ATO.",
        "prompt": " Translate the following question into SPARQL: Count the number of flights into ATO.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(*) AS ?num_flights) WHERE {   ?flight :flights#ref-DestAirport :airports#ATO . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many flights depart from City Aberdeen?",
        "prompt": " Translate the following question into SPARQL: How many flights depart from City Aberdeen?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?flight)  WHERE {   ?flight :Airline ?airline .   ?flight :SourceAirport ?source .   ?source :City \"Aberdeen\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Return the number of flights departing from Aberdeen.",
        "prompt": " Translate the following question into SPARQL: Return the number of flights departing from Aberdeen.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(?flight) WHERE {   ?flight a :flights .   ?flight :flights#ref-SourceAirport ?airport .   FILTER (?airport = \"Aberdeen\") }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many flights arriving in Aberdeen city?",
        "prompt": " Translate the following question into SPARQL: How many flights arriving in Aberdeen city?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?flight) AS ?countArrivingFlights) WHERE {   ?flight a :flights .   ?flight :flights#DestAirport ?airport .   ?airport :airports#City \"Aberdeen city\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Return the number of flights arriving in Aberdeen.",
        "prompt": " Translate the following question into SPARQL: Return the number of flights arriving in Aberdeen.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?flight) AS ?numFlights) WHERE {   ?flight a :flights;           :ref-DestAirport ?destAirport .   ?destAirport :AirportName \"Aberdeen\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "prompt": " Translate the following question into SPARQL: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX :<http://valuenet/ontop/> SELECT COUNT(?flight)  WHERE {     ?flight a :flights ;             :flights#ref-SourceAirport ?source ;             :flights#ref-DestAirport ?dest .     FILTER (?source = \"Aberdeen\" && ?dest = \"Ashley\") }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many flights fly from Aberdeen to Ashley?",
        "prompt": " Translate the following question into SPARQL: How many flights fly from Aberdeen to Ashley?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?flight) AS ?num_flights) WHERE {   ?flight a :flights .   ?flight :flights#ref-SourceAirport ?source .   ?flight :flights#ref-DestAirport ?dest .      FILTER(?source = \"Aberdeen\" && ?dest = \"Ashley\") }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many flights does airline 'JetBlue Airways' have?",
        "prompt": " Translate the following question into SPARQL: How many flights does airline 'JetBlue Airways' have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?flight) AS ?numFlights) WHERE {   ?flight a :flights ;           :Airline \"JetBlue Airways\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Give the number of Jetblue Airways flights.",
        "prompt": " Translate the following question into SPARQL: Give the number of Jetblue Airways flights.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?flight) AS ?numJetblueFlights) WHERE {   ?flight a :flights .   ?flight :Airline \"Jetblue Airways\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "prompt": " Translate the following question into SPARQL: How many 'United Airlines' flights go to Airport 'ASY'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?flight) WHERE {   ?flight a :flights .   ?flight :Airline \"United Airlines\" .   ?flight :ref-DestAirport ?dest .   ?dest :AirportCode \"ASY\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "prompt": " Translate the following question into SPARQL: Count the number of United Airlines flights arriving in ASY Airport.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?flight) AS ?count)  WHERE {   ?flight a :flights .   ?flight :flights#Airline \"United Airlines\" .   ?flight :flights#DestAirport :airports#ASY . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "prompt": " Translate the following question into SPARQL: How many 'United Airlines' flights depart from Airport 'AHD'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?flight)  WHERE {   ?flight :Airline \"United Airlines\" .   ?flight :ref-SourceAirport ?airport .   FILTER(?airport = \"AHD\") }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "prompt": " Translate the following question into SPARQL: Return the number of United Airlines flights leaving from AHD Airport.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?flight) AS ?num_flights) WHERE {   ?flight a :flights .   ?flight :flights#ref-SourceAirport ?src .   ?src :airports#AirportCode \"AHD\" .   ?flight :flights#Airline \"United Airlines\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many United Airlines flights go to City 'Aberdeen'?",
        "prompt": " Translate the following question into SPARQL: How many United Airlines flights go to City 'Aberdeen'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "SELECT COUNT(?flight) WHERE {  ?flight a :flights .  ?flight :flights#Airline \"United Airlines\" .  ?flight :flights#SourceAirport ?sourceAirport .  ?sourceAirport :airports#City \"Aberdeen\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "prompt": " Translate the following question into SPARQL: Count the number of United Airlines flights that arrive in Aberdeen.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?flight) AS ?count) WHERE {   ?flight a :flights .   ?flight :Airline \"United Airlines\" .   ?flight :ref-DestAirport ?dest .   ?dest :City \"Aberdeen\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which city has most number of arriving flights?",
        "prompt": " Translate the following question into SPARQL: Which city has most number of arriving flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?city (COUNT(?flight) AS ?count)  WHERE {   ?flight :Airline ?airline.   ?flight :DestAirport ?dest.   ?dest :City ?city. }  GROUP BY ?city  ORDER BY DESC(?count)  LIMIT 1."
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which city has the most frequent destination airport?",
        "prompt": " Translate the following question into SPARQL: Which city has the most frequent destination airport?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?city WHERE {   SELECT ?destAirport (COUNT(?destAirport) AS ?count)   WHERE {     ?flight :flights#DestAirport ?destAirport .   }   GROUP BY ?destAirport   ORDER BY DESC(?count)   LIMIT 1      ?airport :airports#City ?city .   ?airport :airports#AirportCode ?destAirport . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which city has most number of departing flights?",
        "prompt": " Translate the following question into SPARQL: Which city has most number of departing flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?city (COUNT(?flight) AS ?num_flights) WHERE {   ?flight :ref-SourceAirport ?airport .   ?airport :City ?city . } GROUP BY ?city ORDER BY DESC(?num_flights) LIMIT 1"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which city is the most frequent source airport?",
        "prompt": " Translate the following question into SPARQL: Which city is the most frequent source airport?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?city WHERE {   ?sourceAirport a :airports .   ?flight a :flights .   ?flight :ref-SourceAirport ?sourceAirport .   ?sourceAirport :City ?city . } GROUP BY ?city ORDER BY DESC(COUNT(?flight)) LIMIT 1"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What is the code of airport that has the highest number of flights?",
        "prompt": " Translate the following question into SPARQL: What is the code of airport that has the highest number of flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airportCode WHERE {   SELECT ?airportCode (COUNT(?flight) as ?flightCount) {     ?flight :ref-SourceAirport ?airport .     ?airport :AirportCode ?airportCode .   } GROUP BY ?airportCode ORDER BY DESC(?flightCount) LIMIT 1 }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What is the airport code of the airport with the most flights?",
        "prompt": " Translate the following question into SPARQL: What is the airport code of the airport with the most flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?airport_code WHERE {   SELECT ?airport_code (COUNT(?flight) as ?num_flights)   WHERE {     ?flight :ref-SourceAirport ?airport .     ?airport :AirportCode ?airport_code .   }   GROUP BY ?airport_code   ORDER BY DESC(?num_flights)   LIMIT 1 }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What is the code of airport that has fewest number of flights?",
        "prompt": " Translate the following question into SPARQL: What is the code of airport that has fewest number of flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?code WHERE {   {     SELECT (COUNT(?flight) AS ?count) ?airport     WHERE {       ?flight :ref-SourceAirport ?airport .       ?airport :AirportCode ?code .     }     GROUP BY ?airport     ORDER BY ?count     LIMIT 1   } }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Give the code of the airport with the least flights.",
        "prompt": " Translate the following question into SPARQL: Give the code of the airport with the least flights.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?airport WHERE {   SELECT ?airport (COUNT(?flight) as ?numFlights)   WHERE {     ?flight :ref-SourceAirport ?airport .   }   GROUP BY ?airport   ORDER BY ?numFlights   LIMIT 1 }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which airline has most number of flights?",
        "prompt": " Translate the following question into SPARQL: Which airline has most number of flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airline  WHERE {   ?flight :Airline ?airline . } GROUP BY ?airline  ORDER BY DESC(COUNT(?flight)) LIMIT 1"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What airline serves the most flights?",
        "prompt": " Translate the following question into SPARQL: What airline serves the most flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airline (COUNT(?flight) AS ?num_flights) WHERE {     ?flight :Airline ?airline . } GROUP BY ?airline  ORDER BY DESC(?num_flights) LIMIT 1"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "prompt": " Translate the following question into SPARQL: Find the abbreviation and country of the airline that has fewest number of flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?abbrev ?country WHERE {   {     SELECT (MIN(?countFlights) as ?minFlights)     WHERE {       ?a flights#Airline ?airline ;         flights#FlightNo ?flightNo .       {         SELECT ?airline (COUNT(?flightNo) as ?countFlights)         WHERE {           ?a flights#Airline ?airline ;             flights#FlightNo ?flightNo .         }         GROUP BY ?airline       }     }   }   ?a flights#Airline ?airline ;     airlines#Abbreviation ?abbrev ;     airlines#Country ?country .   {     SELECT ?airline (COUNT(?flightNo) as ?countFlights)     WHERE {       ?a flights#Airline ?airline ;         flights#FlightNo ?flightNo .     }     GROUP BY ?airline   }   FILTER(?countFlights = ?minFlights) }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "prompt": " Translate the following question into SPARQL: What is the abbreviation of the airilne has the fewest flights and what country is it in?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?abbreviation ?Country WHERE {   {     SELECT ?Airline (COUNT(?Airline) AS ?numflights)     WHERE {       ?flights :Airline ?Airline .     }     GROUP BY ?Airline     ORDER BY ?numflights     LIMIT 1   }   ?airlines :Abbreviation ?abbreviation ;             :Airline ?Airline ;             :Country ?Country . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What are airlines that have some flight departing from airport 'AHD'?",
        "prompt": " Translate the following question into SPARQL: What are airlines that have some flight departing from airport 'AHD'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?airline WHERE {   ?flight :Airline ?airline .   ?flight :ref-SourceAirport ?airport .   FILTER(?airport = \"AHD\")   }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which airlines have a flight with source airport AHD?",
        "prompt": " Translate the following question into SPARQL: Which airlines have a flight with source airport AHD?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airline  WHERE  {   ?flight :flights#SourceAirport \"AHD\" .   ?flight :flights#Airline ?airline . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What are airlines that have flights arriving at airport 'AHD'?",
        "prompt": " Translate the following question into SPARQL: What are airlines that have flights arriving at airport 'AHD'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?airline  WHERE {   ?flight a :flights ;           :Airline ?airline ;           :ref-DestAirport :AHD . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which airlines have a flight with destination airport AHD?",
        "prompt": " Translate the following question into SPARQL: Which airlines have a flight with destination airport AHD?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?airline WHERE {   ?flight :flights#DestAirport 'AHD' .   ?flight :flights#Airline ?airline . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "prompt": " Translate the following question into SPARQL: Find all airlines that have flights from both airports 'APG' and 'CVO'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?airline WHERE {    ?flight1 :flights#Airline ?airline;             :flights#SourceAirport \"APG\";             :flights#DestAirport ?dest1.    ?flight2 :flights#Airline ?airline;             :flights#SourceAirport \"CVO\";             :flights#DestAirport ?dest2.    FILTER(?dest1 = ?dest2) }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which airlines have departing flights from both APG and CVO airports?",
        "prompt": " Translate the following question into SPARQL: Which airlines have departing flights from both APG and CVO airports?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?airline WHERE {   ?flight1 flights:Airline ?airline ;             flights:ref-SourceAirport ?ap ;             flights:ref-DestAirport ?dest1 .   ?flight2 flights:Airline ?airline ;             flights:ref-SourceAirport ?cvo ;             flights:ref-DestAirport ?dest2 .   FILTER(?ap = \"APG\" && ?cvo = \"CVO\" && ?airline != \"\") }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "prompt": " Translate the following question into SPARQL: Find all airlines that have flights from airport 'CVO' but not from 'APG'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airline WHERE {   ?flight :Airline ?airline .   ?flight :ref-SourceAirport ?source .   ?flight :ref-DestAirport ?dest .   FILTER (?source = \"CVO\")   FILTER NOT EXISTS {     ?flight2 :Airline ?airline .     ?flight2 :ref-SourceAirport ?source2 .     ?flight2 :ref-DestAirport ?dest2 .     FILTER (?source2 = \"APG\")   } }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which airlines have departures from CVO but not from APG airports?",
        "prompt": " Translate the following question into SPARQL: Which airlines have departures from CVO but not from APG airports?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airline WHERE {   ?flight :Airline ?airline.   ?flight :ref-SourceAirport ?cvo.   FILTER NOT EXISTS {     ?flight2 :ref-SourceAirport ?apg.     FILTER (?apg = \"APG\")     FILTER (?flight = ?flight2)   }   FILTER (?cvo = \"CVO\") }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Find all airlines that have at least 10 flights.",
        "prompt": " Translate the following question into SPARQL: Find all airlines that have at least 10 flights.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?airline WHERE {   ?flight :Airline ?airline .   {     SELECT (COUNT(?flight) AS ?numFlights)     WHERE {       ?flight :Airline ?airline .     }     GROUP BY ?airline     HAVING(?numFlights >= 10)   } }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which airlines have at least 10 flights?",
        "prompt": " Translate the following question into SPARQL: Which airlines have at least 10 flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airline WHERE {     ?flight :Airline ?airline .     {         SELECT (COUNT(?flight) AS ?numFlights)          WHERE {             ?flight :Airline ?airline .         }     }     FILTER(?numFlights >= 10) } GROUP BY ?airline"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Find all airlines that have fewer than 200 flights.",
        "prompt": " Translate the following question into SPARQL: Find all airlines that have fewer than 200 flights.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?airline  WHERE {   ?airline :Airline ?name .   FILTER NOT EXISTS {     ?flight :Airline ?airline .     ?flight :FlightNo ?flightNo .   }   FILTER (?name != \"\")   FILTER EXISTS {     ?airport :ref-SourceAirport ?flight .     ?airport :AirportCode ?airportCode .   } } GROUP BY ?airline  HAVING (COUNT(?flightNo) < 200)"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which airlines have less than 200 flights?",
        "prompt": " Translate the following question into SPARQL: Which airlines have less than 200 flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airline  WHERE {   ?airline a :airlines .   {     SELECT (COUNT(?flight) AS ?numFlights)     WHERE {       ?flight a :flights .       ?flight :Airline ?airline .     }     GROUP BY ?airline   }   FILTER(?numFlights < 200) }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What are flight numbers of Airline 'United Airlines'?",
        "prompt": " Translate the following question into SPARQL: What are flight numbers of Airline 'United Airlines'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?flightNo WHERE {   ?flight :Airline \"United Airlines\" ;           :FlightNo ?flightNo . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which flight numbers correspond to United Airlines flights?",
        "prompt": " Translate the following question into SPARQL: Which flight numbers correspond to United Airlines flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?flightNumber WHERE {   ?flight a :flights .   ?flight :Airline \"United Airlines\" .   ?flight :FlightNo ?flightNumber . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What are flight numbers of flights departing from Airport 'APG'?",
        "prompt": " Translate the following question into SPARQL: What are flight numbers of flights departing from Airport 'APG'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?flightNo WHERE {   ?flight a :flights .   ?flight :flights#FlightNo ?flightNo .   ?flight :flights#ref-SourceAirport ?airport .   ?airport :airports#AirportCode \"APG\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Give the flight numbers of flights leaving from APG.",
        "prompt": " Translate the following question into SPARQL: Give the flight numbers of flights leaving from APG.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?flightNumber  WHERE {   ?flight :Airline ?airline ;           :SourceAirport ?sourceAirport .   FILTER (?sourceAirport = \"APG\")   BIND (?flight AS ?flightNumber) }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What are flight numbers of flights arriving at Airport 'APG'?",
        "prompt": " Translate the following question into SPARQL: What are flight numbers of flights arriving at Airport 'APG'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?flightNumber WHERE {   ?flight :flights#DestAirport :airports#APG .   ?flight :flights#FlightNo ?flightNumber . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Give the flight numbers of flights landing at APG.",
        "prompt": " Translate the following question into SPARQL: Give the flight numbers of flights landing at APG.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?flightNo WHERE {   ?flight :flights#DestAirport :airports#APG .   ?flight :flights#FlightNo ?flightNo . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What are flight numbers of flights departing from City 'Aberdeen '?",
        "prompt": " Translate the following question into SPARQL: What are flight numbers of flights departing from City 'Aberdeen '?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?flightNo WHERE {   ?flight :Airline ?airline ;           :FlightNo ?flightNo ;           :ref-SourceAirport ?sourceAirport .   ?sourceAirport :City \"Aberdeen\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Give the flight numbers of flights leaving from Aberdeen.",
        "prompt": " Translate the following question into SPARQL: Give the flight numbers of flights leaving from Aberdeen.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?flightNo WHERE {   ?flight a :flights ;           :FlightNo ?flightNo ;           :ref-SourceAirport ?source .   ?source :AirportCode \"ABZ\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "What are flight numbers of flights arriving at City 'Aberdeen'?",
        "prompt": " Translate the following question into SPARQL: What are flight numbers of flights arriving at City 'Aberdeen'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?flightNumber  WHERE {   ?flight a :flights .   ?flight :flights#ref-DestAirport ?dest .   ?dest :airports#City \"Aberdeen\" .   ?flight :flights#FlightNo ?flightNumber . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Give the flight numbers of flights arriving in Aberdeen.",
        "prompt": " Translate the following question into SPARQL: Give the flight numbers of flights arriving in Aberdeen.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?flightNumber  WHERE {   ?flight a :flights .   ?flight :flights#FlightNo ?flightNumber .   ?flight :flights#ref-DestAirport ?airport .   ?airport :airports#AirportName \"Aberdeen\" . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "prompt": " Translate the following question into SPARQL: Find the number of flights landing in the city of Aberdeen or Abilene.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(*) AS ?numberOfFlights) WHERE {   {      ?flight :Airline ?airline .     ?flight :FlightNo ?flightNo .     ?flight :ref-DestAirport ?destination .     ?destination :City \"Aberdeen\" .     ?flight :ref-SourceAirport ?source .     ?source :AirportCode ?sourceCode .   } UNION {      ?flight :Airline ?airline .     ?flight :FlightNo ?flightNo .     ?flight :ref-DestAirport ?destination .     ?destination :City \"Abiline\" .     ?flight :ref-SourceAirport ?source .     ?source :AirportCode ?sourceCode .   } }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "How many flights land in Aberdeen or Abilene?",
        "prompt": " Translate the following question into SPARQL: How many flights land in Aberdeen or Abilene?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?flight) AS ?numFlights) WHERE {   ?flight a :flights .   ?flight :flights#ref-DestAirport ?dest .   ?dest :airports#AirportCode ?destCode .   FILTER(?destCode IN (\"ABZ\", \"ABI\")) }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Find the name of airports which do not have any flight in and out.",
        "prompt": " Translate the following question into SPARQL: Find the name of airports which do not have any flight in and out.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?airportName WHERE {   ?airport a :airports .   FILTER NOT EXISTS {     ?flight a :flights ;             :ref-SourceAirport ?airport ;             :ref-DestAirport ?destAirport .   }   FILTER NOT EXISTS {     ?flight a :flights ;             :ref-DestAirport ?airport ;             :ref-SourceAirport ?sourceAirport .   }   ?airport :AirportName ?airportName . }"
    },
    {
        "db_id": "flight_2",
        "natural_language_question": "Which airports do not have departing or arriving flights?",
        "prompt": " Translate the following question into SPARQL: Which airports do not have departing or arriving flights?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['airlines', 'airports', 'flights'], 'object_properties': ['flights#ref-DestAirport', 'flights#ref-SourceAirport'], 'data_properties': ['airlines#Abbreviation', 'airlines#Airline', 'airlines#Country', 'airlines#uid', 'airports#AirportCode', 'airports#AirportName', 'airports#City', 'airports#Country', 'airports#CountryAbbrev', 'flights#Airline', 'flights#DestAirport', 'flights#FlightNo', 'flights#SourceAirport']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?airport WHERE {   ?airport a :airports .   FILTER NOT EXISTS {     ?flight a :flights ;             :ref-SourceAirport ?airport .   }   FILTER NOT EXISTS {     ?flight a :flights ;             :ref-DestAirport ?airport .   } }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "How many employees are there?",
        "prompt": " Translate the following question into SPARQL: How many employees are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "SELECT COUNT(?employee)  WHERE {?employee a :employee .}  PREFIX : <http://valuenet/ontop/>"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Count the number of employees",
        "prompt": " Translate the following question into SPARQL: Count the number of employees  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?employee) AS ?employeeCount) WHERE {   ?employee a :employee . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Sort employee names by their age in ascending order.",
        "prompt": " Translate the following question into SPARQL: Sort employee names by their age in ascending order.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?age WHERE {   ?employee a :employee;             :name ?name;             :age ?age. } ORDER BY ?age"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "List the names of employees and sort in ascending order of age.",
        "prompt": " Translate the following question into SPARQL: List the names of employees and sort in ascending order of age.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name ?age WHERE {   ?employee a :employee .   ?employee :employee_id ?id .   ?employee :name ?name .   ?employee :age ?age . } ORDER BY ASC(?age)"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "What is the number of employees from each city?",
        "prompt": " Translate the following question into SPARQL: What is the number of employees from each city?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX :<http://valuenet/ontop/> SELECT ?city (COUNT(?employee) AS ?numEmployees) WHERE {   ?employee :employee#city ?city . } GROUP BY ?city"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Count the number of employees for each city.",
        "prompt": " Translate the following question into SPARQL: Count the number of employees for each city.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?city (COUNT(?employee) AS ?num_employees) WHERE {   ?employee :city ?city . } GROUP BY ?city"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Which cities do more than one employee under age 30 come from?",
        "prompt": " Translate the following question into SPARQL: Which cities do more than one employee under age 30 come from?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?city WHERE {   ?e1 a :employee.   ?e1 :age ?age1.   ?e1 :city ?city.   ?e2 a :employee.   ?e2 :age ?age2.   ?e2 :city ?city.   FILTER(?age1 < 30 && ?age2 < 30 && ?e1 != ?e2) } GROUP BY ?city HAVING (COUNT(DISTINCT ?e1) > 1)"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Find the cities that have more than one employee under age 30.",
        "prompt": " Translate the following question into SPARQL: Find the cities that have more than one employee under age 30.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?city WHERE {   ?e :age ?age .   ?e :city ?city .   FILTER(?age < 30)   {     SELECT ?city (COUNT(?e) AS ?num)     WHERE {       ?e :age ?age .       ?e :city ?city .       ?h :ref-employee_id ?e .       ?h :is_full_time true .       ?h :start_from ?date .     }     GROUP BY ?city     HAVING (?num > 1)   } }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Find the number of shops in each location.",
        "prompt": " Translate the following question into SPARQL: Find the number of shops in each location.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?location (COUNT(?shop) as ?numShops) WHERE {   ?shop a :shop .   ?shop :location ?location . }  GROUP BY ?location"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "How many shops are there in each location?",
        "prompt": " Translate the following question into SPARQL: How many shops are there in each location?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?location (COUNT(?shop) AS ?numShops) WHERE {   ?shop a :shop .   ?shop :location ?location . } GROUP BY ?location"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Find the manager name and district of the shop whose number of products is the largest.",
        "prompt": " Translate the following question into SPARQL: Find the manager name and district of the shop whose number of products is the largest.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?manager_name ?district WHERE {   ?shop :number_products ?max_products .   {     SELECT (MAX(?products) AS ?max_products)     WHERE {       ?shop :number_products ?products .     }   }   ?shop :manager_name ?manager_name .   ?shop :district ?district . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "What are the manager name and district of the shop that sells the largest number of products?",
        "prompt": " Translate the following question into SPARQL: What are the manager name and district of the shop that sells the largest number of products?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?manager_name ?district WHERE {   ?s a :shop .   ?s :manager_name ?manager_name .   ?s :district ?district .   ?s :number_products ?largest_number .      {     SELECT (MAX(?number_products) as ?largest_number)     WHERE {       ?s a :shop .       ?s :number_products ?number_products .     }   } }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "find the minimum and maximum number of products of all stores.",
        "prompt": " Translate the following question into SPARQL: find the minimum and maximum number of products of all stores.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (MIN(?numProducts) AS ?minProducts) (MAX(?numProducts) AS ?maxProducts) WHERE {   ?store a :shop .   ?store :number_products ?numProducts . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "What are the minimum and maximum number of products across all the shops?",
        "prompt": " Translate the following question into SPARQL: What are the minimum and maximum number of products across all the shops?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (MIN(?num_products) AS ?minimum) (MAX(?num_products) AS ?maximum) WHERE {   ?s a :shop .   ?s :number_products ?num_products . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Return the name, location and district of all shops in descending order of number of products.",
        "prompt": " Translate the following question into SPARQL: Return the name, location and district of all shops in descending order of number of products.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?location ?district WHERE {   ?s a :shop ;      :name ?name ;      :number_products ?num ;      :location ?location ;      :district ?district . } ORDER BY DESC(?num)"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "prompt": " Translate the following question into SPARQL: Sort all the shops by number products in descending order, and return the name, location and district of each shop.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?location ?district WHERE {   ?shop a :shop .   ?shop :name ?name .   ?shop :location ?location .   ?shop :district ?district . } ORDER BY DESC(?number_products)"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Find the names of stores whose number products is more than the average number of products.",
        "prompt": " Translate the following question into SPARQL: Find the names of stores whose number products is more than the average number of products.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?storeName WHERE {     ?store :number_products ?numProducts .     {         SELECT (AVG(?prodCount) AS ?avgProducts)         WHERE {             ?s a :shop .             ?s :number_products ?prodCount .         }     }     FILTER(?numProducts > ?avgProducts) .     ?store :name ?storeName . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Which shops' number products is above the average? Give me the shop names.",
        "prompt": " Translate the following question into SPARQL: Which shops' number products is above the average? Give me the shop names.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?shopName  WHERE {   ?shop :shop#name ?shopName .   ?shop :shop#number_products ?numProducts .   {     SELECT AVG(?np) AS ?average     WHERE {       ?s :shop#number_products ?np .     }   }   FILTER (?numProducts > ?average) }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "find the name of employee who was awarded the most times in the evaluation.",
        "prompt": " Translate the following question into SPARQL: find the name of employee who was awarded the most times in the evaluation.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?e a :employee .   ?ev a :evaluation .   ?ev :evaluation#employee_id ?e .   ?e :employee#name ?name .      {     SELECT ?employeeId (COUNT(?employeeId) AS ?awards)     WHERE {       ?e a :employee .       ?ev a :evaluation .       ?ev :evaluation#employee_id ?e .       ?e :employee#employee_id ?employeeId .     }     GROUP BY ?employeeId     ORDER BY DESC(?awards)     LIMIT 1   }   ?e :employee#employee_id ?employeeId . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "prompt": " Translate the following question into SPARQL: Which employee received the most awards in evaluations? Give me the employee name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   ?e a :employee .   ?e :employee_id ?id .   ?ev a :evaluation .   ?ev :employee_id ?id .   ?ev :bonus ?max_bonus .   {     SELECT (MAX(?bonus) AS ?max_bonus)      WHERE {       ?e a :employee .       ?e :employee_id ?id .       ?ev a :evaluation .       ?ev :employee_id ?id .       ?ev :bonus ?bonus .     }     GROUP BY ?e   } .   ?e :name ?name }  LIMIT 1"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Find the name of the employee who got the highest one time bonus.",
        "prompt": " Translate the following question into SPARQL: Find the name of the employee who got the highest one time bonus.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?eval :evaluation#bonus ?maxBonus .   FILTER NOT EXISTS {     ?eval2 :evaluation#bonus ?higherBonus .     FILTER (?higherBonus > ?maxBonus)   }   ?eval :evaluation#employee_id ?id .   ?emp :employee#name ?name .   FILTER (?emp = ?id) }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Which employee received the biggest bonus? Give me the employee name.",
        "prompt": " Translate the following question into SPARQL: Which employee received the biggest bonus? Give me the employee name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?employee_name WHERE {   ?e :name ?employee_name .   ?e :evaluation ?eval .   ?eval :bonus ?max_bonus .   {     SELECT (MAX(?bonus) AS ?max_bonus)     WHERE {       ?e :evaluation ?eval .       ?eval :bonus ?bonus .     }   } }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Find the names of employees who never won any award in the evaluation.",
        "prompt": " Translate the following question into SPARQL: Find the names of employees who never won any award in the evaluation.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?employee a :employee .   ?employee :name ?name .   FILTER NOT EXISTS {     ?evaluation a :evaluation .     ?evaluation :ref-employee_id ?employee .   } }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "What are the names of the employees who never received any evaluation?",
        "prompt": " Translate the following question into SPARQL: What are the names of the employees who never received any evaluation?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?emp a :employee .   ?emp :name ?name .   FILTER NOT EXISTS {      ?eval a :evaluation .     ?eval :employee_id ?emp .   } }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "What is the name of the shop that is hiring the largest number of employees?",
        "prompt": " Translate the following question into SPARQL: What is the name of the shop that is hiring the largest number of employees?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?shop_name WHERE {   {     SELECT ?shop_id (COUNT(?employee) AS ?num_employees)     WHERE {       ?hiring a :hiring ;               :ref-shop_id ?shop_id ;               :employee_id ?employee .     }     GROUP BY ?shop_id     ORDER BY DESC(?num_employees)     LIMIT 1   }   ?shop a :shop ;         :shop_id ?shop_id ;         :name ?shop_name . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Which shop has the most employees? Give me the shop name.",
        "prompt": " Translate the following question into SPARQL: Which shop has the most employees? Give me the shop name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   ?shop a :shop.   ?hiring :ref-shop_id ?shop.   ?employee :employee_id ?empID.   ?hiring :ref-employee_id ?empID.   ?shop :name ?name. } GROUP BY ?shop ?name ORDER BY DESC(COUNT(?empID)) LIMIT 1."
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Find the name of the shops that do not hire any employee.",
        "prompt": " Translate the following question into SPARQL: Find the name of the shops that do not hire any employee.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?shopName  WHERE {   ?shop a :shop .   FILTER NOT EXISTS {     ?hiring a :hiring ;             :ref-shop_id ?shop ;             :employee ?emp .   }   ?shop :name ?shopName . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Which shops run with no employees? Find the shop names",
        "prompt": " Translate the following question into SPARQL: Which shops run with no employees? Find the shop names  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?shopName WHERE {   ?shop :shop#employee [].   FILTER NOT EXISTS { ?shop :hiring#is_full_time \"true\"^^xsd:boolean }   ?shop :shop#name ?shopName. }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Find the number of employees hired in each shop; show the shop name as well.",
        "prompt": " Translate the following question into SPARQL: Find the number of employees hired in each shop; show the shop name as well.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?shopName (COUNT(?employee) AS ?numEmployees) WHERE {   ?hiring :ref-shop_id ?shop .   ?shop :name ?shopName .   ?hiring :ref-employee_id ?employee . } GROUP BY ?shopName"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "For each shop, return the number of employees working there and the name of the shop.",
        "prompt": " Translate the following question into SPARQL: For each shop, return the number of employees working there and the name of the shop.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?shopName (COUNT(?employee) AS ?numEmployees) WHERE {   ?employee :hiring#ref-shop_id ?shop .   ?shop :shop#name ?shopName . } GROUP BY ?shopName"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "What is total bonus given in all evaluations?",
        "prompt": " Translate the following question into SPARQL: What is total bonus given in all evaluations?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT SUM(?bonus) as ?total_bonus WHERE {   ?eval a :evaluation .   ?eval :evaluation#bonus ?bonus . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Find the total amount of bonus given in all the evaluations.",
        "prompt": " Translate the following question into SPARQL: Find the total amount of bonus given in all the evaluations.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (SUM(?bonus) AS ?totalBonus) WHERE {   ?evaluation :evaluation#bonus ?bonus . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Give me all the information about hiring.",
        "prompt": " Translate the following question into SPARQL: Give me all the information about hiring.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "SELECT *  WHERE {   ?hiring a :hiring .   ?hiring ?p1 ?o1 .   ?hiring :ref-employee_id ?employee .   ?employee ?p2 ?o2 . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "What is all the information about hiring?",
        "prompt": " Translate the following question into SPARQL: What is all the information about hiring?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "SELECT * WHERE {   ?x a :hiring .   ?x ?p ?o . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "prompt": " Translate the following question into SPARQL: Which district has both stores with less than 3000 products and stores with more than 10000 products?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?district   WHERE {   ?s1 a :shop.   ?s1 :number_products ?n1. FILTER(?n1 < 3000).   ?s2 a :shop.   ?s2 :number_products ?n2. FILTER(?n2 > 10000).   ?s1 :district ?district.   ?s2 :district ?district. }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "prompt": " Translate the following question into SPARQL: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?district  WHERE {   ?shop :number_products ?np .    ?shop :district ?district .   FILTER (?np < 3000)      ?shop2 :number_products ?np2 .    ?shop2 :district ?district .   FILTER (?np2 > 10000) }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "How many different store locations are there?",
        "prompt": " Translate the following question into SPARQL: How many different store locations are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?store) AS ?count) WHERE {   ?store a :shop . }"
    },
    {
        "db_id": "employee_hire_evaluation",
        "natural_language_question": "Count the number of distinct store locations.",
        "prompt": " Translate the following question into SPARQL: Count the number of distinct store locations.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['employee', 'evaluation', 'hiring', 'shop'], 'object_properties': ['evaluation#ref-employee_id', 'hiring#ref-employee_id', 'hiring#ref-shop_id'], 'data_properties': ['employee#age', 'employee#city', 'employee#employee_id', 'employee#name', 'evaluation#bonus', 'evaluation#employee_id', 'evaluation#year_awarded', 'hiring#employee_id', 'hiring#is_full_time', 'hiring#shop_id', 'hiring#start_from', 'shop#district', 'shop#location', 'shop#manager_name', 'shop#name', 'shop#number_products', 'shop#shop_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(DISTINCT ?location) WHERE {   ?store a :shop ;          :location ?location . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "How many documents do we have?",
        "prompt": " Translate the following question into SPARQL: How many documents do we have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>   SELECT COUNT(?document)  WHERE {   ?document rdf:type :documents }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Count the number of documents.",
        "prompt": " Translate the following question into SPARQL: Count the number of documents.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?document) as ?docCount) WHERE {   ?document a :documents . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "List document IDs, document names, and document descriptions for all documents.",
        "prompt": " Translate the following question into SPARQL: List document IDs, document names, and document descriptions for all documents.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "SELECT ?id ?name ?description WHERE {   ?doc :document_id ?id.   ?doc :document_name ?name.   ?doc :document_description ?description.   FILTER(?doc rdf:type :documents) }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the ids, names, and descriptions for all documents?",
        "prompt": " Translate the following question into SPARQL: What are the ids, names, and descriptions for all documents?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?name ?description WHERE {   ?doc a :documents .   ?doc :document_id ?id .   ?doc :document_name ?name .   ?doc :document_description ?description . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "prompt": " Translate the following question into SPARQL: What is the document name and template id for document with description with the letter 'w' in it?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?documentName ?templateId WHERE {   ?document a :documents .   ?document :document_description ?description .   ?document :document_name ?documentName .   ?document :template_id ?templateId .   FILTER(REGEX(?description, \"w\")). }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the names and template ids for documents that contain the letter w in their description.",
        "prompt": " Translate the following question into SPARQL: Return the names and template ids for documents that contain the letter w in their description.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?template_id WHERE {   ?document a :documents ;             :document_description ?description ;             :template_id ?template_id ;             :document_name ?name .   FILTER regex(?description, \"w\") }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What is the document id, template id and description for document named 'Robbin CV'?",
        "prompt": " Translate the following question into SPARQL: What is the document id, template id and description for document named 'Robbin CV'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?doc_id ?temp_id ?description WHERE {   ?doc a :documents .   ?doc :document_name \"Robbin CV\" .   ?doc :document_id ?doc_id .   ?doc :template_id ?temp_id .   ?doc :document_description ?description . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "prompt": " Translate the following question into SPARQL: Return the document id, template id, and description for the document with the name Robbin CV.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?doc_id ?temp_id ?description WHERE {   ?doc :document_name \"Robbin CV\" .   ?doc :document_id ?doc_id .   ?doc :template_id ?temp_id .   ?doc :document_description ?description . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "How many different templates do all document use?",
        "prompt": " Translate the following question into SPARQL: How many different templates do all document use?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?template) as ?numTemplates) WHERE {   ?doc :template_id ?template .   ?template :template_type_code ?type . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Count the number of different templates used for documents.",
        "prompt": " Translate the following question into SPARQL: Count the number of different templates used for documents.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?template_type_code) AS ?template_count) WHERE {   ?doc :template_id ?template_id .   ?template :template_id ?template_id .   ?template :template_type_code ?template_type_code. }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "How many documents are using the template with type code 'PPT'?",
        "prompt": " Translate the following question into SPARQL: Count the number of different templates used for documents.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?template_type_code) AS ?template_count) WHERE {   ?doc :template_id ?template_id .   ?template :template_id ?template_id .   ?template :template_type_code ?template_type_code. }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Count the number of documents that use the PPT template type.",
        "prompt": " Translate the following question into SPARQL: Count the number of documents that use the PPT template type.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "SELECT COUNT(?doc) WHERE {   ?doc :template_id ?template .   ?template :template_type_code \"PPT\" . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all template ids and number of documents using each template.",
        "prompt": " Translate the following question into SPARQL: Show all template ids and number of documents using each template.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_id (COUNT(?document) AS ?num_of_docs) WHERE {   ?doc :ref-template_id ?template_id .   ?doc a :documents .   ?template a :templates . } GROUP BY ?template_id"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are all different template ids used for documents, and how many times were each of them used?",
        "prompt": " Translate the following question into SPARQL: What are all different template ids used for documents, and how many times were each of them used?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_id (COUNT(?document) AS ?document_count) WHERE {   ?document a :documents .   ?document :template_id ?template_id .   ?template a :templates .   ?template :template_id ?template_id . } GROUP BY ?template_id"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What is the id and type code for the template used by the most documents?",
        "prompt": " Translate the following question into SPARQL: What is the id and type code for the template used by the most documents?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_id ?template_type_code WHERE {   SELECT ?template_id    WHERE {     SELECT (COUNT(?d) as ?count) ?template_id     WHERE {       ?d :template_id ?template_id .     }      GROUP BY ?template_id     ORDER BY DESC(?count)     LIMIT 1   }   ?template :template_id ?template_id ;             :template_type_code ?template_type_code . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "prompt": " Translate the following question into SPARQL: Return the id and type code of the template that is used for the greatest number of documents.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_id ?template_type_code WHERE {   (?template_id, :template_type_code, ?template_type_code) .   {     SELECT ?template_id (COUNT(?doc_id) AS ?count)      WHERE {       ?doc_id :ref-template_id ?template_id .     }     GROUP BY ?template_id     ORDER BY DESC(?count)     LIMIT 1   } }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show ids for all templates that are used by more than one document.",
        "prompt": " Translate the following question into SPARQL: Return the id and type code of the template that is used for the greatest number of documents.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_id ?template_type_code WHERE {   (?template_id, :template_type_code, ?template_type_code) .   {     SELECT ?template_id (COUNT(?doc_id) AS ?count)      WHERE {       ?doc_id :ref-template_id ?template_id .     }     GROUP BY ?template_id     ORDER BY DESC(?count)     LIMIT 1   } }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the template ids of any templates used in more than a single document?",
        "prompt": " Translate the following question into SPARQL: What are the template ids of any templates used in more than a single document?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?template_id WHERE {   ?doc :ref-template_id ?template_id.   ?doc2 :ref-template_id ?template_id.   FILTER (?doc != ?doc2) }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show ids for all templates not used by any document.",
        "prompt": " Translate the following question into SPARQL: Show ids for all templates not used by any document.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?template_id WHERE{    ?t a :templates .   FILTER NOT EXISTS {?d a :documents ; :ref-template_id ?t}   FILTER NOT EXISTS {?p a :paragraphs ; :ref-document_id ?d} }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the ids for templates that are not used in any documents?",
        "prompt": " Translate the following question into SPARQL: What are the ids for templates that are not used in any documents?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?id WHERE {   ?temp a :templates .   FILTER NOT EXISTS {     ?doc a :documents .     ?doc :template_id ?temp.   }   ?temp :template_id ?id. }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "How many templates do we have?",
        "prompt": " Translate the following question into SPARQL: How many templates do we have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?template) AS ?numTemplates) WHERE {   ?template a :templates . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Count the number of templates.",
        "prompt": " Translate the following question into SPARQL: Count the number of templates.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?template) AS ?num_templates) WHERE {   ?template a :templates. }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show template ids, version numbers, and template type codes for all templates.",
        "prompt": " Translate the following question into SPARQL: Show template ids, version numbers, and template type codes for all templates.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_id ?version_number ?template_type_code WHERE {   ?template a :templates .   ?template :template_id ?template_id .   ?template :version_number ?version_number .   ?template :template_type_code ?template_type_code . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the ids, version numbers, and type codes for each template?",
        "prompt": " Translate the following question into SPARQL: What are the ids, version numbers, and type codes for each template?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_id ?version_number ?template_type_code WHERE {   ?template a :templates .   ?template :template_id ?template_id .   ?template :version_number ?version_number .   ?template :template_type_code ?template_type_code . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all distinct template type codes for all templates.",
        "prompt": " Translate the following question into SPARQL: Show all distinct template type codes for all templates.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?type_code  WHERE {     ?template a :templates .     ?template :template_type_code ?type_code . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the different template type codes?",
        "prompt": " Translate the following question into SPARQL: What are the different template type codes?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?code  WHERE {    ?template a :templates .    ?template :template_type_code ?code .  }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the ids of templates with template type code PP or PPT?",
        "prompt": " Translate the following question into SPARQL: What are the ids of templates with template type code PP or PPT?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?template_id WHERE {     ?template a :templates .     ?template :template_type_code ?code .     FILTER(?code = \"PP\" || ?code = \"PPT\")     ?template :template_id ?template_id . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the ids of templates that have the code PP or PPT.",
        "prompt": " Translate the following question into SPARQL: Return the ids of templates that have the code PP or PPT.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_id WHERE {     ?template a :templates .     ?template :template_type_code ?code .     FILTER (?code = \"PP\" || ?code = \"PPT\").     ?template :template_id ?template_id . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "How many templates have template type code CV?",
        "prompt": " Translate the following question into SPARQL: How many templates have template type code CV?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?template) as ?countTemplates) WHERE {   ?template a :templates .   ?template :template_type_code \"CV\" . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Count the number of templates of the type CV.",
        "prompt": " Translate the following question into SPARQL: Count the number of templates of the type CV.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX: <http://valuenet/ontop/>  SELECT (COUNT(*) as ?count) WHERE { \t?template a :templates . \t?template :ref-template_type_code \"CV\" . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What is the version number and template type code for the template with version number later than 5?",
        "prompt": " Translate the following question into SPARQL: What is the version number and template type code for the template with version number later than 5?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?versionNumber ?templateTypeCode  WHERE {   ?t :version_number ?versionNumber .   ?t :template_type_code ?templateTypeCode .   FILTER(?versionNumber > 5) }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "prompt": " Translate the following question into SPARQL: Return the version numbers and template type codes of templates with a version number greater than 5.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?version_number ?template_type_code WHERE {   ?t a :templates ;      :version_number ?version_number ;      :template_type_code ?template_type_code .   FILTER (?version_number > 5) }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all template type codes and number of templates for each.",
        "prompt": " Translate the following question into SPARQL: Show all template type codes and number of templates for each.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_type_code (COUNT(?template) as ?num_templates) WHERE {   ?template a :templates ;             :template_type_code ?template_type_code .  } GROUP BY ?template_type_code"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the different template type codes, and how many templates correspond to each?",
        "prompt": " Translate the following question into SPARQL: What are the different template type codes, and how many templates correspond to each?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?templateTypeCode COUNT(?template) as ?numOfTemplates WHERE {   ?template a :templates .   ?template :ref-template_type_code ?templateTypeCode . } GROUP BY ?templateTypeCode"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Which template type code has most number of templates?",
        "prompt": " Translate the following question into SPARQL: Which template type code has most number of templates?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (MAX(?count) AS ?maxCount) ?templateTypeCode WHERE {   {     SELECT (COUNT(*) AS ?count) ?templateTypeCode     WHERE {       ?template a :templates ;                 :template_type_code ?templateTypeCode .     }     GROUP BY ?templateTypeCode   } } LIMIT 1"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the type code of the template type that the most templates belong to.",
        "prompt": " Translate the following question into SPARQL: Return the type code of the template type that the most templates belong to.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?type_code WHERE {   {     SELECT (MAX(?count) AS ?maxcount) WHERE {       ?t a :templates .       ?t :ref-template_type_code ?type_code .       {         SELECT (COUNT(?t) AS ?count) WHERE {           ?t a :templates .           ?t :ref-template_type_code ?type_code .         } GROUP BY ?type_code       }     }   }   ?t a :templates .   ?t :ref-template_type_code ?type_code .   {     SELECT ?type (COUNT(?t) AS ?typecount) WHERE {       ?t a :templates .       ?t :ref-template_type_code ?type .     } GROUP BY ?type   }   FILTER(?typecount = ?maxcount) } LIMIT 1"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all template type codes with less than three templates.",
        "prompt": " Translate the following question into SPARQL: Show all template type codes with less than three templates.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?type_code (COUNT(?template) as ?template_count) WHERE {   ?template :ref-template_type_code ?type_code .   {     SELECT ?type_code2 (COUNT(?template2) as ?template_count2)     WHERE {       ?template2 :ref-template_type_code ?type_code2 .     }     GROUP BY ?type_code2     HAVING (COUNT(?template_count2) < 3)   } } GROUP BY ?type_code HAVING (COUNT(?template_count) < 3)"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the codes of template types that have fewer than 3 templates?",
        "prompt": " Translate the following question into SPARQL: What are the codes of template types that have fewer than 3 templates?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?code WHERE {   {     SELECT ?template_type (COUNT(?template) AS ?count)     WHERE {       ?template a :templates .       ?template :template_type_code ?template_type .     }      GROUP BY ?template_type     HAVING (?count < 3)   }   ?template_type a :ref_template_types .   ?template_type :template_type_code ?code . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What the smallest version number and its template type code?",
        "prompt": " Translate the following question into SPARQL: What the smallest version number and its template type code?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX: <http://valuenet/ontop/> SELECT MIN(?version) AS ?smallestVersionNumber ?typeCode WHERE {    ?template a :templates ;             :version_number ?version ;             :template_type_code ?typeCode . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the lowest version number, along with its corresponding template type code.",
        "prompt": " Translate the following question into SPARQL: Return the lowest version number, along with its corresponding template type code.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?version_number ?template_type_code WHERE {   ?template a :templates .   ?template :version_number ?version_number .   ?template :template_type_code ?template_type_code .   FILTER NOT EXISTS {     ?higher_version_template a :templates .     ?higher_version_template :template_type_code ?template_type_code .     ?higher_version_template :version_number ?higher_version_number .     FILTER (?higher_version_number < ?version_number)   } }  ORDER BY ?version_number  LIMIT 1."
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What is the template type code of the template used by document with the name 'Data base'?",
        "prompt": " Translate the following question into SPARQL: What is the template type code of the template used by document with the name 'Data base'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_type_code  WHERE {   ?doc a :documents ;        :document_name \"Data base\" ;        :template_id ?template_id .   ?template a :templates ;             :template_id ?template_id ;             :template_type_code ?template_type_code . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the template type code of the template that is used by a document named Data base.",
        "prompt": " Translate the following question into SPARQL: Return the template type code of the template that is used by a document named Data base.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "SELECT ?typeCode WHERE {   ?doc :document_name \"Data base\" .   ?doc :template_id ?templateID .   ?template :template_id ?templateID .   ?template :template_type_code ?typeCode . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all document names using templates with template type code BK.",
        "prompt": " Translate the following question into SPARQL: Show all document names using templates with template type code BK.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?docName WHERE {   ?doc a :documents .   ?doc :template_id ?template .   ?template :template_type_code \"BK\" .   ?doc :document_name ?docName . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the names of documents that use templates with the code BK?",
        "prompt": " Translate the following question into SPARQL: What are the names of documents that use templates with the code BK?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?documentName  WHERE {   ?document a :documents .   ?document :template_id ?template .   ?template :template_type_code \"BK\" .   ?document :document_name ?documentName . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all template type codes and the number of documents using each type.",
        "prompt": " Translate the following question into SPARQL: Show all template type codes and the number of documents using each type.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?template_type_code (COUNT(?doc) AS ?number_of_documents) WHERE {   ?doc :ref-template_id ?template .   ?template :ref-template_type_code ?template_type_code . } GROUP BY ?template_type_code"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the different template type codes, and how many documents use each type?",
        "prompt": " Translate the following question into SPARQL: What are the different template type codes, and how many documents use each type?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?typeCode (COUNT(?doc) AS ?numDocs) WHERE {   ?template a :templates .   ?template :template_type_code ?typeCode .   ?doc a :documents .   ?doc :ref-template_id ?template . } GROUP BY ?typeCode"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Which template type code is used by most number of documents?",
        "prompt": " Translate the following question into SPARQL: Which template type code is used by most number of documents?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?doc) AS ?count) ?code WHERE{   ?doc :template_id ?template .   ?template :template_type_code ?code . } GROUP BY ?code ORDER BY DESC(?count) LIMIT 1"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the code of the template type that is most commonly used in documents.",
        "prompt": " Translate the following question into SPARQL: Return the code of the template type that is most commonly used in documents.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?templateTypeCode  WHERE {     {         SELECT ?code (COUNT(*) AS ?count)          WHERE {             ?doc :ref-template_id ?template .             ?template :template_type_code ?code .         } GROUP BY ?code      } ORDER BY DESC(?count) LIMIT 1 .     ?templateType :template_type_code ?templateTypeCode .     FILTER(?templateType = ?code)  }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all template type codes that are not used by any document.",
        "prompt": " Translate the following question into SPARQL: Show all template type codes that are not used by any document.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?typeCode WHERE {   ?template a :templates ;             :template_type_code ?typeCode .   FILTER NOT EXISTS {     ?document a :documents ;               :ref-template_id ?template .   } }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the codes of template types that are not used for any document?",
        "prompt": " Translate the following question into SPARQL: What are the codes of template types that are not used for any document?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?template_type_code  WHERE {   ?t a :templates .   MINUS {     ?t :ref-template_type_code ?template_type_code .     ?d a :documents .     ?d :ref-template_id ?t .   }   ?template_type a :ref_template_types .   ?template_type :template_type_code ?template_type_code . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all template type codes and descriptions.",
        "prompt": " Translate the following question into SPARQL: Show all template type codes and descriptions.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?type_code ?type_description WHERE {   ?type a :ref_template_types .   ?type :template_type_code ?type_code .   ?type :template_type_description ?type_description . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the type codes and descriptions for all template types?",
        "prompt": " Translate the following question into SPARQL: What are the type codes and descriptions for all template types?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?type_code ?type_description WHERE {   ?template a :templates .   ?template :template_type_code ?type_code .   ?type a :ref_template_types .   ?type :template_type_code ?type_code .   ?type :template_type_description ?type_description . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What is the template type descriptions for template type code 'AD'.",
        "prompt": " Translate the following question into SPARQL: What is the template type descriptions for template type code 'AD'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?description  WHERE {   ?type :template_type_code \"AD\" .   ?type :template_type_description ?description . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the template type description of the template type with the code AD.",
        "prompt": " Translate the following question into SPARQL: Return the template type description of the template type with the code AD.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?description WHERE {   ?templateType :template_type_code \"AD\" .   ?templateType :template_type_description ?description . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What is the template type code for template type description 'Book'.",
        "prompt": " Translate the following question into SPARQL: What is the template type code for template type description 'Book'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?code WHERE {   ?type a :ref_template_types ;         :template_type_description \"Book\" ;         :template_type_code ?code . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the type code of the template type with the description 'Book'.",
        "prompt": " Translate the following question into SPARQL: Return the type code of the template type with the description 'Book'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?type_code WHERE {   ?type a :ref_template_types .   ?type :template_type_description \"Book\" .   ?type :template_type_code ?type_code . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "prompt": " Translate the following question into SPARQL: What are the distinct template type descriptions for the templates ever used by any document?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?description WHERE {   ?doc :ref-template_id ?template .   ?template :template_type_code ?type .   ?type :template_type_description ?description . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the different descriptions for templates that have been used in a document.",
        "prompt": " Translate the following question into SPARQL: Return the different descriptions for templates that have been used in a document.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?templateDescription WHERE {   ?document :document_id ?docId .   ?paragraph :ref-document_id ?docId .   ?template :template_id ?tplId .   ?template :ref-template_type_code ?tplTypeCode .   ?tplType :template_type_code ?tplTypeCode .   ?tplType :template_type_description ?templateDescription . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the template ids with template type description 'Presentation'.",
        "prompt": " Translate the following question into SPARQL: What are the template ids with template type description 'Presentation'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?template_id WHERE {   ?template a :templates ;             :template_type_code \"Presentation\" ;             :template_id ?template_id . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "prompt": " Translate the following question into SPARQL: Return the ids corresponding to templates with the description 'Presentation'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id  WHERE {   ?template a :templates ;             :template_type_code ?code ;             :template_id ?id .    FILTER (?code = \"Presentation\") }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "How many paragraphs in total?",
        "prompt": " Translate the following question into SPARQL: How many paragraphs in total?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>   SELECT (COUNT(?paragraph) as ?totalParagraphs) WHERE {   ?paragraph a :paragraphs . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Count the number of paragraphs.",
        "prompt": " Translate the following question into SPARQL: Count the number of paragraphs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?paragraph) WHERE {     ?paragraph a :paragraphs . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "How many paragraphs for the document with name 'Summer Show'?",
        "prompt": " Translate the following question into SPARQL: How many paragraphs for the document with name 'Summer Show'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?paragraph) AS ?numParagraphs) WHERE {   ?document a :documents ;             :document_name \"Summer Show\" ;             :document_id ?docId .   ?paragraph a :paragraphs ;              :ref-document_id ?docId . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "prompt": " Translate the following question into SPARQL: Count the number of paragraphs in the document named 'Summer Show'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "SELECT COUNT(?p) AS ?numParagraphs WHERE {   ?document a :documents ;             :document_name \"Summer Show\" ;             :document_id ?docId .   ?p a :paragraphs ;      :ref-document_id ?docId . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show paragraph details for paragraph with text 'Korea ' .",
        "prompt": " Translate the following question into SPARQL: Show paragraph details for paragraph with text 'Korea ' .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "SELECT ?paragraph_id ?paragraph_text ?document_id ?other_details WHERE {   ?p a :paragraphs .   ?p :paragraph_text \"Korea\" .   ?p :paragraph_id ?paragraph_id .   ?p :ref-document_id ?document_id .   ?p :other_details ?other_details . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the details for the paragraph that includes the text 'Korea' ?",
        "prompt": " Translate the following question into SPARQL: What are the details for the paragraph that includes the text 'Korea' ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?details WHERE {   ?para :paragraph_text \"Korea\" .   ?para :other_details ?details . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "prompt": " Translate the following question into SPARQL: Show all paragraph ids and texts for the document with name 'Welcome to NY'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?paragraph_id ?paragraph_text WHERE {   ?doc a :documents .   ?doc :document_name \"Welcome to NY\" .   ?par a :paragraphs .   ?par :ref-document_id ?doc .   ?par :paragraph_id ?paragraph_id .   ?par :paragraph_text ?paragraph_text . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "prompt": " Translate the following question into SPARQL: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "SELECT ?id ?text  WHERE {   ?paragraph a :paragraphs ;              :paragraph_text ?text ;              :ref-document_id ?doc .   ?doc a :documents ;         :document_name 'Welcome to NY' ;         :document_id ?id . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all paragraph texts for the document 'Customer reviews'.",
        "prompt": " Translate the following question into SPARQL: Show all paragraph texts for the document 'Customer reviews'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?text WHERE {   ?doc a :documents ;     :document_name \"Customer reviews\" ;     :document_id ?doc_id .   ?para a :paragraphs ;     :ref-document_id ?doc_id ;     :paragraph_text ?text . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "prompt": " Translate the following question into SPARQL: What are the paragraph texts for the document with the name 'Customer reviews'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?paragraph_text  WHERE {   ?document a :documents .   ?document :document_name \"Customer reviews\" .   ?paragraph a :paragraphs .   ?paragraph :ref-document_id ?document .   ?paragraph :paragraph_text ?paragraph_text . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "prompt": " Translate the following question into SPARQL: Show all document ids and the number of paragraphs in each document. Order by document id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?docID (COUNT(?para) AS ?numParagraphs) WHERE {   ?doc :document_id ?docID .   ?para :ref-document_id ?docID . } GROUP BY ?docID ORDER BY ?docID"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "prompt": " Translate the following question into SPARQL: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?doc_id (COUNT(?paragraph) AS ?num_paragraphs) WHERE {   ?doc a :documents ;        :document_id ?doc_id .   ?paragraph a :paragraphs ;              :ref-document_id ?doc_id . } GROUP BY ?doc_id ORDER BY ?doc_id"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show all document ids, names and the number of paragraphs in each document.",
        "prompt": " Translate the following question into SPARQL: Show all document ids, names and the number of paragraphs in each document.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?docId ?docName (COUNT(?paragraph) AS ?numOfParagraphs) WHERE {   ?document a :documents ;             :document_id ?docId ;             :document_name ?docName .   ?paragraph a :paragraphs ;              :ref-document_id ?document . } GROUP BY ?docId ?docName"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "prompt": " Translate the following question into SPARQL: What are the ids and names of each document, as well as the number of paragraphs in each?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?document_id ?document_name (COUNT(?paragraph_id) as ?num_paragraphs) WHERE {   ?doc a :documents .   ?doc :document_id ?document_id ;        :document_name ?document_name .   ?par a :paragraphs ;        :ref-document_id ?doc ;        :paragraph_id ?paragraph_id . } GROUP BY ?document_id ?document_name"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "List all document ids with at least two paragraphs.",
        "prompt": " Translate the following question into SPARQL: List all document ids with at least two paragraphs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?document_id WHERE {   ?p1 :ref-document_id ?document_id .   ?p2 :ref-document_id ?document_id .   FILTER (?p1 != ?p2)  }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the ids of documents that have 2 or more paragraphs?",
        "prompt": " Translate the following question into SPARQL: What are the ids of documents that have 2 or more paragraphs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?docId WHERE {   ?doc :template_id ?tempId .   ?temp :template_id ?tempId .   ?temp :template_type_code ?code .   ?para :ref-document_id ?doc .   ?doc :document_id ?docId .   {     SELECT ?doc (COUNT(DISTINCT ?para) as ?count) WHERE {       ?doc :template_id ?tempId .       ?temp :template_id ?tempId .       ?temp :template_type_code ?code .       ?para :ref-document_id ?doc .     } GROUP BY ?doc HAVING (?count >= 2)   } }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What is the document id and name with greatest number of paragraphs?",
        "prompt": " Translate the following question into SPARQL: What is the document id and name with greatest number of paragraphs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?document_id ?document_name WHERE {   SELECT ?document_id (COUNT(?paragraph) AS ?count)   WHERE {     ?paragraph :ref-document_id ?document_id .   }   GROUP BY ?document_id   ORDER BY DESC(?count)   LIMIT 1   ?document :document_id ?document_id ;             :document_name ?document_name . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the id and name of the document with the most paragraphs.",
        "prompt": " Translate the following question into SPARQL: Return the id and name of the document with the most paragraphs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?name  WHERE {   SELECT ?id (COUNT(?p) as ?num_paragraphs)   WHERE {     ?d rdf:type :documents .     ?d :document_id ?id .     ?p rdf:type :paragraphs .     ?p :ref-document_id ?d .   }   GROUP BY ?d   ORDER BY DESC(?num_paragraphs)   LIMIT 1      ?d :document_name ?name . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What is the document id with least number of paragraphs?",
        "prompt": " Translate the following question into SPARQL: What is the document id with least number of paragraphs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?doc_id WHERE {    ?doc a :documents .    ?doc :document_id ?doc_id .    {       SELECT (COUNT(?para) AS ?numPara) ?doc_id       WHERE {          ?para a :paragraphs .          ?para :ref-document_id ?doc_id .       }       GROUP BY ?doc_id       ORDER BY ?numPara       LIMIT 1    } }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Return the id of the document with the fewest paragraphs.",
        "prompt": " Translate the following question into SPARQL: Return the id of the document with the fewest paragraphs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?doc_id WHERE {   ?doc a :documents .   ?doc :document_id ?doc_id .   {     SELECT (MIN(?num_paras) AS ?min_paras)      WHERE {       ?para a :paragraphs .       ?para :ref-document_id ?doc_id .       {         SELECT (COUNT(*) AS ?num_paras)          WHERE {           ?para a :paragraphs .           ?para :ref-document_id ?doc_id .         } GROUP BY ?doc_id       }     } GROUP BY ?doc_id   }   FILTER (?num_paras = ?min_paras) } LIMIT 1"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What is the document id with 1 to 2 paragraphs?",
        "prompt": " Translate the following question into SPARQL: What is the document id with 1 to 2 paragraphs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?doc_id WHERE {?doc a :documents.        ?doc :document_id ?doc_id.        ?par a :paragraphs.        ?par :ref-document_id ?doc_id.        {          SELECT ?doc_id (COUNT(?par) as ?count)          WHERE {?doc a :documents.                 ?doc :document_id ?doc_id.                 ?par a :paragraphs.                 ?par :ref-document_id ?doc_id.                 }           GROUP BY ?doc_id          HAVING (?count >= 1 && ?count <= 2)          } }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Give the ids of documents that have between one and two paragraphs.",
        "prompt": " Translate the following question into SPARQL: Give the ids of documents that have between one and two paragraphs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?doc_id WHERE {   ?doc :template_id ?template .   ?template :template_type_code ?code .   FILTER (?code = \"one-or-two-paragraphs\" )   ?doc :document_id ?doc_id .   {     SELECT ?doc_id (COUNT(?p) as ?count) WHERE {       ?p :ref-document_id ?doc .     } GROUP BY ?doc_id   }   FILTER (?count >= 1 && ?count <= 2) }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "prompt": " Translate the following question into SPARQL: Show the document id with paragraph text 'Brazil' and 'Ireland'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?docid  WHERE {   ?paragraph :paragraph_text \"Brazil\" .   ?paragraph :paragraph_text \"Ireland\" .   ?paragraph :ref-document_id ?docid . }"
    },
    {
        "db_id": "cre_doc_template_mgt",
        "natural_language_question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "prompt": " Translate the following question into SPARQL: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['documents', 'paragraphs', 'ref_template_types', 'templates'], 'object_properties': ['documents#ref-template_id', 'paragraphs#ref-document_id', 'templates#ref-template_type_code'], 'data_properties': ['documents#document_description', 'documents#document_id', 'documents#document_name', 'documents#other_details', 'documents#template_id', 'paragraphs#document_id', 'paragraphs#other_details', 'paragraphs#paragraph_id', 'paragraphs#paragraph_text', 'ref_template_types#template_type_code', 'ref_template_types#template_type_description', 'templates#date_effective_from', 'templates#date_effective_to', 'templates#template_details', 'templates#template_id', 'templates#template_type_code', 'templates#version_number']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?docId WHERE {   ?doc :document_description ?desc .   ?doc :document_id ?docId .   ?par :ref-document_id ?doc .   ?par :paragraph_text \"Brazil\" .   ?par2 :ref-document_id ?doc .   ?par2 :paragraph_text \"Ireland\" . }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "How many teachers are there?",
        "prompt": " Translate the following question into SPARQL: How many teachers are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?teacher) as ?num_teachers) WHERE {   ?teacher rdf:type :teacher . }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What is the total count of teachers?",
        "prompt": " Translate the following question into SPARQL: What is the total count of teachers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?teacher) AS ?countTeachers) WHERE {   ?teacher a :teacher . }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "List the names of teachers in ascending order of age.",
        "prompt": " Translate the following question into SPARQL: List the names of teachers in ascending order of age.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {    ?teacher a :teacher .    ?teacher :name ?name .    ?teacher :age ?age . } ORDER BY ASC(?age)"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What are the names of the teachers ordered by ascending age?",
        "prompt": " Translate the following question into SPARQL: What are the names of the teachers ordered by ascending age?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?teacher a :teacher .   ?teacher :name ?name .   ?teacher :age ?age . } ORDER BY ASC(?age)"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What are the age and hometown of teachers?",
        "prompt": " Translate the following question into SPARQL: What are the age and hometown of teachers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?age ?hometown WHERE {   ?teacher a :teacher .   ?teacher :age ?age .   ?teacher :hometown ?hometown . }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What is the age and hometown of every teacher?",
        "prompt": " Translate the following question into SPARQL: What is the age and hometown of every teacher?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?age ?hometown WHERE {   ?teacher a :teacher .   ?teacher :age ?age .   ?teacher :hometown ?hometown . }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "prompt": " Translate the following question into SPARQL: List the name of teachers whose hometown is not `` Little Lever Urban District '' .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {    ?teacher a :teacher ;             :name ?name ;             :hometown ?hometown .        FILTER (str(?hometown) != \"Little Lever Urban District\") }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "prompt": " Translate the following question into SPARQL: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?teacher_name  WHERE {   ?teacher a :teacher .   ?teacher :name ?teacher_name .   FILTER NOT EXISTS {     ?teacher :hometown \"Little Lever Urban District\" .   } }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "Show the name of teachers aged either 32 or 33?",
        "prompt": " Translate the following question into SPARQL: Show the name of teachers aged either 32 or 33?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name  WHERE {   ?teacher a :teacher .   ?teacher :name ?name .   ?teacher :age ?age .   FILTER (?age = 32 || ?age = 33) }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What are the names of the teachers who are aged either 32 or 33?",
        "prompt": " Translate the following question into SPARQL: What are the names of the teachers who are aged either 32 or 33?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?teacher :age ?age.   ?teacher :name ?name.   FILTER (?age = 32 || ?age = 33) }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What is the hometown of the youngest teacher?",
        "prompt": " Translate the following question into SPARQL: What is the hometown of the youngest teacher?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?hometown WHERE {   ?teacher a :teacher ;            :age ?age ;            :hometown ?hometown .   FILTER(?age = (SELECT MIN(?age2) WHERE {?teacher2 a :teacher ; :age ?age2 })) }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "Where is the youngest teacher from?",
        "prompt": " Translate the following question into SPARQL: Where is the youngest teacher from?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?hometown WHERE {   ?teacher a :teacher .   ?teacher :age ?age .   FILTER(?age = (SELECT MIN(?age2) WHERE {?teacher2 a :teacher . ?teacher2 :age ?age2})) .   ?teacher :hometown ?hometown . }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "prompt": " Translate the following question into SPARQL: Show different hometown of teachers and the number of teachers from each hometown.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?hometown (COUNT(?teacher) as ?count) WHERE {   ?teacher a :teacher .   ?teacher :hometown ?hometown . } GROUP BY ?hometown"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "For each hometown, how many teachers are there?",
        "prompt": " Translate the following question into SPARQL: For each hometown, how many teachers are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?hometown (COUNT(?teacher) AS ?num_teachers) WHERE {     ?teacher a :teacher .     ?teacher :hometown ?hometown . } GROUP BY ?hometown"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "List the most common hometown of teachers.",
        "prompt": " Translate the following question into SPARQL: List the most common hometown of teachers.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?hometown) as ?count) ?hometown WHERE {     ?teacher :hometown ?hometown . } GROUP BY ?hometown ORDER BY DESC(?count) LIMIT 1"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What is the most commmon hometowns for teachers?",
        "prompt": " Translate the following question into SPARQL: What is the most commmon hometowns for teachers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?hometown (COUNT(?teacher) AS ?count) WHERE {   ?teacher a :teacher .   ?teacher :hometown ?hometown . } GROUP BY ?hometown ORDER BY DESC(?count) LIMIT 1"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "Show the hometowns shared by at least two teachers.",
        "prompt": " Translate the following question into SPARQL: Show the hometowns shared by at least two teachers.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?hometown WHERE {   ?teacher1 a :teacher .   ?teacher2 a :teacher .   ?teacher1 :hometown ?hometown .   ?teacher2 :hometown ?hometown .      FILTER (?teacher1 != ?teacher2) }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What are the towns from which at least two teachers come from?",
        "prompt": " Translate the following question into SPARQL: What are the towns from which at least two teachers come from?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?town WHERE {   ?teacher :hometown ?town .   {     SELECT ?teacher (COUNT(?teacher) AS ?count) WHERE {       ?arrange :teacher_id ?teacher .       ?teacher :hometown ?town .     } GROUP BY ?teacher HAVING (?count >= 2)   } }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "Show names of teachers and the courses they are arranged to teach.",
        "prompt": " Translate the following question into SPARQL: Show names of teachers and the courses they are arranged to teach.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?teacherName ?courseName WHERE {   ?arrange :course_arrange#ref-course_id ?course .   ?arrange :course_arrange#ref-teacher_id ?teacher .   ?teacher :teacher#name ?teacherName .   ?course :course#course ?courseName . }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What is the name of each teacher and what course they teach?",
        "prompt": " Translate the following question into SPARQL: What is the name of each teacher and what course they teach?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?course  WHERE {    ?teacher a :teacher .    ?teacher :name ?name .    ?arrange a :course_arrange .    ?arrange :ref-teacher_id ?teacher .    ?arrange :ref-course_id ?course .  }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "prompt": " Translate the following question into SPARQL: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?teacherName ?courseName WHERE {   ?teacher :name ?teacherName .   ?courseArr :ref-teacher_id ?teacher .   ?courseArr :ref-course_id ?course .   ?course :course ?courseName . } ORDER BY ?teacherName ASC"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "prompt": " Translate the following question into SPARQL: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?teacherName ?courseName WHERE {   ?courseArrange :ref-course_id ?course .   ?courseArrange :ref-teacher_id ?teacher .   ?course :course ?courseName .   ?teacher :name ?teacherName . } ORDER BY ASC(?teacherName) ASC(?courseName)"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "Show the name of the teacher for the math course.",
        "prompt": " Translate the following question into SPARQL: Show the name of the teacher for the math course.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?teacherName WHERE {   ?courseArrangement :course_arrange#ref-course_id ?course .   ?courseArrangement :course_arrange#teacher_id ?teacher .   ?teacher :teacher#name ?teacherName .   FILTER (?course = :math_course) }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What are the names of the people who teach math courses?",
        "prompt": " Translate the following question into SPARQL: What are the names of the people who teach math courses?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   ?teacher :name ?name .   ?arrange :ref-course_id ?course .   ?arrange :ref-teacher_id ?teacher .   ?course :course \"math\" . }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "Show names of teachers and the number of courses they teach.",
        "prompt": " Translate the following question into SPARQL: Show names of teachers and the number of courses they teach.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?teacherName (COUNT(?course) as ?courseCount) WHERE {   ?courseArrange :course_arrange#ref-course_id ?course ;                   :course_arrange#ref-teacher_id ?teacher .   ?teacher :teacher#name ?teacherName . } GROUP BY ?teacherName"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What are the names of the teachers and how many courses do they teach?",
        "prompt": " Translate the following question into SPARQL: What are the names of the teachers and how many courses do they teach?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?teacherName (COUNT(?course) AS ?numCourses) WHERE {   ?teacher a :teacher .   ?teacher :name ?teacherName .   ?arrangement a :course_arrange .   ?arrangement :ref-teacher_id ?teacher .   ?arrangement :ref-course_id ?course . } GROUP BY ?teacherName"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "Show names of teachers that teach at least two courses.",
        "prompt": " Translate the following question into SPARQL: Show names of teachers that teach at least two courses.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?teacherName WHERE {   ?teacher :teacher#name ?teacherName .   {     SELECT (COUNT(DISTINCT ?course) AS ?numCourses) WHERE {       ?arrange :course_arrange#teacher_id ?teacher .       ?arrange :course_arrange#course_id ?course .     }   }   FILTER (?numCourses >= 2) . }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What are the names of the teachers who teach at least two courses?",
        "prompt": " Translate the following question into SPARQL: What are the names of the teachers who teach at least two courses?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?teacher a :teacher .   ?teacher :name ?name .   {     SELECT DISTINCT ?teacher WHERE {       ?arrange a :course_arrange .       ?arrange :ref-teacher_id ?teacher .       ?arrange :ref-course_id ?course1 .       {         SELECT ?teacher (COUNT(?course) as ?count) WHERE {           ?arrange2 a :course_arrange .           ?arrange2 :ref-teacher_id ?teacher .           ?arrange2 :ref-course_id ?course .         } GROUP BY ?teacher       }       FILTER(?count >= 2)     }   } }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "List the names of teachers who have not been arranged to teach courses.",
        "prompt": " Translate the following question into SPARQL: List the names of teachers who have not been arranged to teach courses.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?teacherName WHERE {     ?teacher a :teacher .     FILTER NOT EXISTS {         ?courseArrange a :course_arrange .         ?courseArrange :ref-teacher_id ?teacher .         ?course a :course .         ?courseArrange :ref-course_id ?course .     }     ?teacher :name ?teacherName . }"
    },
    {
        "db_id": "course_teach",
        "natural_language_question": "What are the names of the teachers whose courses have not been arranged?",
        "prompt": " Translate the following question into SPARQL: What are the names of the teachers whose courses have not been arranged?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['course', 'course_arrange', 'teacher'], 'object_properties': ['course_arrange#ref-course_id', 'course_arrange#ref-teacher_id'], 'data_properties': ['course#course', 'course#course_id', 'course#staring_date', 'course_arrange#course_id', 'course_arrange#grade', 'course_arrange#teacher_id', 'teacher#age', 'teacher#hometown', 'teacher#name', 'teacher#teacher_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {    ?teacher :name ?name .    FILTER NOT EXISTS {      ?courseArrange :ref-teacher_id ?teacher .      ?course :course_id ?courseId .      ?courseArrange :ref-course_id ?courseId .      ?courseArrange :grade ?grade .    }  }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "How many visitors below age 30 are there?",
        "prompt": " Translate the following question into SPARQL: How many visitors below age 30 are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?visitor) AS ?count) WHERE {   ?visitor a :visitor .   ?visit a :visit .   ?visit :ref-visitor_id ?visitor .   ?visitor :age ?age .   FILTER (?age < 30) }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "prompt": " Translate the following question into SPARQL: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   ?visitor :level_of_membership ?level .   FILTER(?level > 4) .   ?visitor :name ?name . } ORDER BY DESC(?level)"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "prompt": " Translate the following question into SPARQL: What is the average age of the visitors whose membership level is not higher than 4?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?age) as ?averageAge WHERE {   ?visitor :age ?age .   ?visitor :level_of_membership ?membershipLevel .   FILTER(?membershipLevel <= 4) .   ?visit :ref-visitor_id ?visitor . }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "prompt": " Translate the following question into SPARQL: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?level_of_membership FROM :visitor WHERE {   ?visitor :name ?name ;            :level_of_membership ?level_of_membership ;            :age ?age .    FILTER (?level_of_membership > 4) } ORDER BY DESC(?age)"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "Find the id and name of the museum that has the most staff members?",
        "prompt": " Translate the following question into SPARQL: Find the id and name of the museum that has the most staff members?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?id ?name WHERE {   ?museum a :museum .   ?museum :museum_id ?id .   ?museum :name ?name .   ?museum :num_of_staff ?num_staff .   {SELECT (MAX(?num_staff) as ?max_staff)    WHERE {?museum :num_of_staff ?num_staff}    }   FILTER(?num_staff = ?max_staff)  }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "Find the average number of staff working for the museums that were open before 2009.",
        "prompt": " Translate the following question into SPARQL: Find the average number of staff working for the museums that were open before 2009.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX :<http://valuenet/ontop/> SELECT AVG(?num_of_staff) AS ?average_staff WHERE {   ?museum a :museum .   FILTER (?museum.:open_year < 2009)   ?museum :num_of_staff ?num_of_staff }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "prompt": " Translate the following question into SPARQL: What are the opening year and staff number of the museum named Plaza Museum?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?open_year ?num_of_staff WHERE {   ?museum a :museum .   ?museum :name \"Plaza Museum\" .   ?museum :open_year ?open_year .   ?museum :num_of_staff ?num_of_staff . }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "prompt": " Translate the following question into SPARQL: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?museum a :museum .   ?museum :name ?name .   ?museum :num_of_staff ?num_of_staff .   FILTER (?num_of_staff > (SELECT MIN(?min_staff) WHERE {?m a :museum . ?m :open_year ?year . FILTER (?year > 2010) . ?m :num_of_staff ?min_staff })) }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "find the id, name and age for visitors who visited some museums more than once.",
        "prompt": " Translate the following question into SPARQL: find the id, name and age for visitors who visited some museums more than once.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?name ?age WHERE {   ?visitor a :visitor .   ?visit a :visit .   ?museum a :museum .   ?visit :ref-visitor_id ?visitor .   ?visit :ref-museum_id ?museum .   ?visitor :id ?id .   ?visitor :name ?name .   ?visitor :age ?age .     {     SELECT ?visitor      WHERE {       ?visitor a :visitor .       ?visit a :visit .       ?visit :ref-visitor_id ?visitor .       ?visit :ref-museum_id ?museum .        {         SELECT ?visitor (COUNT(?museum) AS ?count)         WHERE {           ?visitor a :visitor .           ?visit a :visit .           ?visit :ref-visitor_id ?visitor .           ?visit :ref-museum_id ?museum .          }          GROUP BY ?visitor          HAVING (?count > 1)       }     }   } }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "prompt": " Translate the following question into SPARQL: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?visitor_id ?name ?level_of_membership WHERE {   {     SELECT ?visitor_id (SUM(?total_spent) AS ?total)     WHERE {       ?visit :visit#ref-visitor_id ?visitor_id .       ?visit :visit#total_spent ?total_spent .       ?museum :museum#museum_id ?museum_id .       ?visit :visit#ref-museum_id ?museum_id .     }     GROUP BY ?visitor_id     ORDER BY DESC(?total)     LIMIT 1   }   ?visitor :visitor#id ?visitor_id .   ?visitor :visitor#name ?name .   ?visitor :visitor#level_of_membership ?level_of_membership . }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "What are the id and name of the museum visited most times?",
        "prompt": " Translate the following question into SPARQL: What are the id and name of the museum visited most times?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?museum_id ?name  WHERE {   {     SELECT ?museum_id (COUNT(*) AS ?num_visits)     WHERE {       ?visit :visit#museum_id ?museum_id .     }     GROUP BY ?museum_id     ORDER BY DESC(?num_visits)     LIMIT 1   }   ?museum :museum#museum_id ?museum_id ;           :museum#name ?name . }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "What is the name of the museum that had no visitor yet?",
        "prompt": " Translate the following question into SPARQL: What is the name of the museum that had no visitor yet?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?museumName WHERE {   ?museum a :museum .   FILTER NOT EXISTS {     ?visit a :visit ;           :ref-museum_id ?museum ;           :num_of_ticket ?tickets .     FILTER (?tickets > 0)   }   ?museum :name ?museumName . }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "Find the name and age of the visitor who bought the most tickets at once.",
        "prompt": " Translate the following question into SPARQL: Find the name and age of the visitor who bought the most tickets at once.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?age WHERE {   ?visitor :name ?name ;            :age ?age ;            :id ?visitor_id .   ?visit :ref-visitor_id ?visitor_id ;          :num_of_ticket ?max_num_of_tickets .   {     SELECT (MAX(?num_of_tickets) as ?max_num_of_tickets)     WHERE {       ?visit :num_of_ticket ?num_of_tickets .     }   } }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "What are the average and maximum number of tickets bought in all visits?",
        "prompt": " Translate the following question into SPARQL: What are the average and maximum number of tickets bought in all visits?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (AVG(?num_of_ticket) AS ?average_tickets) (MAX(?num_of_ticket) AS ?max_tickets) WHERE {   ?visit :num_of_ticket ?num_of_ticket . }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "prompt": " Translate the following question into SPARQL: What is the total ticket expense of the visitors whose membership level is 1?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (SUM(?total_spent) AS ?total_ticket_expense) WHERE {   ?visitor a :visitor .   ?visitor :level_of_membership \"1\" .   ?visit a :visit .   ?visit :ref-visitor_id ?visitor .   ?visit :total_spent ?total_spent . }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "prompt": " Translate the following question into SPARQL: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX :<http://valuenet/ontop/> SELECT DISTINCT ?visitorName WHERE {   ?visitor :id ?visitorId .   ?visitor :name ?visitorName .   ?visit :ref-visitor_id ?visitorId .   ?visit1 :ref-visitor_id ?visitorId .   ?visit :ref-museum_id ?museumId .   ?visit1 :ref-museum_id ?museumId1 .   ?museum :museum_id ?museumId .   ?museum1 :museum_id ?museumId1 .   ?museum :open_year ?year .   ?museum1 :open_year ?year1 .   FILTER(year < 2009)   FILTER(year1 > 2011) }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "prompt": " Translate the following question into SPARQL: Find the number of visitors who did not visit any museum opened after 2010.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?visitor) AS ?Number_of_Visitors_Not_Visiting_New_Museums WHERE  {   ?visitor a :visitor .   FILTER NOT EXISTS    {     ?visit a :visit .     ?visit :ref-visitor_id ?visitor .     ?visit :ref-museum_id ?museum .     ?museum a :museum .     ?museum :open_year ?year .     FILTER (?year > 2010)   } }"
    },
    {
        "db_id": "museum_visit",
        "natural_language_question": "How many museums were opened after 2013 or before 2008?",
        "prompt": " Translate the following question into SPARQL: How many museums were opened after 2013 or before 2008?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['museum', 'visit', 'visitor'], 'object_properties': ['visit#ref-museum_id', 'visit#ref-visitor_id'], 'data_properties': ['museum#museum_id', 'museum#name', 'museum#num_of_staff', 'museum#open_year', 'visit#museum_id', 'visit#num_of_ticket', 'visit#total_spent', 'visit#visitor_id', 'visitor#age', 'visitor#id', 'visitor#level_of_membership', 'visitor#name']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(?museum) WHERE {     ?museum :open_year ?year .     FILTER(?year > 2013 || ?year < 2008)     ?museum a :museum . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the total number of players.",
        "prompt": " Translate the following question into SPARQL: Find the total number of players.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?player) AS ?totalPlayers) WHERE {   ?player a :players . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "How many players are there?",
        "prompt": " Translate the following question into SPARQL: How many players are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?player) WHERE {   ?player a :players . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the total number of matches.",
        "prompt": " Translate the following question into SPARQL: Find the total number of matches.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?match) AS ?totalMatches) WHERE {   ?match a :matches . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Count the number of matches.",
        "prompt": " Translate the following question into SPARQL: Count the number of matches.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?matches) WHERE {   ?matches a :matches . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "List the first name and birth date of all players from the country with code USA.",
        "prompt": " Translate the following question into SPARQL: List the first name and birth date of all players from the country with code USA.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?first_name ?birth_date WHERE {   ?player :first_name ?first_name ;   \t   :birth_date ?birth_date ;        :country_code \"USA\" . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the first names and birth dates of players from the USA?",
        "prompt": " Translate the following question into SPARQL: What are the first names and birth dates of players from the USA?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX: <http://valuenet/ontop/>  SELECT ?first_name ?birth_date WHERE {    ?player a :players .    ?player :first_name ?first_name .    ?player :birth_date ?birth_date .    ?player :country_code \"USA\" . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the average age of losers and winners of all matches.",
        "prompt": " Translate the following question into SPARQL: Find the average age of losers and winners of all matches.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?age) WHERE{   ?match a :matches.   ?match :ref-winner_id ?winID.   ?match :ref-loser_id ?loseID.   ?win a :players.   ?lose a :players.   ?win :player_id ?winID.   ?lose :player_id ?loseID.   ?win :birth_date ?winAge.   ?lose :birth_date ?loseAge.   BIND(year(now())-year(?winAge) as ?ageWin)   BIND(year(now())-year(?loseAge) as ?ageLose)   BIND(?ageWin as ?age)   BIND(?ageLose as ?age) }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the average ages of losers and winners across matches?",
        "prompt": " Translate the following question into SPARQL: What are the average ages of losers and winners across matches?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?loserAge) AS ?avgLoserAge, AVG(?winnerAge) AS ?avgWinnerAge WHERE {   ?match a :matches .   ?match :loser_age ?loserAge .   ?match :winner_age ?winnerAge . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the average rank of winners in all matches.",
        "prompt": " Translate the following question into SPARQL: Find the average rank of winners in all matches.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?rank) as ?averageRank WHERE {   ?match a :matches .   ?match :ref-winner_id ?winner .   ?rank a :rankings .   ?rank :ref-player_id ?winner . } "
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What is the average rank for winners in all matches?",
        "prompt": " Translate the following question into SPARQL: What is the average rank for winners in all matches?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?ranking) WHERE {   ?match a :matches .   ?match :ref-winner_id ?winner .   ?winner :player_id ?winner_id .   ?rank a :rankings .   ?rank :ref-player_id ?winner .   ?rank :ranking ?ranking . } "
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the highest rank of losers in all matches.",
        "prompt": " Translate the following question into SPARQL: Find the highest rank of losers in all matches.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT MAX(?loser_rank)  WHERE {    ?match a :matches .    ?match :loser_rank ?loser_rank . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What is the best rank of losers across all matches?",
        "prompt": " Translate the following question into SPARQL: What is the best rank of losers across all matches?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MAX(?rank) WHERE {     ?match :ref-loser_id ?loser .     ?loser :player_id ?loser_id .     ?loser :last_name ?loser_last .     ?ranking :ref-player_id ?loser_id .     ?ranking :ranking ?rank . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "find the number of distinct country codes of all players.",
        "prompt": " Translate the following question into SPARQL: find the number of distinct country codes of all players.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?country_code) AS ?count) WHERE {   ?player :country_code ?country_code . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "How many distinct countries do players come from?",
        "prompt": " Translate the following question into SPARQL: How many distinct countries do players come from?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?country) AS ?countries) WHERE {   ?player :country_code ?country . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the number of distinct name of losers.",
        "prompt": " Translate the following question into SPARQL: Find the number of distinct name of losers.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(DISTINCT ?loser_name) WHERE {   ?match :ref-loser_id ?loser_id .   ?loser :player_id ?loser_id .   ?loser :last_name ?loser_last .   ?loser :first_name ?loser_first .   BIND(concat(?loser_last, \", \", ?loser_first) AS ?loser_name) . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "How many different loser names are there?",
        "prompt": " Translate the following question into SPARQL: How many different loser names are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?loser_name) AS ?num_losers) WHERE {   ?match :ref-loser_id ?loser_id .   ?loser_id :loser_name ?loser_name . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the name of tourney that has more than 10 matches.",
        "prompt": " Translate the following question into SPARQL: Find the name of tourney that has more than 10 matches.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?tourney_name  WHERE {   ?match a :matches .   ?match :tourney_name ?tourney_name .   FILTER(count(?match) > 10) }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the names of tournaments that have more than 10 matches?",
        "prompt": " Translate the following question into SPARQL: What are the names of tournaments that have more than 10 matches?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?tournamentName WHERE {     ?tournament :draw_size ?drawSize .     FILTER (?drawSize > 10)     ?tournament :tourney_name ?tournamentName . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "List the names of all winners who played in both 2013 and 2016.",
        "prompt": " Translate the following question into SPARQL: List the names of all winners who played in both 2013 and 2016.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?match a :matches ;          :winner_id ?winner_id ;          :year \"2013\" .   ?match2 a :matches ;           :winner_id ?winner_id ;           :year \"2016\" .   ?player a :players ;           :player_id ?winner_id ;           :first_name ?firstname ;           :last_name ?lastname .   BIND(CONCAT(?firstname, \" \", ?lastname) AS ?name) }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the names of players who won in both 2013 and 2016?",
        "prompt": " Translate the following question into SPARQL: What are the names of players who won in both 2013 and 2016?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?name WHERE {   ?match1 :winner_id ?player .   ?match2 :winner_id ?player .   ?player :first_name ?first_name ;           :last_name ?last_name .   FILTER(?match1 != ?match2 &&          ?match1 :year \"2013\"^^xsd:int &&          ?match2 :year \"2016\"^^xsd:int )   BIND(CONCAT(?first_name, \" \", ?last_name) AS ?name) }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "List the number of all matches who played in years of 2013 or 2016.",
        "prompt": " Translate the following question into SPARQL: List the number of all matches who played in years of 2013 or 2016.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(*) AS ?num_matches)  WHERE {   ?match a :matches .   ?match :year ?year .   FILTER (?year = 2013 || ?year = 2016) }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "How many matches were played in 2013 or 2016?",
        "prompt": " Translate the following question into SPARQL: How many matches were played in 2013 or 2016?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?matches) as ?numberOfMatches) WHERE {     ?matches a :matches .     {?matches :year \"2013\"} UNION {?matches :year \"2016\"} }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "prompt": " Translate the following question into SPARQL: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country_code ?first_name WHERE {   ?match1 :tourney_name \"WTA Championships\" .   ?match1 :winner_id ?player .   ?match2 :tourney_name \"Australian Open\" .   ?match2 :winner_id ?player .   ?player :country_code ?country_code .   ?player :first_name ?first_name . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "prompt": " Translate the following question into SPARQL: What are the first names and country codes for players who won both the WTA Championships and the Australian Open?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?first_name ?country_code WHERE {     ?player :first_name ?first_name ;             :player_id ?id ;             :country_code ?country_code .      ?match :winner_id ?id ;            :tourney_level \"F\" ;            :tourney_name \"WTA Championships\" ;            :tourney_date ?date1 ;            :score ?score1 .     ?match2 :winner_id ?id ;            :tourney_level \"G\" ;            :tourney_name \"Australian Open\" ;            :tourney_date ?date2 ;            :score ?score2 .      FILTER (?date1 = ?date2)     FILTER(regex(?score1, \"^[^ ]+[0-9]+ [^ ]+ [^ ]+[0-9]+$\"))     FILTER(regex(?score2, \"^[^ ]+[0-9]+ [^ ]+ [^ ]+[0-9]+$\")) }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the first name and country code of the oldest player.",
        "prompt": " Translate the following question into SPARQL: Find the first name and country code of the oldest player.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName ?countryCode WHERE {   ?player a :players ;           :first_name ?firstName ;           :country_code ?countryCode ;           :birth_date ?birthDate .   FILTER NOT EXISTS {?player :loser_age ?loserAge}   FILTER NOT EXISTS {?player :winner_age ?winnerAge}   FILTER (?birthDate = (SELECT MIN(?age) WHERE {     {?player :loser_age ?age} UNION {?player :winner_age ?age}   })) } LIMIT 1"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What is the first name and country code of the oldest player?",
        "prompt": " Translate the following question into SPARQL: What is the first name and country code of the oldest player?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName ?countryCode WHERE {   ?player a :players ;           :first_name ?firstName ;           :country_code ?countryCode ;           :birth_date ?birthDate .   ?match a :matches ;          :winner_id ?player ;          :winner_age ?age .   FILTER (?age = (SELECT MIN(?age1)                   WHERE {?match1 a :matches ;                           :winner_id ?player ;                          :winner_age ?age1 .})) } LIMIT 1"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "List the first and last name of all players in the order of birth date.",
        "prompt": " Translate the following question into SPARQL: List the first and last name of all players in the order of birth date.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName ?lastName WHERE {   ?player :first_name ?firstName ;           :last_name ?lastName ;           :birth_date ?birthDate . } ORDER BY ASC(?birthDate)"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the full names of all players, sorted by birth date?",
        "prompt": " Translate the following question into SPARQL: What are the full names of all players, sorted by birth date?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?fullName WHERE {   ?player :players#first_name ?firstName ;           :players#last_name ?lastName ;           :players#birth_date ?birthDate .   BIND(CONCAT(?firstName, \" \", ?lastName) as ?fullName) } ORDER BY ASC(?birthDate)"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "prompt": " Translate the following question into SPARQL: List the first and last name of all players who are left / L hand in the order of birth date.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?firstName ?lastName  WHERE {    ?player :hand \"L\" .    ?player :first_name ?firstName .    ?player :last_name ?lastName . } ORDER BY ASC(?birthDate)"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the full names of all left handed players, in order of birth date?",
        "prompt": " Translate the following question into SPARQL: What are the full names of all left handed players, in order of birth date?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?fullname WHERE {   ?player a :players ;           :hand \"L\" ;           :birth_date ?birthdate ;           :first_name ?firstname ;           :last_name ?lastname .   BIND(CONCAT(?firstname, \" \", ?lastname) as ?fullname) } ORDER BY ?birthdate"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the first name and country code of the player who did the most number of tours.",
        "prompt": " Translate the following question into SPARQL: Find the first name and country code of the player who did the most number of tours.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName ?countryCode  WHERE {     {         SELECT (COUNT(?match) as ?numTours) ?player         WHERE {             ?match a :matches .             ?match :ref-winner_id ?player .         }         GROUP BY ?player         ORDER BY DESC(?numTours)         LIMIT 1     }     ?player :first_name ?firstName .     ?player :country_code ?countryCode . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What is the first name and country code of the player with the most tours?",
        "prompt": " Translate the following question into SPARQL: What is the first name and country code of the player with the most tours?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName ?countryCode WHERE {   {     SELECT ?playerId (COUNT(?match) as ?numTours)     WHERE {       ?match :ref-winner_id ?playerId .     } GROUP BY ?playerId     ORDER BY DESC(?numTours)     LIMIT 1   }   ?player :player_id ?playerId ;           :first_name ?firstName ;           :country_code ?countryCode . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the year that has the most number of matches.",
        "prompt": " Translate the following question into SPARQL: Find the year that has the most number of matches.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?year WHERE {     ?match :year ?year . } GROUP BY ?year HAVING (COUNT(?match) > ALL(SELECT COUNT(?match2)                           WHERE {?match2 :year ?year2}                           GROUP BY ?year2)) ."
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Which year had the most matches?",
        "prompt": " Translate the following question into SPARQL: Which year had the most matches?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?year (COUNT(?match) AS ?numMatches) WHERE {   ?match a :matches ;          :year ?year . } GROUP BY ?year ORDER BY DESC(?numMatches) LIMIT 1"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the name and rank points of the winner who won the most times.",
        "prompt": " Translate the following question into SPARQL: Find the name and rank points of the winner who won the most times.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?points WHERE {   {     SELECT ?winner_id (COUNT(?winner_id) AS ?wins)     WHERE {       ?match :ref-winner_id ?winner_id .       FILTER NOT EXISTS {         ?match2 :ref-winner_id ?winner_id2 .         FILTER (?match != ?match2)         FILTER (?winner_id = ?winner_id2)       }     }     GROUP BY ?winner_id     ORDER BY DESC(?wins)     LIMIT 1   }    ?player :player_id ?winner_id .   ?player :first_name ?first_name .   ?player :last_name ?last_name .   BIND(CONCAT(?first_name, \" \", ?last_name) AS ?name)    ?rank :ref-player_id ?winner_id .   ?rank :ranking_points ?points .   ?rank :ranking_date ?date .   FILTER NOT EXISTS {     ?rank2 :ref-player_id ?winner_id2 .     FILTER (?rank != ?rank2)     FILTER (?date < ?rank2)   } } LIMIT 1"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "prompt": " Translate the following question into SPARQL: What is the name of the winner who has won the most matches, and how many rank points does this player have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?winner_name ?rank_points WHERE {   ?match :ref-winner_id ?winner .   ?winner :player_id ?winner_id .   ?player_rank :ref-player_id ?winner_id .   ?player_rank :ranking_points ?rank_points .   {SELECT ?winner (COUNT(?match) AS ?matches_won)     WHERE {      ?match :ref-winner_id ?winner .    } GROUP BY ?winner ORDER BY DESC(?matches_won) LIMIT 1}   ?winner :last_name ?winner_name . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "prompt": " Translate the following question into SPARQL: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?winnerName  WHERE {   ?match a :matches .   ?match :ref-winner_id ?winner .   ?winner :player_id ?winnerID .   ?winner :first_name ?winnerFirstName .   ?winner :last_name ?winnerLastName .   ?match :tourney_name \"Australian Open\" .   ?ranking a :rankings .   ?ranking :ref-player_id ?winnerID .   ?ranking :ranking_points ?winnerRankPoints .   {     SELECT (MAX(?points) AS ?maxPoints)     WHERE {       ?ranking a :rankings .       ?ranking :ref-player_id ?winnerID .       ?ranking :ranking_points ?points .     }   }   FILTER(?winnerRankPoints = ?maxPoints)   BIND(concat(?winnerFirstName,\" \",?winnerLastName) AS ?winnerName) } LIMIT 1"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "prompt": " Translate the following question into SPARQL: What is the name of the winner with the most rank points who participated in the Australian Open tournament?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?match a :matches ;          :tourney_name \"Australian Open\";          :winner_id ?player ;          :winner_rank_points ?points.   ?player :player_id ?id.   ?ranking a :rankings ;            :player_id ?id ;            :ranking_points ?p.   FILTER(?points = MAX(?points) && ?p = ?points)   ?player :first_name ?fname ;            :last_name ?lname .   BIND(CONCAT(?fname, \" \", ?lname) as ?name). }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "prompt": " Translate the following question into SPARQL: find the names of loser and winner who played in the match with greatest number of minutes.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?loserName ?winnerName WHERE {   ?match :minutes ?maxMinutes .   FILTER (?maxMinutes = (SELECT (MAX(?m) as ?max) WHERE {?match :minutes ?m}))   ?match :ref-loser_id ?loser .   ?loser :last_name ?loserName .   ?match :ref-winner_id ?winner .   ?winner :last_name ?winnerName . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the names of the winner and loser who played in the longest match?",
        "prompt": " Translate the following question into SPARQL: What are the names of the winner and loser who played in the longest match?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?winnerName ?loserName WHERE {     ?match a :matches .     ?match :ref-winner_id ?winner .     ?winner :player_id ?winnerID .     ?winner :last_name ?winnerName .     ?match :ref-loser_id ?loser .     ?loser :player_id ?loserID .     ?loser :last_name ?loserName .     ?match :score ?score .     FILTER(regex(?score, \"7-6(\\\\d){2,4}\")) } LIMIT 1"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the average ranking for each player and their first name.",
        "prompt": " Translate the following question into SPARQL: Find the average ranking for each player and their first name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name (AVG(?ranking) AS ?average_ranking) WHERE {   ?player a :players ;           :first_name ?first_name ;           :player_id ?player_id .   ?ranking a :rankings ;            :player_id ?player_id ;            :ranking ?ranking . } GROUP BY ?first_name"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the first names of all players, and their average rankings?",
        "prompt": " Translate the following question into SPARQL: What are the first names of all players, and their average rankings?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName (AVG(?ranking) as ?averageRanking) WHERE {   ?p a :players .   ?p :first_name ?firstName .   ?r a :rankings .   ?r :ref-player_id ?p .   ?r :ranking ?ranking . } GROUP BY ?firstName"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the total ranking points for each player and their first name.",
        "prompt": " Translate the following question into SPARQL: Find the total ranking points for each player and their first name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX: <http://valuenet/ontop/>  SELECT ?firstName (SUM(?rankingPoints) AS ?totalRankingPoints) WHERE {     ?player a :players.     ?player :first_name ?firstName.     ?ranking a :rankings.     ?ranking :ref-player_id ?player.     ?ranking :ranking_points ?rankingPoints. }  GROUP BY ?firstName"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the first names of all players, and their total ranking points?",
        "prompt": " Translate the following question into SPARQL: What are the first names of all players, and their total ranking points?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName (SUM(?rankingPoints) AS ?totalRankingPoints) WHERE {   ?player :first_name ?firstName .   ?player :player_id ?playerID .   ?ranking :player_id ?playerID .   ?ranking :ranking_points ?rankingPoints . } GROUP BY ?firstName"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "find the number of players for each country.",
        "prompt": " Translate the following question into SPARQL: find the number of players for each country.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country (COUNT(DISTINCT ?player) AS ?numOfPlayers) WHERE {     ?player :country_code ?country . } GROUP BY ?country"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "How many players are from each country?",
        "prompt": " Translate the following question into SPARQL: How many players are from each country?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?country (COUNT(?player) as ?count) WHERE {   ?player :country_code ?country . } GROUP BY ?country"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "find the code of the country where has the greatest number of players.",
        "prompt": " Translate the following question into SPARQL: find the code of the country where has the greatest number of players.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country_code  WHERE {     SELECT ?country_code (count(?player_id) as ?num_players)     WHERE {         ?player_id a :players .         ?player_id :country_code ?country_code .     }     GROUP BY ?country_code     ORDER BY DESC(?num_players)     LIMIT 1 }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What is the code of the country with the most players?",
        "prompt": " Translate the following question into SPARQL: What is the code of the country with the most players?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?code WHERE {   {     SELECT (COUNT(?player_country) AS ?count) ?player_country     WHERE {       ?player a :players .       ?player :country_code ?player_country .     }      GROUP BY ?player_country      ORDER BY DESC(?count)      LIMIT 1   }      ?country_code a :players .   ?country_code :country_code ?code . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the codes of countries that have more than 50 players.",
        "prompt": " Translate the following question into SPARQL: Find the codes of countries that have more than 50 players.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?country_code WHERE {     ?player :country_code ?country_code .     {         SELECT (COUNT(?player) as ?count)         WHERE {             ?player a :players .         }         GROUP BY ?country_code         HAVING (?count > 50)     } }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the codes of countries with more than 50 players?",
        "prompt": " Translate the following question into SPARQL: What are the codes of countries with more than 50 players?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?country_code WHERE {     ?player :country_code ?country_code .     {         SELECT (COUNT(?player) AS ?count) WHERE {             ?player a :players .             ?match a :matches .             {?match :ref-loser_id ?player} UNION {?match :ref-winner_id ?player} .             FILTER (?count > 50) .         }     } }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the total number of tours for each ranking date.",
        "prompt": " Translate the following question into SPARQL: Find the total number of tours for each ranking date.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?ranking_date (COUNT(?tour) as ?num_tours)  WHERE {   ?tour :tourney_date ?ranking_date . } GROUP BY ?ranking_date"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "How many total tours were there for each ranking date?",
        "prompt": " Translate the following question into SPARQL: How many total tours were there for each ranking date?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?ranking_date (SUM(?tours) AS ?total_tours) WHERE {   ?ranking :ranking_date ?ranking_date .   ?match :tourney_date ?tourney_date .   ?match :tourney_id ?tourney_id .   ?ranking :ranking ?player_rank .    ?match :winner_id ?player_id .   ?match :loser_id ?opponent_id .   ?opponent_ranking :player_id ?opponent_id .   ?opponent_ranking :ranking_date ?ranking_date .   ?opponent_ranking :ranking ?opponent_rank .   BIND(IF(?player_rank < ?opponent_rank, 1, 0) AS ?won) .   BIND(IF(?tourney_date <= ?ranking_date, 1, 0) AS ?counted) .   BIND(IF(BOUND(?tours_all), MIN(?tours_all), 0) AS ?tours) .   FILTER(?won = 1 && ?counted = 1) }  GROUP BY ?ranking_date"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the number of matches happened in each year.",
        "prompt": " Translate the following question into SPARQL: Find the number of matches happened in each year.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?year (COUNT(?match) as ?matches) WHERE {   ?match :year ?year . } GROUP BY ?year"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "How many matches were played in each year?",
        "prompt": " Translate the following question into SPARQL: How many matches were played in each year?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?year (COUNT(?match) AS ?numMatches) WHERE {   ?match a :matches ;          :year ?year . } GROUP BY ?year"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the name and rank of the 3 youngest winners across all matches.",
        "prompt": " Translate the following question into SPARQL: Find the name and rank of the 3 youngest winners across all matches.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name ?rank WHERE {   ?match :winner_age ?age .   ?match :ref-winner_id ?player .   ?player :player_id ?id .   ?player :first_name ?name .   ?player :last_name ?surname .   ?ranking :player_id ?id .   ?ranking :ranking ?rank .   FILTER NOT EXISTS {     ?match2 :winner_age ?age2 .     FILTER(?age2 < ?age)   } } ORDER BY ASC(?age) LIMIT 3"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What are the names and ranks of the three youngest winners across all matches?",
        "prompt": " Translate the following question into SPARQL: What are the names and ranks of the three youngest winners across all matches?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name ?rank  WHERE {   SELECT ?name ?rank    WHERE {     ?player :player_id ?id .     ?player :last_name ?name .     ?match :ref-winner_id ?id .     ?match :winner_age ?age .     ?rank :ref-player_id ?id .     ?rank :ranking ?rank .     FILTER (?age > 0)   }   ORDER BY DESC (?age) LIMIT 3 }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "How many different winners both participated in the WTA Championships and were left handed?",
        "prompt": " Translate the following question into SPARQL: How many different winners both participated in the WTA Championships and were left handed?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?winner) as ?count) WHERE {   ?match a :matches ;          :winner_id ?winner ;          :winner_hand \"left\" ;          :tourney_level \"Championships\" . }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the number of left handed winners who participated in the WTA Championships.",
        "prompt": " Translate the following question into SPARQL: Find the number of left handed winners who participated in the WTA Championships.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?winner) AS ?num_winners) WHERE {  ?match a :matches;         :ref-winner_id ?winner;         :winner_hand \"L\";         :tourney_name \"WTA Championships\". }"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "prompt": " Translate the following question into SPARQL: Find the first name, country code and birth date of the winner who has the highest rank points in all matches.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name ?country_code ?birth_date WHERE {   ?player :first_name ?first_name ;           :country_code ?country_code ;           :birth_date ?birth_date ;           :player_id ?player_id .    ?ranking :ref-player_id ?player_id ;            :ranking_points ?points .    ?match :ref-winner_id ?player_id ;          :winner_rank_points ?match_points .    FILTER(?match_points = ?points)  } ORDER BY ASC(?birth_date) LIMIT 1"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "prompt": " Translate the following question into SPARQL: What is the first name, country code, and birth date of the player with the most winner rank points across all matches?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name ?country_code ?birth_date  WHERE {   {     SELECT ?player_id (MAX(?ranking_points) AS ?max_points)      WHERE {       ?ranking :ranking_points ?ranking_points ;                :player_id ?player_id .     }     GROUP BY ?player_id   }      ?player :player_id ?player_id ;           :first_name ?first_name ;           :country_code ?country_code ;           :birth_date ?birth_date .      ?matches :ref-winner_id ?player_id ;            :winner_rank_points ?max_points . } LIMIT 1"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "Find the number of players for each hand type.",
        "prompt": " Translate the following question into SPARQL: Find the number of players for each hand type.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?handType (COUNT(?player) AS ?numPlayers) WHERE {   ?player :hand ?handType . } GROUP BY ?handType"
    },
    {
        "db_id": "wta_1",
        "natural_language_question": "How many players are there for each hand type?",
        "prompt": " Translate the following question into SPARQL: How many players are there for each hand type?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['http://semanticweb.org/spider_wta_1/matches', 'http://semanticweb.org/spider_wta_1/players', 'http://semanticweb.org/spider_wta_1/rankings'], 'object_properties': ['http://semanticweb.org/spider_wta_1/matches#ref-loser_id', 'http://semanticweb.org/spider_wta_1/matches#ref-winner_id', 'http://semanticweb.org/spider_wta_1/rankings#ref-player_id'], 'data_properties': ['http://semanticweb.org/spider_wta_1/matches#best_of', 'http://semanticweb.org/spider_wta_1/matches#draw_size', 'http://semanticweb.org/spider_wta_1/matches#loser_age', 'http://semanticweb.org/spider_wta_1/matches#loser_entry', 'http://semanticweb.org/spider_wta_1/matches#loser_hand', 'http://semanticweb.org/spider_wta_1/matches#loser_ht', 'http://semanticweb.org/spider_wta_1/matches#loser_id', 'http://semanticweb.org/spider_wta_1/matches#loser_ioc', 'http://semanticweb.org/spider_wta_1/matches#loser_name', 'http://semanticweb.org/spider_wta_1/matches#loser_rank', 'http://semanticweb.org/spider_wta_1/matches#loser_rank_points', 'http://semanticweb.org/spider_wta_1/matches#loser_seed', 'http://semanticweb.org/spider_wta_1/matches#match_num', 'http://semanticweb.org/spider_wta_1/matches#minutes', 'http://semanticweb.org/spider_wta_1/matches#round', 'http://semanticweb.org/spider_wta_1/matches#score', 'http://semanticweb.org/spider_wta_1/matches#surface', 'http://semanticweb.org/spider_wta_1/matches#tourney_date', 'http://semanticweb.org/spider_wta_1/matches#tourney_id', 'http://semanticweb.org/spider_wta_1/matches#tourney_level', 'http://semanticweb.org/spider_wta_1/matches#tourney_name', 'http://semanticweb.org/spider_wta_1/matches#winner_age', 'http://semanticweb.org/spider_wta_1/matches#winner_entry', 'http://semanticweb.org/spider_wta_1/matches#winner_hand', 'http://semanticweb.org/spider_wta_1/matches#winner_ht', 'http://semanticweb.org/spider_wta_1/matches#winner_id', 'http://semanticweb.org/spider_wta_1/matches#winner_ioc', 'http://semanticweb.org/spider_wta_1/matches#winner_name', 'http://semanticweb.org/spider_wta_1/matches#winner_rank', 'http://semanticweb.org/spider_wta_1/matches#winner_rank_points', 'http://semanticweb.org/spider_wta_1/matches#winner_seed', 'http://semanticweb.org/spider_wta_1/matches#year', 'http://semanticweb.org/spider_wta_1/players#birth_date', 'http://semanticweb.org/spider_wta_1/players#country_code', 'http://semanticweb.org/spider_wta_1/players#first_name', 'http://semanticweb.org/spider_wta_1/players#hand', 'http://semanticweb.org/spider_wta_1/players#last_name', 'http://semanticweb.org/spider_wta_1/players#player_id', 'http://semanticweb.org/spider_wta_1/rankings#player_id', 'http://semanticweb.org/spider_wta_1/rankings#ranking', 'http://semanticweb.org/spider_wta_1/rankings#ranking_date', 'http://semanticweb.org/spider_wta_1/rankings#ranking_points', 'http://semanticweb.org/spider_wta_1/rankings#tours']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?handType (COUNT(?player) AS ?numberOfPlayers) WHERE {   ?player :hand ?handType . } GROUP BY ?handType"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "How many ships ended up being 'Captured'?",
        "prompt": " Translate the following question into SPARQL: How many ships ended up being 'Captured'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?ship) AS ?CapturedShips) WHERE {   ?ship :ref-lost_in_battle \"Captured\" .   ?ship a :ship . }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "prompt": " Translate the following question into SPARQL: List the name and tonnage ordered by in descending alphaetical order for the names.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?tonnage WHERE {?ship a :ship .        ?ship :name ?name .        ?ship :tonnage ?tonnage . } ORDER BY DESC(?name)"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "List the name, date and result of each battle.",
        "prompt": " Translate the following question into SPARQL: List the name, date and result of each battle.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "SELECT ?name ?date ?result  WHERE {   ?battle a :battle .   ?battle :name ?name .   ?battle :date ?date .   ?battle :result ?result . }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "What is maximum and minimum death toll caused each time?",
        "prompt": " Translate the following question into SPARQL: What is maximum and minimum death toll caused each time?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MAX(?killed) AS ?maximum_death_toll, MIN(?killed) AS ?minimum_death_toll  WHERE{    ?battle :result ?result.    ?death :caused_by_ship_id ?shipid.    ?death :killed ?killed.    FILTER(?result = \"defeat\"). }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "What is the average number of injuries caused each time?",
        "prompt": " Translate the following question into SPARQL: What is the average number of injuries caused each time?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (AVG(?inc) AS ?avg_injuries) WHERE {   ?b a :battle .   ?b :result ?res .   ?d a :death .   ?d :injured ?inc .   ?d :caused_by_ship_id ?s .   ?s :ref-lost_in_battle ?b .   FILTER (?res = \"defeat\") }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "prompt": " Translate the following question into SPARQL: What are the death and injury situations caused by the ship with tonnage 't'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?situation  WHERE {   ?death :caused_by_ship_id ?ship .   ?ship :tonnage 't' .   ?death :note ?situation . }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "prompt": " Translate the following question into SPARQL: What are the name and results of the battles when the bulgarian commander is not 'Boril'  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?result WHERE {   ?battle a :battle .   ?battle :name ?name .   ?battle :result ?result .   FILTER (?battle =/:bulgarian_commander ?bulgarian_commander) .   FILTER (?bulgarian_commander != \"Boril\") .  }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "prompt": " Translate the following question into SPARQL: What are the different ids and names of the battles that lost any 'Brig' type shipes?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?name WHERE {   ?battle a :battle .   ?battle :name ?name .   ?battle :id ?id .   ?ship a :ship .   ?ship :lost_in_battle ?battle .   ?ship :ship_type \"Brig\" .   FILTER NOT EXISTS {     ?death a :death .     ?death :caused_by_ship_id ?ship .   } }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "prompt": " Translate the following question into SPARQL: What are the ids and names of the battles that led to more than 10 people killed in total.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?battle_id ?battle_name WHERE {     ?battle a :battle .     ?battle :id ?battle_id .     ?battle :name ?battle_name .     {         SELECT ?battle_id (SUM(?killed) AS ?total_killed)         WHERE {             ?death a :death .             ?death :caused_by_ship_id ?ship_id .             ?ship a :ship .             ?ship :id ?ship_id .             ?ship :lost_in_battle ?battle_id .             ?death :killed ?killed .             FILTER (?killed > 10)         } GROUP BY ?battle_id      } }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "What is the ship id and name that caused most total injuries?",
        "prompt": " Translate the following question into SPARQL: What is the ship id and name that caused most total injuries?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?shipId ?shipName  WHERE {   ?ship :ship#id ?shipId .   ?ship :ship#name ?shipName .   {     SELECT ?causedByShipId (SUM(?injured) AS ?totalInjuries)     WHERE {       ?death :death#caused_by_ship_id ?causedByShipId .       ?death :death#injured ?injured .     }     GROUP BY ?causedByShipId     ORDER BY DESC(?totalInjuries)     LIMIT 1   }   ?ship :ship#id ?causedByShipId . }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "prompt": " Translate the following question into SPARQL: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?battleName  WHERE {   ?battle :bulgarian_commander \"Kaloyan\";           :latin_commander \"Baldwin I\";           :name ?battleName . }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "How many different results are there for the battles?",
        "prompt": " Translate the following question into SPARQL: How many different results are there for the battles?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?result) AS ?resultsCount) WHERE {   ?battle a :battle ;           :result ?result . }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "How many battles did not lose any ship with tonnage '225'?",
        "prompt": " Translate the following question into SPARQL: How many battles did not lose any ship with tonnage '225'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(distinct ?b) as ?count) WHERE {   ?b a :battle .   FILTER NOT EXISTS {      ?b :death#ref-caused_by_ship_id ?s .     ?s :ship#tonnage \"225\" .   }   FILTER NOT EXISTS {     ?s2 :ship#ref-lost_in_battle ?b .     ?s2 :ship#tonnage \"225\" .   } }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "prompt": " Translate the following question into SPARQL: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?battlename ?date WHERE {   ?lettice :ref-lost_in_battle ?battle .   ?battle :name ?battlename .   ?battle :date ?date .      ?atalanta :ref-lost_in_battle ?battle .   ?atalanta :name \"HMS Atalanta\" . }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "prompt": " Translate the following question into SPARQL: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?result ?bulgarianCommander WHERE {   ?battle a :battle ;           :name ?name ;           :result ?result ;           :bulgarian_commander ?bulgarianCommander ;           :location \"English Channel\" .   FILTER NOT EXISTS {     ?ship a :ship ;           :lost_in_battle ?battleId .     FILTER (?battleId = ?battle)   } }"
    },
    {
        "db_id": "battle_death",
        "natural_language_question": "What are the notes of the death events which has substring 'East'?",
        "prompt": " Translate the following question into SPARQL: What are the notes of the death events which has substring 'East'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['battle', 'death', 'ship'], 'object_properties': ['death#ref-caused_by_ship_id', 'ship#ref-lost_in_battle'], 'data_properties': ['battle#bulgarian_commander', 'battle#date', 'battle#id', 'battle#latin_commander', 'battle#name', 'battle#result', 'death#caused_by_ship_id', 'death#id', 'death#injured', 'death#killed', 'death#note', 'ship#disposition_of_ship', 'ship#id', 'ship#location', 'ship#lost_in_battle', 'ship#name', 'ship#ship_type', 'ship#tonnage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?notes WHERE {   ?death :note ?notes .   FILTER(CONTAINS(?notes, \"East\")) }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "what are all the addresses including line 1 and line 2?",
        "prompt": " Translate the following question into SPARQL: what are all the addresses including line 1 and line 2?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?line1 ?line2 WHERE {   ?address a :addresses .   ?address :line_1 ?line1 .   ?address :line_2 ?line2 . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the first and second line for all addresses?",
        "prompt": " Translate the following question into SPARQL: What is the first and second line for all addresses?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?line1 ?line2 WHERE {   ?address :line_1 ?line1 .   ?address :line_2 ?line2 .   ?address a :addresses . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many courses in total are listed?",
        "prompt": " Translate the following question into SPARQL: How many courses in total are listed?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?course) AS ?totalCourses) WHERE {   ?course a :courses . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many courses are there?",
        "prompt": " Translate the following question into SPARQL: How many courses are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?course) AS ?count) WHERE {   ?course a :courses . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How is the math course described?",
        "prompt": " Translate the following question into SPARQL: How is the math course described?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?description WHERE {   :courses :course_description ?description . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the descriptions for all the math courses?",
        "prompt": " Translate the following question into SPARQL: What are the descriptions for all the math courses?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?description WHERE {   ?course :course_description ?description }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the zip code of the address in the city Port Chelsea?",
        "prompt": " Translate the following question into SPARQL: What is the zip code of the address in the city Port Chelsea?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?zipcode WHERE {   ?address :zip_postcode ?zipcode ;            :city \"Port Chelsea\" . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the zip code for Port Chelsea?",
        "prompt": " Translate the following question into SPARQL: What is the zip code for Port Chelsea?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?zipcode WHERE {   ?address a :addresses .   ?address :zip_postcode ?zipcode .   ?address :city \"Port Chelsea\" . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Which department offers the most number of degrees? List department name and id.",
        "prompt": " Translate the following question into SPARQL: Which department offers the most number of degrees? List department name and id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?dept_name ?dept_id (COUNT(?degree_id) as ?total_degrees) WHERE {   ?degree_id :ref-department_id ?dept_id .   ?dept_id :department_name ?dept_name . } GROUP BY ?dept_name ?dept_id ORDER BY DESC(?total_degrees) LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the name and id of the department with the most number of degrees ?",
        "prompt": " Translate the following question into SPARQL: What is the name and id of the department with the most number of degrees ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?dept_id ?dept_name WHERE {   SELECT ?dept_id (COUNT(?deg_prog_id) AS ?count) WHERE {     ?deg_prog :ref-department_id ?dept_id .     ?deg_prog a :degree_programs .   } GROUP BY ?dept_id ORDER BY DESC(?count) LIMIT 1 .   ?dept :department_id ?dept_id .   ?dept :department_name ?dept_name . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many departments offer any degree?",
        "prompt": " Translate the following question into SPARQL: How many departments offer any degree?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT (DISTINCT ?dept) AS ?numDepts)  WHERE {      ?degreeProgram a :degree_programs ;         :ref-department_id ?dept .     ?dept a :departments .  }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many different departments offer degrees?",
        "prompt": " Translate the following question into SPARQL: How many different departments offer degrees?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (count(DISTINCT ?dept) as ?numDepartments) WHERE {   ?prog :ref-department_id ?dept ;         rdf:type :degree_programs .   ?dept rdf:type :departments . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many different degree names are offered?",
        "prompt": " Translate the following question into SPARQL: How many different degree names are offered?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?degreeProgram) AS ?countDegrees) WHERE {   ?degreeProgram a :degree_programs . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many different degrees are offered?",
        "prompt": " Translate the following question into SPARQL: How many different degrees are offered?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?degree) AS ?numDegrees)  WHERE {   ?degree a :degree_programs . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many degrees does the engineering department offer?",
        "prompt": " Translate the following question into SPARQL: How many degrees does the engineering department offer?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?degree) AS ?count_degrees) WHERE {   ?degree a :degree_programs .   ?degree :degree_programs#department_id ?dept .   ?dept :departments#department_name \"engineering\" . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many degrees does the engineering department have?",
        "prompt": " Translate the following question into SPARQL: How many degrees does the engineering department have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?d) as ?degree_count) WHERE {   ?d a :degree_programs ;      :degree_summary_name ?name ;      :ref-department_id ?dep .   ?dep :department_name \"engineering\" }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the names and descriptions of all the sections?",
        "prompt": " Translate the following question into SPARQL: What are the names and descriptions of all the sections?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?sectionName ?sectionDescription  WHERE {   ?section a :sections .   ?section :section_name ?sectionName .   ?section :section_description ?sectionDescription . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the names and descriptions for all the sections?",
        "prompt": " Translate the following question into SPARQL: What are the names and descriptions for all the sections?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?description WHERE {   ?section a :sections .   ?section :section_name ?name .   ?section :section_description ?description . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the names and id of courses having at most 2 sections?",
        "prompt": " Translate the following question into SPARQL: What are the names and id of courses having at most 2 sections?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name ?id  WHERE {   ?course a :courses .   ?course :course_name ?name .   ?course :course_id ?id .   {     SELECT ?c_id (COUNT(?s) as ?num_sections)      WHERE {       ?sec a :sections .       ?sec :section_id ?s_id .       ?sec :section_name ?s_name .       ?sec :section_description ?s_desc .       ?sec :course_id ?c_id .       BIND(str(?s_id) as ?s_num) .       FILTER(STRSTARTS(?s_num, ?s_name)) .     }     GROUP BY ?c_id     HAVING (?num_sections <= 2)   }   FILTER(?course = ?c_id) }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the names and ids of every course with less than 2 sections?",
        "prompt": " Translate the following question into SPARQL: What are the names and ids of every course with less than 2 sections?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?course_id ?course_name WHERE {   ?course a :courses ;           :course_id ?course_id ;           :course_name ?course_name .      {     SELECT ?course_id (COUNT(?section) AS ?numSections) WHERE {       ?section a :sections ;                :ref-course_id ?course_id .     } GROUP BY ?course_id   }      FILTER(?numSections < 2) }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "List the section_name in reversed lexicographical order.",
        "prompt": " Translate the following question into SPARQL: List the section_name in reversed lexicographical order.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?section_name WHERE {   ?s a :sections .   ?s :section_name ?section_name . } ORDER BY DESC(LCASE(?section_name))"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the names of the sections in reverse alphabetical order?",
        "prompt": " Translate the following question into SPARQL: What are the names of the sections in reverse alphabetical order?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?section_name WHERE {   ?section a :sections .   ?section :section_name ?section_name . } ORDER BY DESC(?section_name)"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the semester which most student registered in? Show both the name and the id.",
        "prompt": " Translate the following question into SPARQL: What is the semester which most student registered in? Show both the name and the id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?semester_name ?semester_id (COUNT(?enrolment) as ?num_students) WHERE {   ?enrolment :ref-semester_id ?semester_id .   ?semester :semester_id ?semester_id .   ?semester :semester_name ?semester_name . }  GROUP BY ?semester_name ?semester_id ORDER BY DESC(?num_students) LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "For each semester, what is the name and id of the one with the most students registered?",
        "prompt": " Translate the following question into SPARQL: For each semester, what is the name and id of the one with the most students registered?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?semester_name ?semester_id ?max_students ?degree_program_name ?degree_program_id  WHERE {      SELECT ?semester_name ?semester_id ?degree_program_name ?degree_program_id (MAX(?students) as ?max_students)     WHERE {           ?semester a :semesters .         ?student_enrolment a :student_enrolment .         ?student_enrolment :ref-semester_id ?semester .         ?student_enrolment :ref-degree_program_id ?degree_program .         ?degree_program :degree_summary_name ?degree_program_name .         ?degree_program :degree_program_id ?degree_program_id .         (SELECT (COUNT(*) as ?students)         WHERE {?student_enrolment :ref-degree_program_id ?degree_program .             ?student_enrolment :ref-semester_id ?semester .         })      }     GROUP BY ?semester_name ?semester_id ?degree_program_name ?degree_program_id } ORDER BY DESC(?max_students)"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the description of the department whose name has the substring the computer?",
        "prompt": " Translate the following question into SPARQL: What is the description of the department whose name has the substring the computer?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?description WHERE {   ?dept a :departments .   ?dept :department_name ?name .   FILTER(CONTAINS(?name, \"the computer\"))   ?dept :department_description ?description . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the department description for the one whose name has the word computer?",
        "prompt": " Translate the following question into SPARQL: What is the department description for the one whose name has the word computer?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?department_description WHERE {   ?department a :departments ;               :department_name ?name ;               :department_description ?department_description .                  FILTER(contains(?name, \"computer\")) }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "prompt": " Translate the following question into SPARQL: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name ?middle_name ?last_name ?id WHERE {   ?student :students#first_name ?first_name ;            :students#middle_name ?middle_name ;            :students#last_name ?last_name ;            :students#student_id ?id ;            :student_enrolment#degree_program_id ?degree_program_id ;            :student_enrolment#semester_id ?semester_id .   ?degree_program :degree_programs#degree_program_id ?degree_program_id .   ?semester :semesters#semester_id ?semester_id .   FILTER (COUNT(DISTINCT ?degree_program) = 2) }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "prompt": " Translate the following question into SPARQL: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name ?middle_name ?last_name ?student_id WHERE {   ?studentEnrolment :ref-degree_program_id ?degreeProgram ;                      :ref-student_id ?student ;                      :ref-semester_id ?semester .   ?student :first_name ?first_name ;            :middle_name ?middle_name ;            :last_name ?last_name ;            :student_id ?student_id .   {     SELECT ?student     WHERE {       ?studentEnrolment :ref-student_id ?student .     }     GROUP BY ?student     HAVING ( COUNT(?degreeProgram) = 2 )   } }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "prompt": " Translate the following question into SPARQL: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name ?middle_name ?last_name WHERE {   ?student :ref-degree_program_id :degree_programs#degree_program_id .   ?student :first_name ?first_name .   ?student :last_name ?last_name .   OPTIONAL { ?student :middle_name ?middle_name . } }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "prompt": " Translate the following question into SPARQL: What are the first, middle, and last names for everybody enrolled in a Bachelors program?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?firstName ?middleName ?lastName WHERE {   ?student a :students .              # select all students    ?student :current_address_id ?addr . # who have a current address   ?studEnrolment a :student_enrolment .# and who are enrolled in a degree program   ?studEnrolment :ref-student_id ?student .   ?studEnrolment :ref-degree_program_id ?degreeProgram .   ?degreeProgram :degree_summary_name \"Bachelor\" . # who are enrolled in a Bachelor program   ?student :first_name ?firstName .     # select their first name   OPTIONAL {?student :middle_name ?middleName .} # select their middle name if they have one   ?student :last_name ?lastName .        # select their last name }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Find the kind of program which most number of students are enrolled in?",
        "prompt": " Translate the following question into SPARQL: Find the kind of program which most number of students are enrolled in?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?program (COUNT(?student) AS ?enrollment) WHERE {   ?enrollment :ref-degree_program_id ?program .   ?enrollment :ref-student_id ?student . } GROUP BY ?program ORDER BY DESC(?enrollment) LIMIT 1  This query retrieves all student enrollments, groups them by the degree program they belong to, counts the number of students in each program, and selects the program with the highest enrollment."
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the degree summary name that has the most number of students enrolled?",
        "prompt": " Translate the following question into SPARQL: What is the degree summary name that has the most number of students enrolled?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   {     SELECT ?name (COUNT(?student) AS ?count)     WHERE {       ?program a :degree_programs .       ?program :degree_summary_name ?name .       ?enrollment a :student_enrolment .       ?enrollment :degree_program_id ?program .       ?enrollment :student_id ?student .     }     GROUP BY ?name     ORDER BY DESC(?count)     LIMIT 1   } }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "prompt": " Translate the following question into SPARQL: Find the program which most number of students are enrolled in. List both the id and the summary.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?program_id ?program_summary WHERE {   {     SELECT ?program_id (COUNT(?student_id) AS ?enrollments)     WHERE {       ?enrollment :ref-degree_program_id ?program_id .       ?enrollment :ref-student_id ?student_id .     }     GROUP BY ?program_id     ORDER BY DESC(?enrollments)     LIMIT 1   }   ?program :degree_program_id ?program_id .   ?program :degree_summary_description ?program_summary . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "prompt": " Translate the following question into SPARQL: What is the program id and the summary of the degree that has the most students enrolled?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?program_id ?summary WHERE {   {     SELECT ?program_id (COUNT(DISTINCT ?student_id) AS ?enrolments)     WHERE {       ?enrolment :ref-degree_program_id ?program_id ;                   :ref-student_id ?student_id .     }     GROUP BY ?program_id     ORDER BY DESC(?enrolments)     LIMIT 1   }      ?program :degree_program_id ?program_id ;            :degree_summary_description ?summary . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id",
        "prompt": " Translate the following question into SPARQL: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?student_id ?first_name ?middle_name ?last_name (COUNT(?enrollment) AS ?num_enrollments) WHERE { ?enrollment :ref-student_id ?student . ?student :student_id ?student_id ; :first_name ?first_name ;:middle_name ?middle_name ; :last_name ?last_name .} GROUP BY ?student_id ?first_name ?middle_name ?last_name ORDER BY DESC(?num_enrollments) LIMIT 1"
    },    
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "prompt": " Translate the following question into SPARQL: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?first_name ?middle_name ?last_name ?id (COUNT(?enrolment) AS ?num_enrollments) WHERE {?enrolment :ref-student_id ?id . ?student :student_id ?id . ?student :first_name ?first_name . ?student :middle_name ?middle_name . ?student :last_name ?last_name .} GROUP BY ?id ?first_name ?middle_name ?last_name ORDER BY DESC(?num_enrollments) LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Which semesters do not have any student enrolled? List the semester name.",
        "prompt": " Translate the following question into SPARQL: Which semesters do not have any student enrolled? List the semester name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?semester_name  WHERE {     ?semester :semester_id ?semester_id .     FILTER NOT EXISTS {         ?enrolment :semester_id ?semester_id .     }     ?semester :semester_name ?semester_name . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the name of the semester with no students enrolled?",
        "prompt": " Translate the following question into SPARQL: What is the name of the semester with no students enrolled?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?semester_name WHERE {   ?semester a :semesters .   FILTER NOT EXISTS {     ?enrolment a :student_enrolment ;                :ref-semester_id ?semester .   }   ?semester :semester_name ?semester_name . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are all the course names of the courses which ever have students enrolled in?",
        "prompt": " Translate the following question into SPARQL: What are all the course names of the courses which ever have students enrolled in?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?courseName WHERE {   ?enrolment :ref-course_id ?course .   ?course :course_name ?courseName. }  GROUP BY ?courseName"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the names of all courses that have some students enrolled?",
        "prompt": " Translate the following question into SPARQL: What are the names of all courses that have some students enrolled?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?course_name WHERE {   ?enrollment a :student_enrolment .   ?enrollment :ref-course_id ?course .   ?course :course_name ?course_name . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What's the name of the course with most number of enrollments?",
        "prompt": " Translate the following question into SPARQL: What's the name of the course with most number of enrollments?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?courseName WHERE {   ?course a :courses .   ?course :course_name ?courseName .   {     SELECT (MAX(COUNT(?enrollment)) as ?maxEnrollments)     WHERE {       ?enrollment a :student_enrolment_courses .       ?enrollment :ref-course_id ?course .     }     GROUP BY ?course     ORDER BY DESC(?maxEnrollments)     LIMIT 1   } }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the name of the course with the most students enrolled?",
        "prompt": " Translate the following question into SPARQL: What is the name of the course with the most students enrolled?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?course_name WHERE {   ?enrolment :ref-course_id ?course.   ?course :course_name ?course_name. } GROUP BY ?course_name ORDER BY DESC(COUNT(?enrolment)) LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "prompt": " Translate the following question into SPARQL: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?lastName WHERE {   ?student a :students ;            :ref-current_address_id ?address ;            :last_name ?lastName .               ?address :state_province_county \"North Carolina\" ;            FILTER NOT EXISTS {              ?enrolment a :student_enrolment ;                         :ref-student_id ?student ;                         :ref-degree_program_id ?program .            } }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "prompt": " Translate the following question into SPARQL: What are the last name of the students who live in North Carolina but have not registered in any degree programs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?lastName WHERE {   ?student :last_name ?lastName .   ?student :ref-current_address_id ?address .   ?address :state_province_county \"North Carolina\" .   FILTER NOT EXISTS {     ?enrollment :ref-student_id ?student .     ?enrollment :ref-degree_program_id ?program .   } }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Show the date and id of the transcript with at least 2 course results.",
        "prompt": " Translate the following question into SPARQL: Show the date and id of the transcript with at least 2 course results.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?date ?id WHERE {   ?transcript :transcript_contents ?content .   ?content :ref-student_course_id ?course .   ?course :ref-student_enrolment_id ?enrolment .   ?enrolment :ref-semester_id ?semester .   ?transcript :transcript_id ?id .   ?transcript :transcript_date ?date .   {     SELECT ?enrolment     WHERE {       ?course :ref-course_id ?section .       ?section :ref-course_id ?enrolment_course .       ?enrolment :ref-student_enrolment_id ?enrolment_id .       ?enrolment_course :ref-student_enrolment_id ?enrolment_id .     }     GROUP BY ?enrolment     HAVING (COUNT(?enrolment_course) >= 2)   } }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the date and id of the transcript with at least 2 courses listed?",
        "prompt": " Translate the following question into SPARQL: What is the date and id of the transcript with at least 2 courses listed?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?date ?id WHERE {   ?t :transcript_id ?id.   ?t :transcript_date ?date.   {     SELECT ?id_count     WHERE {       ?t :transcript_id ?id_count.       ?tc :ref-transcript_id ?t.       ?tc :ref-student_course_id ?sc.       ?e :ref-student_course_id ?sc.       ?e :ref-semester_id ?sem.       ?e :ref-degree_program_id ?deg.       ?c :course_id ?cid.       ?s :course_id ?cid.       FILTER(?deg != ?null && ?sem != ?null && ?cid != ?null)     }     GROUP BY ?id_count     HAVING (COUNT(?tc) >= 2)   } }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "prompt": " Translate the following question into SPARQL: What is the phone number of the man with the first name Timmothy and the last name Ward?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?phone_number WHERE {   ?student :first_name \"Timmothy\" ;            :last_name \"Ward\" ;            :cell_mobile_number ?phone_number . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "prompt": " Translate the following question into SPARQL: What is the mobile phone number of the student named Timmothy Ward ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?mobile_number WHERE {   ?s a :students .   ?s :first_name \"Timmothy\" .   ?s :last_name \"Ward\" .   ?s :cell_mobile_number ?mobile_number . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Who is the first student to register? List the first name, middle name and last name.",
        "prompt": " Translate the following question into SPARQL: Who is the first student to register? List the first name, middle name and last name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName ?middleName ?lastName WHERE {   ?student :students#first_name ?firstName .   ?student :students#middle_name ?middleName .   ?student :students#last_name ?lastName .   ?student :students#date_first_registered ?dateFirstRegistered .    FILTER NOT EXISTS {     ?otherStudent :students#date_first_registered ?otherDateFirstRegistered .     FILTER (?otherDateFirstRegistered < ?dateFirstRegistered)   } } LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the first, middle, and last name of the first student to register?",
        "prompt": " Translate the following question into SPARQL: What is the first, middle, and last name of the first student to register?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name ?middle_name ?last_name WHERE {     ?student a :students .     ?student :first_name ?first_name .     ?student :middle_name ?middle_name .     ?student :last_name ?last_name .     ?se a :student_enrolment .     ?se :ref-student_id ?student .     ?se :student_enrolment_id ?id .     FILTER(?id = 1) } LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "prompt": " Translate the following question into SPARQL: Who is the earliest graduate of the school? List the first name, middle name and last name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?firstName ?middleName ?lastName WHERE {    ?student a :students .   ?student :first_name ?firstName .   ?student :middle_name ?middleName .   ?student :last_name ?lastName .   ?enrollment a :student_enrolment .   ?enrollment :student_id ?student .   ?courseEnrollment a :student_enrolment_courses .   ?courseEnrollment :student_enrolment_id ?enrollment .   ?transcriptContent a :transcript_contents .   ?transcriptContent :student_course_id ?courseEnrollment .   ?transcript a :transcripts .   ?transcript :transcript_id ?transcriptContent .   ?degreeProgram a :degree_programs .   ?degreeProgram :degree_program_id ?enrollmentDegreeProgram .   ?degreeProgram :ref-department_id ?department .   ?department :department_name \"School\" .   ?enrollment :ref-degree_program_id ?enrollmentDegreeProgram .   ?transcript :transcript_date ?transcriptDate .   FILTER NOT EXISTS {     ?enrollment2 a :student_enrolment .     ?enrollment2 :student_id ?student .     ?courseEnrollment2 a :student_enrolment_courses .     ?courseEnrollment2 :student_enrolment_id ?enrollment2 .     ?transcriptContent2 a :transcript_contents .     ?transcriptContent2 :student_course_id ?courseEnrollment2 .     ?transcript2 a :transcripts .     ?transcript2 :transcript_id ?transcriptContent2 .     ?transcript2 :transcript_date ?transcriptDate2 .     FILTER (?transcriptDate2 < ?transcriptDate)   } } ORDER BY ?transcriptDate LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the first, middle, and last name of the earliest school graduate?",
        "prompt": " Translate the following question into SPARQL: What is the first, middle, and last name of the earliest school graduate?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name ?middle_name ?last_name WHERE {   ?student a :students .   ?student :first_name ?first_name .   ?student :middle_name ?middle_name .   ?student :last_name ?last_name .   ?enrolment a :student_enrolment .   ?enrolment :student_id ?student .   ?enrolment :degree_program_id ?degree .   ?degree :degree_summary_name ?degree_name .   ?transcript a :transcripts .   ?transcript :transcript_date ?date .   ?content a :transcript_contents .   ?content :transcript_id ?transcript .   ?course a :courses .   ?course :course_id ?course_id .   ?enrollment_course a :student_enrolment_courses .   ?enrollment_course :student_enrolment_id ?enrolment .   ?enrollment_course :course_id ?course .   FILTER(?degree_name = \"school\" && ?date = (SELECT MIN(?min_date) WHERE { ?t a :transcripts . ?t :transcript_date ?min_date })) . } LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "prompt": " Translate the following question into SPARQL: Whose permanent address is different from his or her current address? List his or her first name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?firstName WHERE {   ?student :ref-current_address_id ?currentAddress .   ?student :ref-permanent_address_id ?permanentAddress .   ?student :first_name ?firstName .   FILTER (?currentAddress != ?permanentAddress) . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "prompt": " Translate the following question into SPARQL: What is the first name of the student whose permanent address is different from his or her current one?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName WHERE {   ?student :students#current_address_id ?currAddressId .   ?student :students#permanent_address_id ?permAddressId .   FILTER (?currAddressId != ?permAddressId)   ?student :students#first_name ?firstName . } LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Which address holds the most number of students currently? List the address id and all lines.",
        "prompt": " Translate the following question into SPARQL: Which address holds the most number of students currently? List the address id and all lines.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?address_id ?address_line WHERE {   ?student :ref-current_address_id ?address .   ?address :address_id ?address_id ;            :line_1 ?address_line . } GROUP BY ?address_id ?address_line ORDER BY DESC(COUNT(?student)) LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the id, line 1, and line 2 of the address with the most students?",
        "prompt": " Translate the following question into SPARQL: What is the id, line 1, and line 2 of the address with the most students?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?line1 ?line2 WHERE {   ?address :line_1 ?line1 .   ?address :line_2 ?line2 .   ?student :current_address_id ?address .   {     SELECT (COUNT(?student) as ?numStudents) WHERE {       ?student a :students .       ?student :current_address_id ?address .     }   }   FILTER NOT EXISTS {     ?address2 :line_1 ?line1_2 .     ?address2 :line_2 ?line2_2 .     ?student2 :current_address_id ?address2 .     {       SELECT (COUNT(?student2) as ?numStudents2) WHERE {         ?student2 a :students .         ?student2 :current_address_id ?address2 .       }     }     FILTER(?numStudents2 > ?numStudents)   }   ?address :address_id ?id . }  ORDER BY DESC(?numStudents) LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "When was the earliest transcript printed?",
        "prompt": " Translate the following question into SPARQL: When was the earliest transcript printed?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MIN(?transcriptDate) AS ?earliestTranscriptPrinted WHERE {    ?transcript :transcripts#transcript_date ?transcriptDate . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the date of the earliest transcript issued ?",
        "prompt": " Translate the following question into SPARQL: What is the date of the earliest transcript issued ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?date  WHERE {   ?transcript :transcripts#transcript_date ?date . }  ORDER BY ?date  LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "When is the first transcript released? List the date and details.",
        "prompt": " Translate the following question into SPARQL: When is the first transcript released? List the date and details.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?date ?details WHERE {   ?transcript :transcript_date ?date .   ?transcript :other_details ?details . } ORDER BY ASC(?date) LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "prompt": " Translate the following question into SPARQL: What is the earliest date of a transcript release, and what details can you tell me?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MIN(?transcriptDate) as ?earliestDate ?transcriptDetails WHERE {   ?t :transcript_date ?transcriptDate .   ?t :transcript_id ?transcriptId .   ?tc :ref-transcript_id ?transcriptId .   ?tc :ref-student_course_id ?scId .   ?sc :student_id ?studentId .   ?st :student_id ?studentId .   ?st :first_name ?firstName .   ?st :last_name ?lastName .   ?sc :course_id ?courseId .   ?c :course_id ?courseId .   ?c :course_name ?courseName .   ?tc :other_details ?transcriptDetails . } GROUP BY ?transcriptDetails ORDER BY ?transcriptDate LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many transcripts are released?",
        "prompt": " Translate the following question into SPARQL: How many transcripts are released?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?t) as ?transcript_count) WHERE {   ?t a :transcripts . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many transcripts are listed?",
        "prompt": " Translate the following question into SPARQL: How many transcripts are listed?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?transcript) AS ?countTranscripts)  WHERE {   ?transcript a :transcripts. }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the last transcript release date?",
        "prompt": " Translate the following question into SPARQL: What is the last transcript release date?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?transcript_date WHERE {   ?transcript :transcripts#transcript_date ?transcript_date . } ORDER BY DESC(?transcript_date) LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "When was the last transcript released?",
        "prompt": " Translate the following question into SPARQL: When was the last transcript released?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?lastTranscriptDate WHERE {   ?transcript :transcript_id ?id .   ?transcript :transcript_date ?lastTranscriptDate . } ORDER BY DESC(?lastTranscriptDate) LIMIT 1."
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "prompt": " Translate the following question into SPARQL: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(DISTINCT ?transcript_id) AS ?max_count ?course_enrollment_id WHERE {   ?transcript_id :ref-transcript_contents ?transcript_content_id .   ?transcript_content_id :ref-student_course_id ?course_enrollment_id . } GROUP BY ?course_enrollment_id ORDER BY DESC(?max_count)  LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "prompt": " Translate the following question into SPARQL: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (MAX(?count) as ?maxCount) ?enrollmentId  WHERE {   {     SELECT COUNT(?student_course_id) as ?count ?enrollmentId     WHERE {       ?student_enrollment_courses :ref-course_id ?course_id .       ?student_enrollment_courses :ref-student_enrollment_id ?enrollmentId .       ?transcript_contents :ref-student_course_id ?student_course_id .       ?transcript_contents :ref-transcript_id ?transcript_id .       FILTER (?course_id = ?courseid)     }     GROUP BY ?enrollmentId   }   FILTER (?count = ?maxCount) }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "prompt": " Translate the following question into SPARQL: Show the date of the transcript which shows the least number of results, also list the id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?date ?id WHERE {   {     SELECT ?transcript_id (COUNT(?result) AS ?count)      WHERE {       ?student_enrolment_courses :ref-course_id ?course_id .       ?transcript_content :ref-student_course_id ?student_course_id .       ?transcript_content :ref-transcript_id ?transcript_id .       ?transcript_content :result ?result .       FILTER(?result >= 90) .     } GROUP BY ?transcript_id ORDER BY ASC(?count) LIMIT 1   }   ?transcrip :ref-transcript_id ?transcript_id .   ?transcrip :transcript_date ?date .   ?transcrip :transcript_id ?id . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the date and id of the transcript with the least number of results?",
        "prompt": " Translate the following question into SPARQL: What is the date and id of the transcript with the least number of results?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?date ?id WHERE {   ?transcript :transcript_id ?id .   ?transcript :transcript_date ?date .   {SELECT (MIN(?count) AS ?mincount)     WHERE {       ?transcript :transcript_id ?tid .       ?transcript :transcript_contents ?content .       {         SELECT ?tid (COUNT(?content) AS ?count)         WHERE {           ?transcript :transcript_id ?tid .           ?transcript :transcript_contents ?content .         }         GROUP BY ?tid       }     }   }   ?transcript :transcript_id ?tid .   ?transcript :transcript_contents ?content .   FILTER(?count = ?mincount) } LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "prompt": " Translate the following question into SPARQL: Find the semester when both Master students and Bachelor students got enrolled in.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?semester  WHERE {   ?enrollment :degree_program_id ?program ;               :semester_id ?semester .   ?program :degree_summary_name \"Bachelor Program\"            UNION            ?program :degree_summary_name \"Master Program\" }  GROUP BY ?semester  HAVING (COUNT(DISTINCT ?program ) = 2)"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "prompt": " Translate the following question into SPARQL: What is the id of the semester that had both Masters and Bachelors students enrolled?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?semester_id WHERE {   ?enrolment :ref-semester_id ?semester_id .   ?enrolment :ref-degree_program_id ?degree_program .   ?degree_program :degree_summary_name ?degree_name .   FILTER(?degree_name = \"Masters\" || ?degree_name = \"Bachelors\") } GROUP BY ?semester_id HAVING (COUNT(DISTINCT ?degree_program) = 2)"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "How many different addresses do the students currently live?",
        "prompt": " Translate the following question into SPARQL: How many different addresses do the students currently live?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT distinct(count(?address)) as ?numAddresses WHERE {   ?student :ref-current_address_id ?address. }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the different addresses that have students living there?",
        "prompt": " Translate the following question into SPARQL: What are the different addresses that have students living there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?address  WHERE {   ?student :ref-current_address_id ?address.   ?student a :students.   ?address a :addresses. }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "List all the student details in reversed lexicographical order.",
        "prompt": " Translate the following question into SPARQL: List all the student details in reversed lexicographical order.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?student_details WHERE {   ?student :students#last_name ?last_name ;            :students#first_name ?first_name ;            :students#student_id ?student_id .   BIND(concat(?last_name, \", \", ?first_name, \", \", ?student_id) AS ?student_details) } ORDER BY DESC(?student_details)"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What other details can you tell me about students in reverse alphabetical order?",
        "prompt": " Translate the following question into SPARQL: What other details can you tell me about students in reverse alphabetical order?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?details WHERE {   ?student a :students .   ?student :last_name ?last_name .   ?student :other_details ?details . } ORDER BY DESC(?last_name)"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Describe the section h.",
        "prompt": " Translate the following question into SPARQL: Describe the section h.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "SELECT ?h_description WHERE {   ?h a :sections ;      :section_id \"h\" ;      :section_description ?h_description . }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What is the description for the section named h?",
        "prompt": " Translate the following question into SPARQL: What is the description for the section named h?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?description WHERE {   :h sections#section_description ?description }"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "prompt": " Translate the following question into SPARQL: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName WHERE {   ?student a :students .   ?student :permanent_address_id ?addr .   ?addr :country \"Haiti\" .   FILTER NOT EXISTS {?student :cell_mobile_number \"09700166582\" .}    ?student :first_name ?firstName . } LIMIT 1"
    },
    {
        "db_id": "student_transcripts_tracking",
        "natural_language_question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "prompt": " Translate the following question into SPARQL: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['addresses', 'courses', 'degree_programs', 'departments', 'sections', 'semesters', 'student_enrolment', 'student_enrolment_courses', 'students', 'transcript_contents', 'transcripts'], 'object_properties': ['degree_programs#ref-department_id', 'sections#ref-course_id', 'student_enrolment#ref-degree_program_id', 'student_enrolment#ref-semester_id', 'student_enrolment#ref-student_id', 'student_enrolment_courses#ref-course_id', 'student_enrolment_courses#ref-student_enrolment_id', 'students#ref-current_address_id', 'students#ref-permanent_address_id', 'transcript_contents#ref-student_course_id', 'transcript_contents#ref-transcript_id'], 'data_properties': ['addresses#address_id', 'addresses#city', 'addresses#country', 'addresses#line_1', 'addresses#line_2', 'addresses#line_3', 'addresses#other_address_details', 'addresses#state_province_county', 'addresses#zip_postcode', 'courses#course_description', 'courses#course_id', 'courses#course_name', 'courses#other_details', 'degree_programs#degree_program_id', 'degree_programs#degree_summary_description', 'degree_programs#degree_summary_name', 'degree_programs#department_id', 'degree_programs#other_details', 'departments#department_description', 'departments#department_id', 'departments#department_name', 'departments#other_details', 'sections#course_id', 'sections#other_details', 'sections#section_description', 'sections#section_id', 'sections#section_name', 'semesters#other_details', 'semesters#semester_description', 'semesters#semester_id', 'semesters#semester_name', 'student_enrolment#degree_program_id', 'student_enrolment#other_details', 'student_enrolment#semester_id', 'student_enrolment#student_enrolment_id', 'student_enrolment#student_id', 'student_enrolment_courses#course_id', 'student_enrolment_courses#student_course_id', 'student_enrolment_courses#student_enrolment_id', 'students#cell_mobile_number', 'students#current_address_id', 'students#date_first_registered', 'students#date_left', 'students#email_address', 'students#first_name', 'students#last_name', 'students#middle_name', 'students#other_student_details', 'students#permanent_address_id', 'students#ssn', 'students#student_id', 'transcript_contents#student_course_id', 'transcript_contents#transcript_id', 'transcripts#other_details', 'transcripts#transcript_date', 'transcripts#transcript_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?firstName WHERE {   ?student a :students ;            :first_name ?firstName ;            (:permanent_address_id|:cell_mobile_number) ?address .   ?address :country \"Haiti\"^^xsd:string OR ?address :cell_mobile_number \"09700166582\"^^xsd:string . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "List the title of all cartoons in alphabetical order.",
        "prompt": " Translate the following question into SPARQL: List the title of all cartoons in alphabetical order.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "SELECT ?title WHERE {   ?cartoon a :cartoon .   ?cartoon :cartoon#title ?title . } ORDER BY ASC(?title)"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the titles of the cartoons sorted alphabetically?",
        "prompt": " Translate the following question into SPARQL: What are the titles of the cartoons sorted alphabetically?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?title WHERE {   ?cartoon a :cartoon .   ?cartoon :title ?title . } ORDER BY ASC(?title)"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "List all cartoon directed by 'Ben Jones'.",
        "prompt": " Translate the following question into SPARQL: List all cartoon directed by 'Ben Jones'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?cartoonTitle WHERE {   ?cartoon a :cartoon ;            :directed_by \"Ben Jones\" ;            :title ?cartoonTitle . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the names of all cartoons directed by Ben Jones?",
        "prompt": " Translate the following question into SPARQL: What are the names of all cartoons directed by Ben Jones?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?cartoon_name WHERE {   ?cartoon a :cartoon .   ?cartoon :directed_by \"Ben Jones\" .   ?cartoon :title ?cartoon_name . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "How many cartoons were written by 'Joseph Kuhr'?",
        "prompt": " Translate the following question into SPARQL: How many cartoons were written by 'Joseph Kuhr'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "SELECT (COUNT(?cartoon) AS ?cartoonCount) WHERE {   ?cartoon a :cartoon .   ?cartoon :written_by \"Joseph Kuhr\" . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the number of cartoones written by Joseph Kuhr?",
        "prompt": " Translate the following question into SPARQL: What is the number of cartoones written by Joseph Kuhr?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?cartoon) as ?num_cartoons WHERE {   ?cartoon a :cartoon .   ?cartoon :written_by \"Joseph Kuhr\" . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "list all cartoon titles and their directors ordered by their air date",
        "prompt": " Translate the following question into SPARQL: list all cartoon titles and their directors ordered by their air date  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?title ?director ?airdate WHERE {   ?cartoon a :cartoon .   ?cartoon :title ?title .   ?cartoon :directed_by ?director .   ?cartoon :original_air_date ?airdate .   ?series a :tv_series .   ?series :id ?series_id .   ?cartoon :ref-series ?series_id . } ORDER BY ?airdate"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "prompt": " Translate the following question into SPARQL: What is the name and directors of all the cartoons that are ordered by air date?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?cartoonName ?director WHERE {     ?cartoon a :cartoon .     ?cartoon :title ?cartoonName .     ?cartoon :directed_by ?director .     ?cartoon :original_air_date ?airDate .     ?series a :tv_series .     ?series :channel ?channel .     ?cartoon :ref-channel ?channel .     ?series :air_date ?seriesAirDate .     FILTER(?airDate = ?seriesAirDate) }  ORDER BY ?airDate"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "List the title of all cartoon directed by 'Ben Jones' or 'Brandon Vietti'.",
        "prompt": " Translate the following question into SPARQL: List the title of all cartoon directed by 'Ben Jones' or 'Brandon Vietti'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?title WHERE {   {?s :directed_by \"Ben Jones\"}   UNION   {?s :directed_by \"Brandon Vietti\"}   ?s :title ?title .   ?s a :cartoon . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "prompt": " Translate the following question into SPARQL: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?title WHERE {   ?cartoon a :cartoon .   ?cartoon :directed_by ?director .   FILTER(?director = \"Ben Jones\" || ?director = \"Brandon Vietti\" )   ?cartoon :title ?title . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "prompt": " Translate the following question into SPARQL: Which country has the most of TV Channels? List the country and number of TV Channels it has.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country (COUNT(?channel) AS ?numChannels) WHERE {   ?channel a :tv_channel .   ?channel :country ?country . } GROUP BY ?country ORDER BY DESC(?numChannels) LIMIT 1"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the country with the most number of TV Channels and how many does it have?",
        "prompt": " Translate the following question into SPARQL: What is the country with the most number of TV Channels and how many does it have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country (MAX(?numChannels) AS ?maxChannels) WHERE {   ?channel a :tv_channel .   ?channel :content ?content .   ?channel :country ?country .   (SELECT COUNT(?content) AS ?numChannels   WHERE {     ?channel2 a :tv_channel .     ?channel2 :content ?content .   }   GROUP BY ?content) } GROUP BY ?country ORDER BY DESC(?maxChannels) LIMIT 1"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "List the number of different series names and contents in the TV Channel table.",
        "prompt": " Translate the following question into SPARQL: List the number of different series names and contents in the TV Channel table.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT (COUNT(?seriesName) AS ?numSeries) WHERE {   ?series :ref-channel ?channel .   ?channel :series_name ?seriesName .   ?series :episode ?episode . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "How many different series and contents are listed in the TV Channel table?",
        "prompt": " Translate the following question into SPARQL: How many different series and contents are listed in the TV Channel table?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "SELECT (COUNT(DISTINCT ?series) AS ?numSeries) (COUNT(DISTINCT ?content) AS ?numContent) WHERE {   ?series a :tv_series .   ?series :ref-channel ?channel .   ?channel :content ?content . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the content of TV Channel with serial name 'Sky Radio'?",
        "prompt": " Translate the following question into SPARQL: What is the content of TV Channel with serial name 'Sky Radio'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "SELECT ?content WHERE {    ?channel :content ?content .   ?channel :series_name \"Sky Radio\" .  }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the content of the series Sky Radio?",
        "prompt": " Translate the following question into SPARQL: What is the content of the series Sky Radio?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?content  WHERE {    ?series a :tv_series .    ?channel a :tv_channel ; :content ?content .    ?series :ref-channel ?channel .    FILTER regex(?channel, \"Sky Radio\", \"i\") }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the Package Option of TV Channel with serial name 'Sky Radio'?",
        "prompt": " Translate the following question into SPARQL: What is the Package Option of TV Channel with serial name 'Sky Radio'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?package_option WHERE {   ?tv_channel a :tv_channel ;               :series_name \"Sky Radio\" ;               :package_option ?package_option . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "prompt": " Translate the following question into SPARQL: What are the Package Options of the TV Channels whose series names are Sky Radio?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?package_option  WHERE {   ?tv_series a :tv_series .   ?tv_series :series_name \"Sky Radio\" .   ?tv_channel a :tv_channel .   ?tv_channel :package_option ?package_option .   ?tv_channel :id ?channel_id .   ?tv_series :channel ?channel_id . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "How many TV Channel using language English?",
        "prompt": " Translate the following question into SPARQL: How many TV Channel using language English?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?channel) as ?english_channel_count) WHERE {  ?channel a :tv_channel .  ?channel :language \"English\" . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "How many TV Channels use the English language?",
        "prompt": " Translate the following question into SPARQL: How many TV Channels use the English language?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?channel) as ?english_tv_channels) WHERE {   ?channel a :tv_channel .   ?channel :language \"English\" . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "prompt": " Translate the following question into SPARQL: List the language used least number of TV Channel. List language and number of TV Channel.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX: <http://valuenet/ontop/>  SELECT ?language (COUNT(?channel) AS ?numChannels) WHERE{   ?channel a :tv_channel .   ?channel :language ?language .   OPTIONAL {?series :ref-channel ?channel .}   OPTIONAL {?cartoon :ref-channel ?channel .} } GROUP BY ?language ORDER BY ASC(?numChannels) LIMIT 1"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "prompt": " Translate the following question into SPARQL: What are the languages used by the least number of TV Channels and how many channels use it?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?language (COUNT(DISTINCT ?channel) AS ?numChannels) WHERE {   ?channel a :tv_channel .   ?channel :language ?language .   {     SELECT (COUNT(DISTINCT ?channel2) AS ?minNumChannels)     WHERE {        ?channel2 a :tv_channel .       ?channel2 :language ?language2 .       FILTER NOT EXISTS {         SELECT *         WHERE {           ?channel3 a :tv_channel .           ?channel3 :language ?language3 .           FILTER(?language2 = ?language3 && COUNT(DISTINCT ?channel3) < COUNT(DISTINCT ?channel2))         }       }     }   }   FILTER(COUNT(DISTINCT ?channel) = ?minNumChannels) } GROUP BY ?language ORDER BY ?numChannels LIMIT 1"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "List each language and the number of TV Channels using it.",
        "prompt": " Translate the following question into SPARQL: List each language and the number of TV Channels using it.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX :<http://valuenet/ontop/>  SELECT ?language (COUNT(?tv_channel) AS ?num_channels) WHERE {   ?tv_channel a :tv_channel .   ?tv_channel :language ?language . } GROUP BY ?language"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "For each language, list the number of TV Channels that use it.",
        "prompt": " Translate the following question into SPARQL: For each language, list the number of TV Channels that use it.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?language (COUNT(?channel) as ?num_channels) WHERE {   ?channel a :tv_channel .   ?channel :language ?language . } GROUP BY ?language"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the TV Channel that shows the cartoon 'The Rise of the Blue Beetle!'? List the TV Channel's series name.",
        "prompt": " Translate the following question into SPARQL: What is the TV Channel that shows the cartoon 'The Rise of the Blue Beetle!'? List the TV Channel's series name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?channelName ?seriesName  WHERE {   ?cartoon :title \"The Rise of the Blue Beetle!\" .   ?cartoon :ref-channel ?channel .   ?channel :series_name ?seriesName .   ?channel :content \"cartoon\" .   ?channel :channel ?channelName . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the series name of the TV Channel that shows the cartoon 'The Rise of the Blue Beetle'?",
        "prompt": " Translate the following question into SPARQL: What is the series name of the TV Channel that shows the cartoon 'The Rise of the Blue Beetle'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?seriesName WHERE {   ?cartoon a :cartoon .   ?cartoon :title \"The Rise of the Blue Beetle\" .   ?cartoon :channel ?channel .   ?tvChannel a :tv_channel .   ?tvChannel :id ?channel .   ?tvSeries a :tv_series .   ?tvSeries :channel ?tvChannel .   ?tvChannel :series_name ?seriesName . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "List the title of all  Cartoons showed on TV Channel with series name 'Sky Radio'.",
        "prompt": " Translate the following question into SPARQL: List the title of all  Cartoons showed on TV Channel with series name 'Sky Radio'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?title WHERE {   ?cartoon a :cartoon .   ?cartoon :cartoon#ref-channel ?channel .   ?channel a :tv_channel .   ?channel :tv_channel#series_name \"Sky Radio\" .   ?cartoon :cartoon#title ?title . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the title of all the cartools that are on the TV Channel with the series name 'Sky Radio'?",
        "prompt": " Translate the following question into SPARQL: What is the title of all the cartools that are on the TV Channel with the series name 'Sky Radio'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?cartoonTitle WHERE {   ?cartoon a :cartoon ;            :ref-channel ?channel ;            :title ?cartoonTitle .   ?tv_channel a :tv_channel ;               :series_name \"Sky Radio\" .    FILTER (?channel = ?tv_channel)  }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "List the Episode of all TV series sorted by rating.",
        "prompt": " Translate the following question into SPARQL: List the Episode of all TV series sorted by rating.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?episode ?rating  WHERE {     ?s a :tv_series .     ?s :episode ?episode .     ?s :rating ?rating . }  ORDER BY DESC(?rating)"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are all of the episodes ordered by ratings?",
        "prompt": " Translate the following question into SPARQL: What are all of the episodes ordered by ratings?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?episode WHERE {   ?episode a :tv_series .   ?episode :rating ?rating . } ORDER BY DESC(?rating)"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "prompt": " Translate the following question into SPARQL: List top 3 highest Rating  TV series. List the TV series's Episode and Rating.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?series ?episode ?rating  WHERE {   ?series a :tv_series ;           :rating ?rating ;   OPTIONAL {?series :episode ?episode .} }  ORDER BY DESC(?rating) LIMIT 3"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "prompt": " Translate the following question into SPARQL: What are 3 most highly rated episodes in the TV series table and what were those ratings?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?rating ?title WHERE {   ?episode a :tv_series .   ?episode :rating ?rating .   ?episode :title ?title . } ORDER BY DESC(?rating) LIMIT 3"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is minimum and maximum share of TV series?",
        "prompt": " Translate the following question into SPARQL: What is minimum and maximum share of TV series?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MIN(?share) AS ?minimum_share MAX(?share) AS ?maximum_share WHERE {   ?series a :tv_series .   ?series :share ?share . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the maximum and minimum share for the TV series?",
        "prompt": " Translate the following question into SPARQL: What is the maximum and minimum share for the TV series?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MAX(?share) AS ?maximum_share MIN(?share) AS ?minimum_share WHERE {   ?series a :tv_series .   ?series :share ?share . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the air date of TV series with Episode 'A Love of a Lifetime'?",
        "prompt": " Translate the following question into SPARQL: What is the air date of TV series with Episode 'A Love of a Lifetime'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?airdate  WHERE {     ?series a :tv_series .     ?series :episode \"A Love of a Lifetime\" .     ?series :air_date ?airdate . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "When did the episode 'A Love of a Lifetime' air?",
        "prompt": " Translate the following question into SPARQL: When did the episode 'A Love of a Lifetime' air?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?air_date WHERE {   ?episode a :cartoon ;            :title \"A Love of a Lifetime\" ;            :original_air_date ?air_date . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is Weekly Rank of TV series with Episode 'A Love of a Lifetime'?",
        "prompt": " Translate the following question into SPARQL: What is Weekly Rank of TV series with Episode 'A Love of a Lifetime'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?weeklyRank WHERE {   ?tvSeries a :tv_series .   ?tvSeries :episode \"A Love of a Lifetime\" .   ?tvSeries :weekly_rank ?weeklyRank . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the weekly rank for the episode 'A Love of a Lifetime'?",
        "prompt": " Translate the following question into SPARQL: What is the weekly rank for the episode 'A Love of a Lifetime'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?weeklyRank WHERE {   ?episode a :tv_series ;            :title \"A Love of a Lifetime\" ;            :weekly_rank ?weeklyRank . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the TV Channel of TV series with Episode 'A Love of a Lifetime'? List the TV Channel's series name.",
        "prompt": " Translate the following question into SPARQL: What is the TV Channel of TV series with Episode 'A Love of a Lifetime'? List the TV Channel's series name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?channel_name ?series_name WHERE {   ?series a :tv_series .   ?series :episode \"A Love of a Lifetime\" .   ?series :ref-channel ?channel .   ?channel a :tv_channel .   ?channel :series_name ?channel_name .   ?series :title ?series_name . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the name of the series that has the episode 'A Love of a Lifetime'?",
        "prompt": " Translate the following question into SPARQL: What is the name of the series that has the episode 'A Love of a Lifetime'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?seriesName WHERE {   ?episode a :cartoon .   ?episode :title \"A Love of a Lifetime\" .   ?series a :tv_series .   ?series :episode ?episode .   ?series :series_name ?seriesName . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "List the Episode of all  TV series showed on TV Channel with series name 'Sky Radio'.",
        "prompt": " Translate the following question into SPARQL: List the Episode of all  TV series showed on TV Channel with series name 'Sky Radio'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?episode WHERE {   ?series a :tv_series ;           :ref-channel ?channel ;           :episode ?episode .   ?channel a :tv_channel ;            :series_name 'Sky Radio' . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the episode for the TV series named 'Sky Radio'?",
        "prompt": " Translate the following question into SPARQL: What is the episode for the TV series named 'Sky Radio'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?episode  WHERE {   ?tv_series a :tv_series .   ?tv_series :series_name \"Sky Radio\" .   ?tv_series :episode ?episode . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "Find the number of cartoons directed by each of the listed directors.",
        "prompt": " Translate the following question into SPARQL: Find the number of cartoons directed by each of the listed directors.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?director (COUNT(?cartoon) as ?num_cartoons) WHERE {   ?cartoon :directed_by ?director .   FILTER(?cartoon rdf:type :cartoon) } GROUP BY ?director"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "How many cartoons did each director create?",
        "prompt": " Translate the following question into SPARQL: How many cartoons did each director create?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?director (COUNT(?cartoon) AS ?numCartoons) WHERE {   ?cartoon a :cartoon .   ?cartoon :directed_by ?director . } GROUP BY ?director"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "Find the production code and channel of the most recently aired cartoon .",
        "prompt": " Translate the following question into SPARQL: Find the production code and channel of the most recently aired cartoon .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?production_code ?channel WHERE {   ?cartoon a :cartoon .   ?cartoon :production_code ?production_code .   ?cartoon :ref-channel ?tv_series .   ?tv_series a :tv_series .   ?tv_series :ref-channel ?tv_channel .   ?tv_channel a :tv_channel .   ?tv_series :air_date ?air_date .   FILTER NOT EXISTS {?tv_series :air_date ?future_air_date . FILTER(?future_air_date > ?air_date)} } ORDER BY DESC(?air_date) LIMIT 1"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the produdction code and channel of the most recent cartoon ?",
        "prompt": " Translate the following question into SPARQL: What is the produdction code and channel of the most recent cartoon ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?code ?channel WHERE {   ?c a :cartoon .   ?c :production_code ?code .   ?c :ref-channel ?ch .   ?ch :id ?cid .   ?ch :content \"cartoon\" .   ?ch :series_name ?channel .   FILTER NOT EXISTS {     ?c2 a :cartoon .     ?c2 :original_air_date ?date .     FILTER(?date > ?latestDate)   } } ORDER BY DESC(?latestDate) LIMIT 1"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "prompt": " Translate the following question into SPARQL: Find the package choice and series name of the TV channel that has high definition TV.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?package_option ?series_name WHERE {   ?channel a :tv_channel .   ?channel :high_definition_tv true .   ?channel :series_name ?series_name .   ?channel :package_option ?package_option . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "prompt": " Translate the following question into SPARQL: What are the package options and the name of the series for the TV Channel that supports high definition TV?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?package_option ?series_name  WHERE {   ?tv_channel :high_definition_tv true .   ?tv_channel :package_option ?package_option .   ?tv_channel :series_name ?series_name . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "prompt": " Translate the following question into SPARQL: which countries' tv channels are playing some cartoon written by Todd Casey?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country  WHERE { \t?cartoon :written_by \"Todd Casey\" . \t?cartoon :ref-channel ?channel . \t?channel :content \"cartoon\" . \t?channel :country ?country . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "prompt": " Translate the following question into SPARQL: What are the countries that have cartoons on TV that were written by Todd Casey?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?country  WHERE {   ?cartoon a :cartoon .   ?cartoon :written_by \"Todd Casey\" .   ?cartoon :channel ?channel .   ?tv_channel a :tv_channel .   ?tv_channel :country ?country .   FILTER EXISTS {     ?tv_series a :tv_series .     ?tv_series :ref-channel ?tv_channel .     ?tv_series :ref-cartoon ?cartoon   } }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "prompt": " Translate the following question into SPARQL: which countries' tv channels are not playing any cartoon written by Todd Casey?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?country  WHERE {   ?tv_channel :content ?content ;               :country ?country .   FILTER NOT EXISTS {     ?cartoon :written_by \"Todd Casey\" ;              :ref-channel ?tv_channel .   }   FILTER NOT EXISTS {     ?tv_series :ref-channel ?tv_channel ;                :episode ?episode .     ?cartoon :ref-series ?tv_series ;              :written_by \"Todd Casey\" .   } }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "prompt": " Translate the following question into SPARQL: What are the countries that are not playing cartoons written by Todd Casey?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?country WHERE{   ?channel a :tv_channel .   ?channel :content \"cartoon\" .   ?channel :country ?country .   FILTER NOT EXISTS {     ?cartoon a :cartoon .     ?cartoon :written_by \"Todd Casey\" .     ?cartoon :channel ?channel .   } }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "prompt": " Translate the following question into SPARQL: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?seriesName ?country WHERE {   ?cartoon :directed_by \"Ben Jones,Micheal Chang\" .   ?cartoon :ref-channel ?channel .   ?channel rdf:type :tv_channel .   ?channel :content \"cartoon\" .   ?channel :series_name ?seriesName .   ?channel :country ?country . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "prompt": " Translate the following question into SPARQL: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?series_name ?country WHERE {   ?cartoon a :cartoon .   ?cartoon :directed_by \"Ben Jones\" .   ?cartoon :directed_by \"Michael Chang\" .   ?cartoon :ref-channel ?channel .   ?series :ref-channel ?channel .   ?series a :tv_series .   ?channel a :tv_channel .   ?channel :content \"cartoon\" .   ?channel :series_name ?series_name .   ?channel :country ?country . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "prompt": " Translate the following question into SPARQL: find the pixel aspect ratio and nation of the tv channels that do not use English.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?pixelAspectRatio ?nation WHERE {   ?tvChannel a :tv_channel ;              :language ?language ;              :pixel_aspect_ratio_par ?pixelAspectRatio ;              :country ?nation .   FILTER (?language != \"English\") }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "prompt": " Translate the following question into SPARQL: What is the pixel aspect ratio and country of origin for all TV channels that do not use English?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX: <http://valuenet/ontop/> SELECT ?par ?country  WHERE {     ?channel a :tv_channel .     FILTER(lang(?channel) != \"en\") .     ?channel :pixel_aspect_ratio_par ?par .     ?channel :country ?country . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "prompt": " Translate the following question into SPARQL: find id of the tv channels that from the countries where have more than two tv channels.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id WHERE {   ?channel a :tv_channel .   ?channel :country ?country .      {     SELECT ?country (COUNT(?channel) as ?count)     WHERE {       ?c a :tv_channel .       ?c :country ?country .     }     GROUP BY ?country     HAVING (?count > 2)   }      ?channel :id ?id . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "prompt": " Translate the following question into SPARQL: What are the ids of all tv channels that have more than 2 TV channels?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX :<http://valuenet/ontop/>  SELECT ?id WHERE {   ?channel a :tv_channel .   {     SELECT (COUNT(*) as ?count) WHERE {       ?otherChannel a :tv_channel .       FILTER(?otherChannel != ?channel)       ?series :ref-channel ?otherChannel .       ?otherSeries :ref-channel ?otherChannel .       FILTER(?series != ?otherSeries)     }   }   FILTER(?count > 2)   ?channel :id ?id . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "prompt": " Translate the following question into SPARQL: find the id of tv channels that do not play any cartoon directed by Ben Jones.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?id WHERE {   ?channel a :tv_channel .   FILTER NOT EXISTS {     ?cartoon a :cartoon ;              :ref-channel ?channel ;              :directed_by \"Ben Jones\" .   }   ?channel :id ?id . }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "prompt": " Translate the following question into SPARQL: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?id WHERE {   ?channel a :tv_channel.   ?channel :id ?id.   FILTER NOT EXISTS {     ?cartoon a :cartoon.     ?cartoon :directed_by \"Ben Jones\".     ?cartoon :channel ?channel.   } }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "prompt": " Translate the following question into SPARQL: find the package option of the tv channel that do not have any cartoon directed by Ben Jones.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?package_option  WHERE {   ?channel a :tv_channel .   ?channel :package_option ?package_option .   FILTER NOT EXISTS {     ?cartoon a :cartoon .     ?cartoon :channel ?channel .     ?cartoon :directed_by \"Ben Jones\" .   } }"
    },
    {
        "db_id": "tvshow",
        "natural_language_question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "prompt": " Translate the following question into SPARQL: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['cartoon', 'tv_channel', 'tv_series'], 'object_properties': ['cartoon#ref-channel', 'tv_series#ref-channel'], 'data_properties': ['cartoon#channel', 'cartoon#directed_by', 'cartoon#id', 'cartoon#original_air_date', 'cartoon#production_code', 'cartoon#title', 'cartoon#written_by', 'tv_channel#content', 'tv_channel#country', 'tv_channel#high_definition_tv', 'tv_channel#id', 'tv_channel#language', 'tv_channel#package_option', 'tv_channel#pay_per_view_ppv', 'tv_channel#pixel_aspect_ratio_par', 'tv_channel#series_name', 'tv_series#air_date', 'tv_series#channel', 'tv_series#episode', 'tv_series#id', 'tv_series#rating', 'tv_series#rating_share', 'tv_series#share', 'tv_series#viewers_m', 'tv_series#weekly_rank']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?package_option WHERE {   ?channel a :tv_channel .   FILTER NOT EXISTS {     ?cartoon a :cartoon .     ?cartoon :channel ?channel .     ?cartoon :directed_by \"Ben Jones\" .   }   ?channel :package_option ?package_option .   ?channel :content \"TV\" . }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "How many poker players are there?",
        "prompt": " Translate the following question into SPARQL: How many poker players are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?player) AS ?count) WHERE {   ?player a :poker_player }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Count the number of poker players.",
        "prompt": " Translate the following question into SPARQL: Count the number of poker players.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?pokerplayer) AS ?count) WHERE {   ?pokerplayer a :poker_player. }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "List the earnings of poker players in descending order.",
        "prompt": " Translate the following question into SPARQL: List the earnings of poker players in descending order.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?earnings WHERE {    ?player a :poker_player .   ?player :earnings ?earnings . } ORDER BY DESC(?earnings)"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are the earnings of poker players, ordered descending by value?",
        "prompt": " Translate the following question into SPARQL: What are the earnings of poker players, ordered descending by value?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?earnings  WHERE {    ?poker_player a :poker_player .    ?poker_player :earnings ?earnings .  }  ORDER BY DESC(?earnings)"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "List the final tables made and the best finishes of poker players.",
        "prompt": " Translate the following question into SPARQL: List the final tables made and the best finishes of poker players.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "SELECT ?finalTable ?bestFinish WHERE {   ?pokerPlayer :final_table_made ?finalTable .   ?pokerPlayer :best_finish ?bestFinish . }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are the final tables made and best finishes for all poker players?",
        "prompt": " Translate the following question into SPARQL: What are the final tables made and best finishes for all poker players?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?finalTableMade ?bestFinish WHERE {   ?pokerPlayer rdf:type :poker_player .   ?pokerPlayer :final_table_made ?finalTableMade .   ?pokerPlayer :best_finish ?bestFinish .   ?pokerPlayer :poker_player#ref-people_id ?peopleId .   ?people rdf:type :people .   ?people :people_id ?peopleId .   ?people :name ?name . }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What is the average earnings of poker players?",
        "prompt": " Translate the following question into SPARQL: What is the average earnings of poker players?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?earnings) AS ?average_earnings WHERE {   ?player a :poker_player .   ?player :earnings ?earnings . }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Return the average earnings across all poker players.",
        "prompt": " Translate the following question into SPARQL: Return the average earnings across all poker players.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?earnings) AS ?averageEarnings WHERE {   ?poker_player a :poker_player .   ?poker_player :earnings ?earnings . }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What is the money rank of the poker player with the highest earnings?",
        "prompt": " Translate the following question into SPARQL: What is the money rank of the poker player with the highest earnings?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?rank  WHERE {   ?player a :poker_player .   ?player :earnings ?earnings .   ?player :money_rank ?rank .   FILTER(?earnings = (SELECT MAX(?e) WHERE { ?p a :poker_player . ?p :earnings ?e })) }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Return the money rank of the player with the greatest earnings.",
        "prompt": " Translate the following question into SPARQL: Return the money rank of the player with the greatest earnings.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?mr  WHERE {   ?pokerplayer :poker_player#earnings ?e .   ?pokerplayer :poker_player#money_rank ?mr .   FILTER(?e = (SELECT MAX(?x) WHERE { ?pokerplayer :poker_player#earnings ?x })) }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "prompt": " Translate the following question into SPARQL: What is the maximum number of final tables made among poker players with earnings less than 200000?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (MAX(?final_tables) AS ?max_final_tables) WHERE {   ?player a :poker_player ;           :final_table_made ?final_tables ;           :earnings ?earnings .   FILTER (?earnings < 200000) }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "prompt": " Translate the following question into SPARQL: Return the maximum final tables made across all poker players who have earnings below 200000.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MAX(?final_tables) WHERE {   ?pokerPlayer a :poker_player .   ?pokerPlayer :final_table_made ?final_tables .   ?pokerPlayer :earnings ?earnings .   FILTER(?earnings < 200000) . }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are the names of poker players?",
        "prompt": " Translate the following question into SPARQL: What are the names of poker players?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?playerName WHERE {   ?player a :poker_player.   ?player :people_id ?id.   ?person a :people.   ?person :people_id ?id.   ?person :name ?playerName. }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Return the names of all the poker players.",
        "prompt": " Translate the following question into SPARQL: Return the names of all the poker players.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?player a :poker_player .   ?player :poker_player#people_id ?id .   ?person a :people .   ?person :people#people_id ?id .   ?person :people#name ?name . }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are the names of poker players whose earnings is higher than 300000?",
        "prompt": " Translate the following question into SPARQL: What are the names of poker players whose earnings is higher than 300000?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   ?player a :poker_player .   ?player :earnings ?earnings .   ?player :name ?name .   FILTER (?earnings > 300000) }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Give the names of poker players who have earnings above 300000.",
        "prompt": " Translate the following question into SPARQL: Give the names of poker players who have earnings above 300000.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {     ?poker_player a :poker_player ;                   :name ?name ;                   :earnings ?earnings .     FILTER(?earnings > 300000) }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "List the names of poker players ordered by the final tables made in ascending order.",
        "prompt": " Translate the following question into SPARQL: List the names of poker players ordered by the final tables made in ascending order.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?pokerPlayer :poker_player#final_table_made ?finalTableMade .   ?pokerPlayer :poker_player#ref-people_id ?people .   ?people :people#name ?name . }  ORDER BY ASC(?finalTableMade)"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "prompt": " Translate the following question into SPARQL: What are the names of poker players, ordered ascending by the number of final tables they have made?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?p a :poker_player .   ?p :name ?name . } ORDER BY ASC(?final_table_made)"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What is the birth date of the poker player with the lowest earnings?",
        "prompt": " Translate the following question into SPARQL: What is the birth date of the poker player with the lowest earnings?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?birth_date WHERE {   {     SELECT MIN(?earnings) AS ?minEarnings     WHERE {       ?pp a :poker_player .       ?pp :earnings ?earnings .     }   }   ?pp a :poker_player .   ?pp :earnings ?earnings .   ?pp :people_id ?pID .   ?person a :people .   ?person :people_id ?pID .   ?person :birth_date ?birth_date .   FILTER(?earnings = ?minEarnings) }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Return the birth date of the poker player with the lowest earnings.",
        "prompt": " Translate the following question into SPARQL: Return the birth date of the poker player with the lowest earnings.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?birthdate WHERE {   ?player a :poker_player .   ?player :earnings ?earnings .   ?player :people_id ?id .   ?person a :people .   ?person :people_id ?id .   ?person :birth_date ?birthdate .   FILTER NOT EXISTS {     ?player2 a :poker_player .     ?player2 :earnings ?earnings2 .     ?player2 :people_id ?id2 .     FILTER(?earnings2 < ?earnings)   } }  ORDER BY ?earnings LIMIT 1"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What is the money rank of the tallest poker player?",
        "prompt": " Translate the following question into SPARQL: What is the money rank of the tallest poker player?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?rank WHERE {     ?player a :poker_player ;             :height ?height ;             :money_rank ?rank .     FILTER(?height = (SELECT MAX(?h) WHERE {?p a :poker_player ; :height ?h})) }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Return the money rank of the poker player with the greatest height.",
        "prompt": " Translate the following question into SPARQL: Return the money rank of the poker player with the greatest height.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?rank WHERE {   ?pokerPlayer a :poker_player .   ?pokerPlayer :money_rank ?rank .   ?person a :people .   ?person :height ?h .   ?person :people_id ?id .   ?pokerPlayer :ref-people_id ?id .   FILTER NOT EXISTS {     ?otherPerson a :people .     ?otherPerson :people_id ?otherId .     ?otherPoker a :poker_player .     ?otherPoker :ref-people_id ?otherId .     ?otherPerson :height ?otherH .     FILTER(?otherH > ?h)   } } ORDER BY DESC(?rank) LIMIT 1"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What is the average earnings of poker players with height higher than 200?",
        "prompt": " Translate the following question into SPARQL: What is the average earnings of poker players with height higher than 200?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?earnings)  WHERE {   ?player a :poker_player.   ?player :earnings ?earnings.   ?person a :people.   ?player :ref-people_id ?person.   ?person :height ?height.   FILTER(?height > 200). }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Give average earnings of poker players who are taller than 200.",
        "prompt": " Translate the following question into SPARQL: Give average earnings of poker players who are taller than 200.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX: <http://valuenet/ontop/> SELECT AVG(?earnings)  WHERE{   ?player rdf:type :poker_player.   ?player :poker_player#earnings ?earnings.   ?people :people#height ?height.   FILTER (?height>200)   ?player :poker_player#ref-people_id ?people. }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are the names of poker players in descending order of earnings?",
        "prompt": " Translate the following question into SPARQL: What are the names of poker players in descending order of earnings?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   ?pokerPlayer a :poker_player ;                :earnings ?earnings ;                :people_id ?peopleId .   ?person a :people ;           :name ?name ;           :people_id ?peopleId . } ORDER BY DESC(?earnings)"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Return the names of poker players sorted by their earnings descending.",
        "prompt": " Translate the following question into SPARQL: Return the names of poker players sorted by their earnings descending.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {     ?player a :poker_player ;             :earnings ?earnings ;             :people_id ?id .     ?person a :people ;             :people_id ?id ;             :name ?name . } ORDER BY DESC(?earnings)"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "prompt": " Translate the following question into SPARQL: What are different nationalities of people and the corresponding number of people from each nation?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?nationality (COUNT(?people_id) AS ?num_people) WHERE {   ?person a :people ;           :people_id ?people_id ;           :nationality ?nationality . } GROUP BY ?nationality  ORDER BY DESC(?num_people)"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "How many people are there of each nationality?",
        "prompt": " Translate the following question into SPARQL: How many people are there of each nationality?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?nationality (COUNT(?people) AS ?count) WHERE {   ?people a :people .   ?people :nationality ?nationality . } GROUP BY ?nationality"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What is the most common nationality of people?",
        "prompt": " Translate the following question into SPARQL: What is the most common nationality of people?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?nationality (COUNT(?nationality) AS ?count) WHERE {   ?person :nationality ?nationality . } GROUP BY ?nationality ORDER BY DESC(?count) LIMIT 1"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Give the nationality that is most common across all people.",
        "prompt": " Translate the following question into SPARQL: Give the nationality that is most common across all people.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?nationality (COUNT(?nationality) AS ?count) WHERE {   ?person :people#nationality ?nationality . } GROUP BY ?nationality ORDER BY DESC(?count) LIMIT 1"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are the nationalities that are shared by at least two people?",
        "prompt": " Translate the following question into SPARQL: What are the nationalities that are shared by at least two people?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?nationality WHERE {   ?person1 :nationality ?nationality .   ?person2 :nationality ?nationality .   FILTER(?person1 != ?person2) }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Return the nationalities for which there are two or more people.",
        "prompt": " Translate the following question into SPARQL: Return the nationalities for which there are two or more people.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?nationality  WHERE {   {?person :nationality ?nationality .}     {?person rdf:type :people .} UNION {?person rdf:type :poker_player .} }  GROUP BY ?nationality  HAVING (COUNT(?person) >= 2)"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "prompt": " Translate the following question into SPARQL: List the names and birth dates of people in ascending alphabetical order of name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?birth_date WHERE {   ?person :name ?name ;           :birth_date ?birth_date . } ORDER BY ASC(?name)"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "prompt": " Translate the following question into SPARQL: What are the names and birth dates of people, ordered by their names in alphabetical order?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?birth_date  WHERE {   ?person a :people .   ?person :name ?name .   ?person :birth_date ?birth_date . }  ORDER BY ?name"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Show names of people whose nationality is not 'Russia'.",
        "prompt": " Translate the following question into SPARQL: Show names of people whose nationality is not 'Russia'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?person a :people .   ?person :name ?name .   FILTER(?person != :Russia) }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are the names of people who are not from Russia?",
        "prompt": " Translate the following question into SPARQL: What are the names of people who are not from Russia?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?person :nationality ?nationality ;           :name ?name .   FILTER(?nationality != \"Russia\") }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "List the names of people that are not poker players.",
        "prompt": " Translate the following question into SPARQL: List the names of people that are not poker players.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   ?person a :people .   ?person :name ?name .   FILTER NOT EXISTS {     ?person :poker_player#ref-people_id ?id .   } }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "What are the names of people who do not play poker?",
        "prompt": " Translate the following question into SPARQL: What are the names of people who do not play poker?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?person a :people .   ?person :people_id ?id .   FILTER NOT EXISTS {     ?player a :poker_player .     ?player :ref-people_id ?id .   }   ?person :name ?name . }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "How many distinct nationalities are there?",
        "prompt": " Translate the following question into SPARQL: How many distinct nationalities are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?nationality) AS ?numOfNationalities) WHERE {   ?person :nationality ?nationality }"
    },
    {
        "db_id": "poker_player",
        "natural_language_question": "Count the number of different nationalities.",
        "prompt": " Translate the following question into SPARQL: Count the number of different nationalities.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['people', 'poker_player'], 'object_properties': ['poker_player#ref-people_id'], 'data_properties': ['people#birth_date', 'people#height', 'people#name', 'people#nationality', 'people#people_id', 'poker_player#best_finish', 'poker_player#earnings', 'poker_player#final_table_made', 'poker_player#money_rank', 'poker_player#people_id', 'poker_player#poker_player_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?nationality) AS ?numNationalities)  WHERE {   ?person a :people.   ?person :nationality ?nationality. }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "How many states are there?",
        "prompt": " Translate the following question into SPARQL: How many states are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?state) AS ?numberOfStates) WHERE {   ?areaCodeState :state ?state . }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "List the contestant numbers and names, ordered by contestant name descending.",
        "prompt": " Translate the following question into SPARQL: List the contestant numbers and names, ordered by contestant name descending.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?contestant_number ?contestant_name WHERE {   ?contestant a :contestants;               :contestant_number ?contestant_number;               :contestant_name ?contestant_name. }  ORDER BY DESC(?contestant_name)"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "List the vote ids, phone numbers and states of all votes.",
        "prompt": " Translate the following question into SPARQL: List the vote ids, phone numbers and states of all votes.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?vote_id ?phone_number ?state WHERE {   ?vote a :votes .   ?vote :vote_id ?vote_id .   ?vote :phone_number ?phone_number .   ?vote :area_code ?area_code .   ?area :area_code_state#area_code ?area_code .   ?area :area_code_state#state ?state . }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "What are the maximum and minimum values of area codes?",
        "prompt": " Translate the following question into SPARQL: What are the maximum and minimum values of area codes?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (MIN(?code) AS ?minimum) (MAX(?code) AS ?maximum) WHERE {   ?x :area_code_state#area_code ?code . }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "What is last date created of votes from the state 'CA'?",
        "prompt": " Translate the following question into SPARQL: What is last date created of votes from the state 'CA'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?lastDateCreated WHERE {   ?vote votes#area_code ?area .   ?area area_code_state#state \"CA\" .   ?vote votes#created ?lastDateCreated . } ORDER BY DESC(?lastDateCreated) LIMIT 1"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "prompt": " Translate the following question into SPARQL: What are the names of the contestants whose names are not 'Jessie Alloway'  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE{   ?c a :contestants .   ?c :contestant_name ?name .   FILTER(?name != 'Jessie Alloway')  }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "What are the distinct states and create time of all votes?",
        "prompt": " Translate the following question into SPARQL: What are the distinct states and create time of all votes?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?state ?createTime WHERE {   ?v a :votes .   ?v :created ?createTime .   ?a a :area_code_state .   ?a :state ?state .   ?v :ref-area_code ?ac .   ?a :area_code ?ac . }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "prompt": " Translate the following question into SPARQL: What are the contestant numbers and names of the contestants who had at least two votes?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?contestant_number ?contestant_name WHERE {   ?v :ref-contestant_number ?contestant_number ;      :vote_id ?vote_id .   ?c :contestant_number ?contestant_number ;      :contestant_name ?contestant_name .   {     SELECT ?contestant_number (COUNT(?vote_id) as ?count)     WHERE {       ?v :ref-contestant_number ?contestant_number ;          :vote_id ?vote_id .     }     GROUP BY ?contestant_number     HAVING (?count >= 2)   } }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "prompt": " Translate the following question into SPARQL: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?contestant_number ?contestant_name WHERE {   ?v :ref-contestant_number ?contestant_number .   ?c :contestant_number ?contestant_number .   ?c :contestant_name ?contestant_name .   {     SELECT (MIN(?count) as ?min_count)     WHERE {       SELECT ?contestant_number (COUNT(?v) as ?count)       WHERE {         ?v :ref-contestant_number ?contestant_number .         FILTER EXISTS {?c :contestant_number ?contestant_number}       }       GROUP BY ?contestant_number     }   }   {SELECT ?contestant_number WHERE {     ?v :ref-contestant_number ?contestant_number .     FILTER EXISTS {?c :contestant_number ?contestant_number}   }}   ?v :ref-contestant_number ?contestant_number .   FILTER (?count = ?min_count)  }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "What are the number of votes from state 'NY' or 'CA'?",
        "prompt": " Translate the following question into SPARQL: What are the number of votes from state 'NY' or 'CA'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(?votes)  WHERE {   ?vote votes#ref-area_code ?areacode .   ?areacode area_code_state#state ?state .   ?vote votes#ref-contestant_number ?contestant .   ?contestant contestants#contestant_number ?number .   FILTER(?state = \"NY\" || ?state = \"CA\") }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "How many contestants did not get voted?",
        "prompt": " Translate the following question into SPARQL: How many contestants did not get voted?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?c) AS ?count)  WHERE {   ?c a :contestants .   FILTER NOT EXISTS {     ?v a :votes ;        :ref-contestant_number ?c ;        :vote_id ?id .   } }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "What is the area code in which the most voters voted?",
        "prompt": " Translate the following question into SPARQL: What is the area code in which the most voters voted?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?area_code WHERE {   {     SELECT ?code (COUNT(?vote) AS ?count)     WHERE {       ?vote votes#ref-area_code ?code .       ?vote votes#ref-contestant_number ?number .     } GROUP BY ?code ORDER BY DESC(?count) LIMIT 1   }   ?area area_code_state#area_code ?code . }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "prompt": " Translate the following question into SPARQL: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?createDate ?state ?phoneNumber WHERE {   ?vote a :votes .   ?vote :ref-contestant_number ?cont .   ?cont :contestant_name \"Tabatha Gehling\" .   ?vote :created ?createDate .   ?vote :phone_number ?phoneNumber .   ?vote :ref-area_code ?acState .   ?acState :state ?state . }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "prompt": " Translate the following question into SPARQL: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?area_code  WHERE {   ?vote1 :votes#ref-contestant_number ?contestant1 .   ?vote1 :votes#ref-area_code ?area_code .   ?vote2 :votes#ref-contestant_number ?contestant2 .   ?vote2 :votes#ref-area_code ?area_code .   FILTER (?contestant1 = \"Tabatha Gehling\" && ?contestant2 = \"Kelly Clauss\") }"
    },
    {
        "db_id": "voter_1",
        "natural_language_question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "prompt": " Translate the following question into SPARQL: Return the names of the contestants whose names contain the substring 'Al' .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['area_code_state', 'contestants', 'votes'], 'object_properties': ['votes#ref-area_code', 'votes#ref-contestant_number'], 'data_properties': ['area_code_state#area_code', 'area_code_state#state', 'contestants#contestant_name', 'contestants#contestant_number', 'votes#area_code', 'votes#contestant_number', 'votes#created', 'votes#phone_number', 'votes#vote_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?c :contestant_name ?name .   FILTER regex(?name, \"Al\") }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the names of all the countries that became independent after 1950?",
        "prompt": " Translate the following question into SPARQL: What are the names of all the countries that became independent after 1950?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName WHERE {   ?country :indepyear ?year .   ?country :name ?countryName   FILTER (?year > 1950) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the names of the nations that were founded after 1950.",
        "prompt": " Translate the following question into SPARQL: Give the names of the nations that were founded after 1950.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?country a :country .   ?country :indepyear ?year .   FILTER (?year > 1950) .   ?country :name ?name . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many countries have a republic as their form of government?",
        "prompt": " Translate the following question into SPARQL: How many countries have a republic as their form of government?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(?country)  WHERE {   ?country :governmentform \"Republic\". }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many countries have governments that are republics?",
        "prompt": " Translate the following question into SPARQL: How many countries have governments that are republics?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?country) AS ?count) WHERE {   ?country :governmentform \"Republic\". }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the total surface area of the countries in the Caribbean region?",
        "prompt": " Translate the following question into SPARQL: What is the total surface area of the countries in the Caribbean region?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (SUM(?sa) AS ?total_surface_area)  WHERE {   ?c a :country .   ?c :region \"Caribbean\" .   ?c :surfacearea ?sa . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How much surface area do the countires in the Carribean cover together?",
        "prompt": " Translate the following question into SPARQL: How much surface area do the countires in the Carribean cover together?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT SUM(?surfaceArea) as ?totalSurfaceArea WHERE {     ?country a :country .     ?country :surfacearea ?surfaceArea.     FILTER(?country IN (SELECT ?c                         WHERE {                             ?c a :country .                             ?c :region \"Carribean\" .                                       })) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which continent is Anguilla in?",
        "prompt": " Translate the following question into SPARQL: Which continent is Anguilla in?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?continent WHERE  {    :Anguilla city:countrycode ?countryCode .    ?country country:code ?countryCode .    ?country country:continent ?continent . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the continent name which Anguilla belongs to?",
        "prompt": " Translate the following question into SPARQL: What is the continent name which Anguilla belongs to?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?continentName WHERE {   :Anguilla :ref-countrycode ?countryCode .   ?countryCode :continent ?continentName . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which region is the city Kabul located in?",
        "prompt": " Translate the following question into SPARQL: Which region is the city Kabul located in?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?region  WHERE {   ?city :name \"Kabul\" .   ?city :ref-countrycode ?countrycode .   ?country :code ?countrycode .   ?country :region ?region . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What region is Kabul in?",
        "prompt": " Translate the following question into SPARQL: What region is Kabul in?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?region WHERE {   ?city a :city .   ?city :name \"Kabul\" .   ?city :ref-countrycode ?country .   ?country :region ?region . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which language is the most popular in Aruba?",
        "prompt": " Translate the following question into SPARQL: Which language is the most popular in Aruba?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?language  WHERE {   ?language a :countrylanguage .   :Aruba :city#ref-countrycode ?country .   ?language :countrylanguage#ref-countrycode ?country .   FILTER(?language : countrylanguage#isofficial \"T\") . } ORDER BY DESC(?language:countrylanguage#percentage) LIMIT 1"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What language is predominantly spoken in Aruba?",
        "prompt": " Translate the following question into SPARQL: What language is predominantly spoken in Aruba?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX: <http://valuenet/ontop/> SELECT ?language WHERE {   ?cl :name \"Aruba\" .   ?c :code ?code .   ?cl :ref-countrycode ?code .   ?cl :language ?language .   FILTER (?cl :isofficial = true) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the population and life expectancies in Brazil?",
        "prompt": " Translate the following question into SPARQL: What are the population and life expectancies in Brazil?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?population ?lifeExpectancy  WHERE {     ?brazil a :country .     ?brazil :name \"Brazil\" .     ?brazil :population ?population .     ?brazil :lifeexpectancy ?lifeExpectancy . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give me Brazil\u2019s population and life expectancies.",
        "prompt": " Translate the following question into SPARQL: Give me Brazil\u2019s population and life expectancies.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?population ?lifeExpectancy WHERE {   ?c a :country .   ?c :name \"Brazil\" .   ?c :population ?population .   ?c :lifeexpectancy ?lifeExpectancy . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the region and population of Angola?",
        "prompt": " Translate the following question into SPARQL: What are the region and population of Angola?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?region ?population WHERE {     ?country a :country ;             :name \"Angola\" ;             :population ?population ;             :region ?region . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What region does Angola belong to and what is its population?",
        "prompt": " Translate the following question into SPARQL: What region does Angola belong to and what is its population?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?region ?population WHERE {   ?c :name \"Angola\".   ?c :ref-countrycode ?co.   ?co :population ?population.   ?co :region ?region. }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "prompt": " Translate the following question into SPARQL: What is the average expected life expectancy for countries in the region of Central Africa?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?lifeExpectancy) as ?averageLifeExpectancy WHERE {      ?country a :country .     ?country :lifeexpectancy ?lifeExpectancy .     ?country :region \"Central Africa\" . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "prompt": " Translate the following question into SPARQL: How long is the people\u2019s average life expectancy in Central Africa?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?lifeexpectancy) AS ?averageLifeExpectancy WHERE {   ?country a :country .   ?country :name \"Central Africa\" .   ?country :lifeexpectancy ?lifeexpectancy . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the name of country that has the shortest life expectancy in Asia?",
        "prompt": " Translate the following question into SPARQL: What is the name of country that has the shortest life expectancy in Asia?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?country rdf:type :country .   ?country :lifeexpectancy ?lifeExp .   ?country :name ?name .   ?country :continent \"Asia\" .   FILTER NOT EXISTS {     ?otherCountry rdf:type :country .     ?otherCountry :lifeexpectancy ?otherLifeExp .     ?otherCountry :continent \"Asia\" .     FILTER (?otherLifeExp < ?lifeExp)   } } ORDER BY ASC(?lifeExp) LIMIT 1"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the name of the country in Asia with the lowest life expectancy.",
        "prompt": " Translate the following question into SPARQL: Give the name of the country in Asia with the lowest life expectancy.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name  WHERE {   ?c a :country .   ?c :lifeexpectancy ?le .   ?c :name ?name .   FILTER(?le = (SELECT MIN(?min_le)                  WHERE {                    ?c a :country .                    ?c :lifeexpectancy ?min_le .                    FILTER(?min_le != -1)                    FILTER(?c :continent :Asia)                  })         ) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the total population and maximum GNP in Asia?",
        "prompt": " Translate the following question into SPARQL: What is the total population and maximum GNP in Asia?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (SUM(?pop) as ?totalPopulation) (MAX(?gnp) as ?maxGNP) WHERE {     ?c a :country .     ?c :continent \"Asia\" .     ?c :population ?pop .     ?c :gnp ?gnp . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many people live in Asia, and what is the largest GNP among them?",
        "prompt": " Translate the following question into SPARQL: How many people live in Asia, and what is the largest GNP among them?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?person) AS ?population) (MAX(?gnp) AS ?largestGNP) WHERE {   ?country :code2 \"AS\" .         # select Asia by country code   ?city :ref-countrycode ?country .   ?person :city ?city .          # count number of people living in Asia      ?country :gnp ?gnp .           # select GNP for each country in Asia }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the average life expectancy in African countries that are republics?",
        "prompt": " Translate the following question into SPARQL: What is the average life expectancy in African countries that are republics?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?lifeExpectancy) AS ?averageLifeExpectancy WHERE {   ?country a :country .   ?country :governmentform \"Republic\" .   ?country :continent \"Africa\" .   ?country :lifeexpectancy ?lifeExpectancy . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the average life expectancy for countries in Africa which are republics?",
        "prompt": " Translate the following question into SPARQL: Give the average life expectancy for countries in Africa which are republics?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?lifeExpectancy) AS ?avgLifeExpectancy WHERE {   ?country a :country ;            :continent \"Africa\" ;            :governmentform \"Republic\" ;            :lifeexpectancy ?lifeExpectancy . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the total surface area of the continents Asia and Europe?",
        "prompt": " Translate the following question into SPARQL: What is the total surface area of the continents Asia and Europe?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (SUM(?surface_area) as ?total_surface_area) WHERE {   ?continent1 a :Continent ;               :hasName \"Asia\" .   ?continent2 a :Continent ;               :hasName \"Europe\" .   ?country1 :isLocatedIn ?continent1 ;             :hasSurfaceArea ?surface_area1 .   ?country2 :isLocatedIn ?continent2 ;             :hasSurfaceArea ?surface_area2 .   BIND(?surface_area1 + ?surface_area2 AS ?surface_area) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the total surface area covered by countries in Asia or Europe.",
        "prompt": " Translate the following question into SPARQL: Give the total surface area covered by countries in Asia or Europe.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (SUM(?surfaceArea) AS ?totalSurfaceArea) WHERE {   ?country a :country .   ?country :continent ?continent .   FILTER (?continent IN (:Asia, :Europe))   ?country :surfacearea ?surfaceArea . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many people live in Gelderland district?",
        "prompt": " Translate the following question into SPARQL: How many people live in Gelderland district?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (SUM(?population) AS ?totalPopulation) WHERE {   ?city a :city .   ?city :district \"Gelderland\" .   ?city :population ?population . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the total population of Gelderland district?",
        "prompt": " Translate the following question into SPARQL: What is the total population of Gelderland district?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (SUM(?population) AS ?totalPopulation) WHERE {   ?city :district \"Gelderland\" .   ?city :population ?population . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the average GNP and total population in all nations whose government is US territory?",
        "prompt": " Translate the following question into SPARQL: What is the average GNP and total population in all nations whose government is US territory?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?gnp) AS ?average_gnp, SUM(?population) AS ?total_population  WHERE {   ?c a :country .   ?c :governmentform \"US territory\" .   ?c :gnp ?gnp .   ?c :population ?population . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the mean GNP and total population of nations which are considered US territory.",
        "prompt": " Translate the following question into SPARQL: Give the mean GNP and total population of nations which are considered US territory.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?gnp) AS ?meanGNP, SUM(?population) AS ?totalPopulation WHERE {   ?country a :country ;            :code2 \"US\" ;            :gnp ?gnp ;            :population ?population . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many unique languages are spoken in the world?",
        "prompt": " Translate the following question into SPARQL: How many unique languages are spoken in the world?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (count(distinct ?language) as ?numLanguages) WHERE {   ?lang countrylanguage#language ?language . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the number of distinct languages used around the world?",
        "prompt": " Translate the following question into SPARQL: What is the number of distinct languages used around the world?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?language) AS ?distinctLanguages) WHERE {     ?language a :countrylanguage . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many type of governments are in Africa?",
        "prompt": " Translate the following question into SPARQL: How many type of governments are in Africa?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?government) AS ?num_of_govs)  WHERE {   ?country a :country .   ?country :governmentform ?government .   FILTER(regex(?country, \"Africa\")) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many different forms of governments are there in Africa?",
        "prompt": " Translate the following question into SPARQL: How many different forms of governments are there in Africa?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?governmentForm) AS ?numGovernmentForms) WHERE {   ?country a :country ;            :governmentform ?governmentForm .   FILTER regex(?country, \"Africa\", \"i\") }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the total number of languages used in Aruba?",
        "prompt": " Translate the following question into SPARQL: What is the total number of languages used in Aruba?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?language) as ?total_languages) WHERE {     ?language a :countrylanguage;               :countrycode \"ABW\". }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many languages are spoken in Aruba?",
        "prompt": " Translate the following question into SPARQL: How many languages are spoken in Aruba?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(DISTINCT ?language) WHERE {   ?country a :country;            :name \"Aruba\";            :code ?code.   ?countrylanguage a :countrylanguage;                     :countrycode ?code;                     :isofficial true;                     :language ?language. }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many official languages does Afghanistan have?",
        "prompt": " Translate the following question into SPARQL: How many official languages does Afghanistan have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(*) as ?langCount) WHERE {   ?country a :country .   ?country :name \"Afghanistan\" .   ?lang a :countrylanguage .   ?lang :countrycode ?country .   ?lang :isofficial true . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many official languages are spoken in Afghanistan?",
        "prompt": " Translate the following question into SPARQL: How many official languages are spoken in Afghanistan?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?language) AS ?numLanguages) WHERE {    ?languageObj a :countrylanguage .    ?languageObj :countrycode ?countryCode .    FILTER (?countryCode = \"AFG\") .    ?languageObj :isofficial true . } "
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is name of the country that speaks the largest number of languages?",
        "prompt": " Translate the following question into SPARQL: What is name of the country that speaks the largest number of languages?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName  WHERE {   ?country a :country .   ?country :name ?countryName .   {     SELECT (COUNT(DISTINCT ?language) AS ?numLanguages) ?countryCode     WHERE {       ?language a :countrylanguage .       ?language :countrycode ?countryCode .     }     GROUP BY ?countryCode     ORDER BY DESC(?numLanguages)     LIMIT 1   }   ?country :code ?countryCode . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the name of the nation that uses the greatest amount of languages.",
        "prompt": " Translate the following question into SPARQL: Give the name of the nation that uses the greatest amount of languages.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?nationName WHERE {   {     SELECT ?countryCode (COUNT(?language) AS ?languageCount)     WHERE {       ?languageOnCountry countrylanguage#countrycode ?countryCode ;                          countrylanguage#language ?language .     }     GROUP BY ?countryCode     ORDER BY DESC(?languageCount)     LIMIT 1   }   ?nation :country#code ?countryCode ;          :country#name ?nationName . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which continent has the most diverse languages?",
        "prompt": " Translate the following question into SPARQL: Which continent has the most diverse languages?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?continent (COUNT(DISTINCT ?language) AS ?numLanguages) WHERE {   ?country a :country .   ?country :continent ?continent .   ?language a :countrylanguage ;             :countrycode ?country ;             :language ?lang . }  GROUP BY ?continent ORDER BY DESC(?numLanguages) LIMIT 1"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which continent speaks the most languages?",
        "prompt": " Translate the following question into SPARQL: Which continent speaks the most languages?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?continent (COUNT(DISTINCT ?language) AS ?numLanguages) WHERE {   ?country a :country .   ?country :continent ?continent .   ?language a :countrylanguage .   ?language :countrycode ?country . }  GROUP BY ?continent ORDER BY DESC(?numLanguages) LIMIT 1"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many countries speak both English and Dutch?",
        "prompt": " Translate the following question into SPARQL: How many countries speak both English and Dutch?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?c) AS ?count) WHERE {   ?c a :country .   ?c :code ?code .   ?cl1 :countrycode ?code ;        :language \"English\" ;        :isofficial \"T\" .   ?cl2 :countrycode ?code ;        :language \"Dutch\" ;        :isofficial \"T\" . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the number of nations that use English and Dutch?",
        "prompt": " Translate the following question into SPARQL: What is the number of nations that use English and Dutch?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?country) AS ?numNations) WHERE {   ?language1 a :countrylanguage ; :language \"English\" .   ?language2 a :countrylanguage ; :language \"Dutch\" .   ?country1 a :country ; :code ?code1 ; :name ?name1 .   ?language1 :ref-countrycode ?country1 .   ?country2 a :country ; :code ?code2 ; :name ?name2 .   ?language2 :ref-countrycode ?country2 .   FILTER(?code1 = ?code2) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the names of nations speak both English and French?",
        "prompt": " Translate the following question into SPARQL: What are the names of nations speak both English and French?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?name WHERE {   ?country a :country .   ?country :name ?name .   ?language a :countrylanguage .   ?language :countrycode ?ccode .   ?language :language \"English\" .   {      { ?language :isofficial true }     UNION     { ?language :percentage \"100\"^^<http://www.w3.org/2001/XMLSchema#float> }   }   ?language2 a :countrylanguage .   ?language2 :countrycode ?ccode .   ?language2 :language \"French\" .   {     { ?language2 :isofficial true }     UNION     { ?language2 :percentage \"100\"^^<http://www.w3.org/2001/XMLSchema#float> }   } }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the names of nations that speak both English and French.",
        "prompt": " Translate the following question into SPARQL: Give the names of nations that speak both English and French.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?countryName WHERE {   ?country a :country;            :name ?countryName.      ?language1 a :countrylanguage;              :countrycode ?countryCode;              :language \"English\".                 ?language2 a :countrylanguage;              :countrycode ?countryCode;              :language \"French\".                 FILTER(?language1 != ?language2) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the names of nations where both English and French are official languages?",
        "prompt": " Translate the following question into SPARQL: What are the names of nations where both English and French are official languages?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?name WHERE {   ?c :name ?name .   ?c rdf:type :country .   ?cl :countrycode ?cc .   ?cl :language \"English\" .   ?cl :isofficial \"T\" .   ?cl2 :countrycode ?cc .   ?cl2 :language \"French\" .   ?cl2 :isofficial \"T\" . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the names of countries with English and French as official languages.",
        "prompt": " Translate the following question into SPARQL: Give the names of countries with English and French as official languages.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?countryName WHERE {   ?country a :country .   ?country :name ?countryName .   ?language a :countrylanguage .   ?language :countrycode ?country .   ?language :isofficial \"T\"^^xsd:boolean .   FILTER((?language :language \"English\") || (?language :language \"French\")) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the number of distinct continents where Chinese is spoken?",
        "prompt": " Translate the following question into SPARQL: What is the number of distinct continents where Chinese is spoken?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?continent) AS ?count_continents) WHERE {   ?country a :country .   ?country :continent ?continent .   ?language a :countrylanguage .   ?language :countrycode ?country .   FILTER(?language=:Chinese) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many continents speak Chinese?",
        "prompt": " Translate the following question into SPARQL: How many continents speak Chinese?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?continent) as ?numContinents) WHERE {     ?lang a :countrylanguage ;           :language \"Chinese\" .     ?country a :country ;              :continent ?continent ;              :code ?code .     ?lang :countrycode ?code . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the regions that use English or Dutch?",
        "prompt": " Translate the following question into SPARQL: What are the regions that use English or Dutch?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?region WHERE {   ?country :region ?region ;            (:code2 \"EN\"^^xsd:string OR :code2 \"NL\"^^xsd:string) . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which regions speak Dutch or English?",
        "prompt": " Translate the following question into SPARQL: Which regions speak Dutch or English?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?region WHERE {   ?country :region ?region .   {?country :code2 \"NL\" .} UNION {?country :code2 \"GB\" .} }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the countries where either English or Dutch is the official language ?",
        "prompt": " Translate the following question into SPARQL: What are the countries where either English or Dutch is the official language ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?countryName WHERE {   ?country a :country ;            :name ?countryName .   {     ?countrylanguage a :countrylanguage ;                       :countrycode ?country ;                       :language \"English\" ;                       :isofficial true .   }    UNION {     ?countrylanguage a :countrylanguage ;                       :countrycode ?country ;                       :language \"Dutch\" ;                       :isofficial true .   } }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which countries have either English or Dutch as an official language?",
        "prompt": " Translate the following question into SPARQL: Which countries have either English or Dutch as an official language?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?country WHERE {   {?country countrylanguage#language \"English\"}    UNION    {?country countrylanguage#language \"Dutch\"}    FILTER EXISTS {?country countrylanguage#isofficial \"T\"} }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which language is the most popular on the Asian continent?",
        "prompt": " Translate the following question into SPARQL: Which language is the most popular on the Asian continent?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?language WHERE {   ?coun countrylanguage#language ?language .   ?coun country#continent \"Asia\" .   ?coun country#population ?pop1 .   {     SELECT (MAX(?pop2) AS ?maxpop)     WHERE {       ?coun2 country#continent \"Asia\" .       ?coun2 country#population ?pop2 .     }   }   FILTER(?pop1 = ?maxpop) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the language that is used by the largest number of Asian nations?",
        "prompt": " Translate the following question into SPARQL: What is the language that is used by the largest number of Asian nations?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?language WHERE {   ?language a :countrylanguage .   {     SELECT ?code (COUNT(?code) AS ?count)     WHERE {       ?country a :country .       ?country :code ?code .       ?city a :city .       ?city :countrycode ?code .     }     GROUP BY ?code     ORDER BY DESC(?count)     LIMIT 1   }   ?country a :country .   ?country :code ?largest_code .   ?language :countrycode ?largest_code .   FILTER (regex(?language,\"Asian\",\"i\")) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which languages are spoken by only one country in republic governments?",
        "prompt": " Translate the following question into SPARQL: Which languages are spoken by only one country in republic governments?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?language WHERE {   ?country a :country .   ?language a :countrylanguage .   ?language :countrycode ?country .   ?country :governmentform \"Republic\" .   {     SELECT ?language (COUNT(DISTINCT ?country2) AS ?count) WHERE {       ?country2 a :country .       ?language a :countrylanguage .       ?language :countrycode ?country2 .       ?country2 :governmentform \"Republic\" .       FILTER(?country != ?country2)     } GROUP BY ?language   } FILTER(?count = 1) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What languages are only used by a single country with a republic government?",
        "prompt": " Translate the following question into SPARQL: What languages are only used by a single country with a republic government?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?language WHERE {   ?country a :country ;            :governmentform \"Republic\" ;            :name ?name ;            :code ?code .   ?language :countrycode ?code ;             :language ?language ;             :isofficial \"T\"^^xsd:boolean .   FILTER NOT EXISTS {     ?otherCountry a :country ;                   :governmentform \"Republic\" ;                   :code ?otherCode .     FILTER (?code != ?otherCode)     ?language :countrycode ?otherCode ;               :isofficial \"T\"^^xsd:boolean .   } }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Find the city with the largest population that uses English.",
        "prompt": " Translate the following question into SPARQL: Find the city with the largest population that uses English.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?city WHERE {   ?lang :language \"English\" .   ?city :population ?pop1 ;         :countrycode ?countrycode .   ?country :code ?countrycode ;             :population ?pop2 .   FILTER(?pop1 >= ?pop2)   FILTER EXISTS { ?countrylanguage :isofficial true ;                               :language \"English\" ;                               :countrycode ?countrycode .} } ORDER BY DESC(?pop1) LIMIT 1 "
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the most populace city that speaks English?",
        "prompt": " Translate the following question into SPARQL: What is the most populace city that speaks English?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?cityName WHERE {   ?city a :city ;         :population ?pop ;         :countrycode ?ccode .   ?country a :country ;             :name ?countryName ;             :code ?ccode ;             :population ?cPop .   ?cl a :countrylanguage ;       :countrycode ?ccode ;       :language \"English\" ;       :percentage ?clPercent .   FILTER(?clPercent > 50)   FILTER(?pop/max(?cPop) = ?cityPop)   BIND(?city AS ?cityName) } ORDER BY DESC(?pop) LIMIT 1   Explanation:   - We select the variable ?cityName to display the name of the most populous city that speaks English. - We first match all instances of :city, and retrieve their population and country code properties. - We then match all instances of :country, and retrieve their name, code, and population properties. - We also match all instances of :countrylanguage and check if the language is English, the percentage of speakers is greater than 50%, and if the language is official in the country. - We filter the results to only include cities where the population divided by the maximum country population is equal to the population percentage of the given city. - We then bind ?city as ?cityName and order the results by the population of each city in descending order. - Finally, we limit the results to 1, which is the most populous city that speaks English."
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Find the name, population and expected life length of asian country with the largest area?",
        "prompt": " Translate the following question into SPARQL: Find the name, population and expected life length of asian country with the largest area?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?population ?lifeLength WHERE {   ?country a :country .   ?country :continent \"Asia\" .   ?country :surfacearea ?area .   ?country :name ?name .   ?country :population ?population .   ?country :lifeexpectancy ?lifeLength .      FILTER NOT EXISTS {     ?otherCountry a :country .     ?otherCountry :continent \"Asia\" .     ?otherCountry :surfacearea ?otherArea .     FILTER(?area < ?otherArea)   } } ORDER BY DESC(?area) LIMIT 1"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "prompt": " Translate the following question into SPARQL: What are the name, population, and life expectancy of the largest Asian country by land?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?population ?lifeExpectancy WHERE {   ?country a :country .   ?country :name ?name .   ?country :population ?population .   ?country :lifeexpectancy ?lifeExpectancy .   ?country :continent \"Asia\" .   ?country :surfacearea ?area .   FILTER NOT EXISTS {     ?otherCountry a :country .     ?otherCountry :continent \"Asia\" .     ?otherCountry :surfacearea ?otherArea .     FILTER (?otherArea > ?area)   } } ORDER BY DESC(?population) LIMIT 1"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is average life expectancy in the countries where English is not the official language?",
        "prompt": " Translate the following question into SPARQL: What is average life expectancy in the countries where English is not the official language?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?lifeExp) AS ?avgLifeExp WHERE {     ?c a :country .     FILTER NOT EXISTS { ?c :nameEnglish ?nameEnglish }     ?c :lifeexpectancy ?lifeExp . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the mean life expectancy of countries in which English is not the official language.",
        "prompt": " Translate the following question into SPARQL: Give the mean life expectancy of countries in which English is not the official language.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?lifeExpectancy) AS ?meanLifeExpectancy WHERE {   ?language countrylanguage#isofficial \"false\" .   ?language countrylanguage#countrycode ?countryCode .   ?country country#code ?countryCode .   ?country country#lifeexpectancy ?lifeExpectancy .   FILTER(langMatches(lang(?lifeExpectancy), \"en\")) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the total number of people living in the nations that do not use English?",
        "prompt": " Translate the following question into SPARQL: What is the total number of people living in the nations that do not use English?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?person) AS ?totalPeopleNotUsingEnglish WHERE {   ?person :livesIn ?country .   ?country :code ?countryCode .   FILTER NOT EXISTS {     ?lang :countrycode ?countryCode .     FILTER (?lang :language \"English\")   } }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many people live in countries that do not speak English?",
        "prompt": " Translate the following question into SPARQL: How many people live in countries that do not speak English?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT DISTINCT(?person) WHERE {   ?country a :country .   ?country :language ?language .   FILTER(?language != \"English\") .      ?city a :city .   ?city :ref-countrycode ?country .   ?city :population ?population .      ?person a :person .   ?person :livesIn ?city . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "prompt": " Translate the following question into SPARQL: What is the official language spoken in the country whose head of state is Beatrix?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?language  WHERE {   ?country :headofstate \"Beatrix\" .   ?country countrylanguage:isofficial \"T\" .   ?country countrylanguage:language ?language . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "prompt": " Translate the following question into SPARQL: What is the official language used in the country the name of whose head of state is Beatrix.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?language WHERE {   ?country :headofstate \"Beatrix\".   ?country countrylanguage:isofficial \"T\".   ?countrylanguage countrylanguage:language ?language. }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "prompt": " Translate the following question into SPARQL: What is the total number of unique official languages spoken in the countries that are founded before 1930?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?language) AS ?totalLanguages) WHERE {   ?c :name ?countryName .   ?c :indepyear ?year .   ?l :countrycode ?countryCode .   ?l :language ?language .   ?l :isofficial true .   FILTER(?year < 1930) } GROUP BY ?countryCode HAVING (COUNT(DISTINCT ?language) > 0)"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "prompt": " Translate the following question into SPARQL: For the countries founded before 1930, what is the total number of distinct official languages?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?language) AS ?num_languages) WHERE {   ?country a :country .   ?country :indepyear ?year .   FILTER (?year < 1930)   ?language a :countrylanguage .   ?language :countrycode ?country .   ?language :isofficial true . } "
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the countries that have greater surface area than any country in Europe?",
        "prompt": " Translate the following question into SPARQL: What are the countries that have greater surface area than any country in Europe?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?country_name WHERE {   ?country :surfacearea ?surface_area .   FILTER (?surface_area > (SELECT MAX(?european_surface_area) WHERE {     ?european_country :continent \"Europe\" ;                       :surfacearea ?european_surface_area .   }))   ?country :name ?country_name . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which countries have greater area than that of any country in Europe?",
        "prompt": " Translate the following question into SPARQL: Which countries have greater area than that of any country in Europe?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?countryName WHERE {   ?country a :country .   ?country :surfacearea ?area .   FILTER(?area > (SELECT MAX(?europeArea) WHERE {     ?europe a :country .     ?europe :name \"Europe\" .     ?europe :surfacearea ?europeArea .   }))   ?country :name ?countryName . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the African countries that have a  population less than any country in Asia?",
        "prompt": " Translate the following question into SPARQL: What are the African countries that have a  population less than any country in Asia?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName  WHERE {   ?country a :country ;             :name ?countryName ;             :population ?pop ;             :continent \"Africa\" .   FILTER (?pop < (SELECT MIN(?pop)                    WHERE {                     ?asiaCountry a :country ;                                  :population ?pop ;                                  :continent \"Asia\" .                   })) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which African countries have a smaller population than that of any country in Asia?",
        "prompt": " Translate the following question into SPARQL: Which African countries have a smaller population than that of any country in Asia?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?country WHERE {   ?africaCountry a :country ;                   :continent \"Africa\" ;                   :population ?africaPop .      FILTER NOT EXISTS {     ?asiaCountry a :country ;                   :continent \"Asia\" ;                   :population ?asiaPop .     FILTER(?asiaPop < ?africaPop)   }   FILTER NOT EXISTS {     ?country a :country ;              :population ?pop ;              :continent \"Africa\" ;              FILTER(?pop >= ?africaPop)   } }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which Asian countries have a population that is larger than any country in Africa?",
        "prompt": " Translate the following question into SPARQL: Which Asian countries have a population that is larger than any country in Africa?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName WHERE {   ?country a :country ;            :population ?pop ;            :continent \"Asia\" .   FILTER (?pop > (SELECT MAX(?pop2)                    WHERE {                       ?country2 a :country ;                                :population ?pop2 ;                                :continent \"Africa\" .}))   BIND(?country AS ?c1)   BIND(?country2 AS ?c2)   FILTER (?c1 != ?c2)   ?country :name ?countryName }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "prompt": " Translate the following question into SPARQL: What are the Asian countries which have a population larger than that of any country in Africa?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName WHERE {   ?country a :country ;            :name ?countryName ;            :population ?population ;            :continent \"Asia\" .      FILTER(?population >      (SELECT (MAX(?africanPopulation) as ?maxPopulation)       WHERE {         ?africanCountry a :country ;                          :population ?africanPopulation ;                          :continent \"Africa\" .             })) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the country codes for countries that do not speak English?",
        "prompt": " Translate the following question into SPARQL: What are the country codes for countries that do not speak English?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?code WHERE {   ?c a :country .   FILTER NOT EXISTS { ?cl a :countrylanguage ; :language \"English\" ; :ref-countrycode ?c }   ?c :code ?code  }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Return the country codes for countries that do not speak English.",
        "prompt": " Translate the following question into SPARQL: Return the country codes for countries that do not speak English.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryCode WHERE {   ?country a :country .   FILTER NOT EXISTS {     ?countrylanguage a :countrylanguage ;                       :ref-countrycode ?country ;                       :language \"English\" .   }   ?country :code ?countryCode . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the country codes of countries where people use languages other than English?",
        "prompt": " Translate the following question into SPARQL: What are the country codes of countries where people use languages other than English?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?countryCode  WHERE {   ?cl :isofficial \"true\" ;   :language ?language ;   :countrycode ?countryCode .   FILTER(?language != \"English\") . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the country codes for countries in which people speak langauges that are not English.",
        "prompt": " Translate the following question into SPARQL: Give the country codes for countries in which people speak langauges that are not English.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?countryCode WHERE {   ?country a :country .   FILTER NOT EXISTS { ?countrylanguage a :countrylanguage .                        ?countrylanguage :ref-countrycode ?country .                        ?countrylanguage :language \"English\" . }   ?country :code ?countryCode . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "prompt": " Translate the following question into SPARQL: What are the codes of the countries that do not speak English and whose government forms are not Republic?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?code  WHERE {   ?country a :country .   ?country :code ?code .   ?country :governmentform ?form .   ?country :code2 ?code2 .   FILTER (LANGMATCHES(LANG(?form), \"EN\") = 0) .   FILTER(?form != \"Republic\") .   FILTER NOT EXISTS {     ?language a :countrylanguage .     ?language :countrycode ?code2 .     ?language :isofficial true .     ?language :language \"en\" .   } . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "prompt": " Translate the following question into SPARQL: Return the codes of countries that do not speak English and do not have Republics for governments.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?code WHERE {   ?c a :country .   ?c :governmentform ?gov .   FILTER NOT EXISTS { ?c :language \"English\" }   FILTER NOT EXISTS { ?gov rdf:type :Republic }   ?c :code ?code . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which cities are in European countries where English is not the official language?",
        "prompt": " Translate the following question into SPARQL: Which cities are in European countries where English is not the official language?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?cityName WHERE {   ?city a :city .   ?city :countrycode ?countryCode .   ?country a :country .   ?country :code ?countryCode .   ?country :continent \"Europe\" .   ?countryLanguage a :countrylanguage .   ?countryLanguage :countrycode ?countryCode .   ?countryLanguage :isofficial false .   ?countryLanguage :language \"English\" .   ?city :name ?cityName . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the names of cities in Europe for which English is not the official language?",
        "prompt": " Translate the following question into SPARQL: What are the names of cities in Europe for which English is not the official language?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?cityName WHERE {   ?city a :city .   ?city :name ?cityName .   ?city :countrycode ?ccode .   ?cl :countrylanguage .   ?cl :countrycode ?ccode .   ?cl :language ?lang .   FILTER(?lang != \"English\")   ?c :country .   ?c :name ?name .   ?c :continent \"Europe\" . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "prompt": " Translate the following question into SPARQL: Which unique cities are in Asian countries where Chinese is the official language ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?cityName WHERE {   ?city :name ?cityName .   ?city :countrycode ?countryCode .   ?country :code ?countryCode .   ?country :continent \"Asia\" .   ?language :countrycode ?countryCode .   ?language :language \"Chinese\" .   ?language :isofficial \"T\" .   FILTER(lang(?cityName) = \"en\") }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "prompt": " Translate the following question into SPARQL: Return the different names of cities that are in Asia and for which Chinese is the official language.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?cityName WHERE {   ?country :code ?countryCode .   FILTER regex(?countryCode, \"^CN\")   ?city :ref-countrycode ?country .   FILTER regex(?country:continent, \"^Asia\")   ?countryLanguage :ref-countrycode ?country .   ?countryLanguage :isofficial true .   FILTER regex(?countryLanguage:language, \"^zh\")   ?city :name ?cityName . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "prompt": " Translate the following question into SPARQL: What are the name, independence year, and surface area of the country with the smallest population?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?indepyear ?surfacearea  WHERE {    ?country a :country ;            :name ?name ;            :indepyear ?indepyear ;            :surfacearea ?surfacearea ;            :population ?population .   FILTER NOT EXISTS {                       ?otherCountry :population ?otherPopulation .                      FILTER (?otherPopulation < ?population)                       ?otherCountry a :country .                      } }  LIMIT 1"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "prompt": " Translate the following question into SPARQL: Give the name, year of independence, and surface area of the country that has the lowest population.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX: <http://valuenet/ontop/>  SELECT ?name ?year ?surfaceArea WHERE {    ?c a :country.    ?c :name ?name.    ?c :indepyear ?year.    ?c :surfacearea ?surfaceArea.    ?c :population ?pop.    FILTER NOT EXISTS {?cc :countrycode ?ccode. ?cc :population ?p. FILTER (?p < ?pop)} } ORDER BY ASC(?pop) LIMIT 1."
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the population, name and leader of the country with the largest area?",
        "prompt": " Translate the following question into SPARQL: What are the population, name and leader of the country with the largest area?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?population ?name ?leader WHERE {   ?c a :country .   ?c :name ?name .   ?c :leader ?leader .   ?c :population ?population .   ?c :surfacearea ?surfacearea .   FILTER(?surfacearea = (SELECT MAX(?a) WHERE {?c2 :surfacearea ?a})) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the name, population, and head of state for the country that has the largest area.",
        "prompt": " Translate the following question into SPARQL: Give the name, population, and head of state for the country that has the largest area.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?population ?headOfState  WHERE {   ?country a :country ;            :name ?name ;            :population ?population ;            :headofstate ?headOfState ;            :surfacearea ?area .   FILTER NOT EXISTS {     ?otherCountry a :country ;                    :surfacearea ?otherArea .     FILTER (?otherArea > ?area)   } } LIMIT 1"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "prompt": " Translate the following question into SPARQL: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName (COUNT(DISTINCT ?language) AS ?numLanguages) WHERE {   ?country a :country .   ?country :name ?countryName .   ?language a :countrylanguage .   ?language :countrycode ?country . } GROUP BY ?countryName HAVING (COUNT(DISTINCT ?language) >= 3)"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "prompt": " Translate the following question into SPARQL: What are the names of countries that speak more than 2 languages, as well as how many languages they speak?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?country_name ?num_languages  WHERE {   ?c a :country .   ?c :name ?country_name .   {     SELECT ?country_code (COUNT(?language) AS ?num_languages)     WHERE {       ?cl a :countrylanguage .       ?cl :countrycode ?country_code .       ?cl :language ?language .     }     GROUP BY ?country_code      HAVING (COUNT(?language) > 2)   }   FILTER (?c :code = ?country_code) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "prompt": " Translate the following question into SPARQL: Find the number of cities in each district whose population is greater than the average population of cities?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?district (COUNT(?city) AS ?numCities) WHERE {   ?city :population ?pop .   ?city :district ?district .   {     SELECT (AVG(?pop) AS ?avgPop)     WHERE {       ?city :population ?pop .     }   }   FILTER(?pop > ?avgPop) } GROUP BY ?district"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "How many cities in each district have a population that is above the average population across all cities?",
        "prompt": " Translate the following question into SPARQL: How many cities in each district have a population that is above the average population across all cities?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?district (COUNT(*) as ?numCities) WHERE {   ?city a :city .   ?city :population ?cityPop .   ?city :district ?district .      {     SELECT AVG(?pop) as ?avgPop     WHERE {       ?city a :city .       ?city :population ?pop .     }   }      FILTER(?cityPop > ?avgPop) . } GROUP BY ?district"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "prompt": " Translate the following question into SPARQL: Find the government form name and total population for each government form whose average life expectancy is longer than 72.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?govFormName (SUM(?population) AS ?totalPopulation) WHERE {   ?c a :country ;      :governmentform ?govFormName ;      :lifeexpectancy ?lifeExpectancy ;      :population ?population .         FILTER (?lifeExpectancy > 72) } GROUP BY ?govFormName"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "prompt": " Translate the following question into SPARQL: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?form (SUM(?pop) AS ?totalPopulation) WHERE {   ?c a :country ;      :governmentform ?form ;      :lifeexpectancy ?expectancy ;      :population ?pop .   FILTER (?expectancy > 72) } GROUP BY ?form"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "prompt": " Translate the following question into SPARQL: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?continent (AVG(?lifeExpectancy) AS ?avgLifeExpectancy) (SUM(?population) AS ?totalPopulation) WHERE {   ?c :continent ?continent .   ?c :lifeexpectancy ?lifeExpectancy .   ?c :population ?population .      FILTER (?lifeExpectancy < 72) } GROUP BY ?continent"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "prompt": " Translate the following question into SPARQL: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?continent (SUM(?population) as ?total_population) (AVG(?life_expectancy) as ?average_life_expectancy) WHERE{   ?c a :country.   ?c :continent ?continent.   ?c :lifeexpectancy ?life_expectancy.   ?c :population ?population.   FILTER(?life_expectancy < 72) } GROUP BY ?continent."
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the names and areas of countries with the top 5 largest area?",
        "prompt": " Translate the following question into SPARQL: What are the names and areas of countries with the top 5 largest area?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?area WHERE {   ?country a :country .   ?country :name ?name .   ?country :surfacearea ?area . } ORDER BY DESC(?area) LIMIT 5"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Return the names and surface areas of the 5 largest countries.",
        "prompt": " Translate the following question into SPARQL: Return the names and surface areas of the 5 largest countries.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?surfaceArea  WHERE {   ?country a :country .   ?country :name ?name .   ?country :surfacearea ?surfaceArea . } ORDER BY DESC(?surfaceArea) LIMIT 5"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are names of countries with the top 3 largest population?",
        "prompt": " Translate the following question into SPARQL: What are names of countries with the top 3 largest population?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName WHERE {   ?country a :country .   ?country :name ?countryName .   FILTER NOT EXISTS {     ?otherCountry a :country .     ?otherCountry :population ?otherPopulation .     FILTER(?otherPopulation > ?countryPopulation)   }   ?country :population ?countryPopulation . } ORDER BY DESC(?countryPopulation) LIMIT 3."
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Return the names of the 3 most populated countries.",
        "prompt": " Translate the following question into SPARQL: Return the names of the 3 most populated countries.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?country :name ?name ;            :population ?population . } ORDER BY DESC(?population) LIMIT 3"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the names of the nations with the 3 lowest populations?",
        "prompt": " Translate the following question into SPARQL: What are the names of the nations with the 3 lowest populations?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?country a :country ;            :name ?name ;            :population ?pop .   FILTER NOT EXISTS {     ?temp_country a :country ;                   :population ?temp_pop .     FILTER (?temp_pop < ?pop)   } } ORDER BY ASC(?pop) LIMIT 3"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Return the names of the 3 countries with the fewest people.",
        "prompt": " Translate the following question into SPARQL: Return the names of the 3 countries with the fewest people.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?countryName (SUM(?pop) AS ?totalPop) WHERE {   ?country a :country .   ?country :name ?countryName .   ?country :population ?pop . }  GROUP BY ?countryName ORDER BY ASC(?totalPop) LIMIT 3"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "how many countries are in Asia?",
        "prompt": " Translate the following question into SPARQL: how many countries are in Asia?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(?country) WHERE {   ?country :continent \"Asia\" . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Count the number of countries in Asia.",
        "prompt": " Translate the following question into SPARQL: Count the number of countries in Asia.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?country) as ?numCountries) WHERE {   ?country a :country .   ?country :continent \"Asia\" . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "prompt": " Translate the following question into SPARQL: What are the names of the countries that are in the continent of Europe and have a population of 80000?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName WHERE {   ?country a :country ;            :name ?countryName ;            :continent \"Europe\" ;            :population \"80000\" . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "prompt": " Translate the following question into SPARQL: Give the names of countries that are in Europe and have a population equal to 80000.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?c a :country .   ?c :name ?name .   ?c :population 80000 .   ?c :continent \"Europe\" . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "prompt": " Translate the following question into SPARQL: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (SUM(?pop) AS ?totalPopulation) (AVG(?area) AS ?averageArea) WHERE {   ?c a :country.   ?c :continent \"North America\".   ?c :surfacearea ?area.   ?c :population ?pop.   FILTER(?area > 3000) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "prompt": " Translate the following question into SPARQL: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (SUM(?pop) as ?totalPop) (AVG(?sArea) as ?avgArea) WHERE {   ?c a :country;      :population ?pop;      :surfacearea ?sArea;      :continent \"North America\";      FILTER(?sArea > 3000) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the cities whose population is between 160000 and 900000?",
        "prompt": " Translate the following question into SPARQL: What are the cities whose population is between 160000 and 900000?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?cityname  WHERE {   ?city a :city .   ?city :population ?pop .   ?city :name ?cityname .   FILTER(?pop >= 160000 && ?pop <= 900000) . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Return the names of cities that have a population between 160000 and 900000 .",
        "prompt": " Translate the following question into SPARQL: Return the names of cities that have a population between 160000 and 900000 .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?cityName WHERE {   ?city a :city ;         :name ?cityName ;         :population ?pop .   FILTER (?pop >= 160000 && ?pop <= 900000) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Which language is spoken by the largest number of countries?",
        "prompt": " Translate the following question into SPARQL: Which language is spoken by the largest number of countries?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?language  WHERE {   ?language a :countrylanguage .   {     SELECT (COUNT(DISTINCT ?country) AS ?max)      WHERE {       ?country a :country .       ?country :population ?population .       ?language :countrycode ?country .     }     ORDER BY DESC(?max) LIMIT 1   }   ?maxLanguage :countrycode ?maxCountry.   ?maxLanguage :language ?language . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Give the language that is spoken in the most countries.",
        "prompt": " Translate the following question into SPARQL: Give the language that is spoken in the most countries.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?language  WHERE {     {         SELECT ?languageCode (COUNT(DISTINCT ?country) as ?numCountries)         WHERE {             ?language a :countrylanguage .             ?language :countrycode ?languageCode .             ?countryLanguage :isofficial \"T\" .             ?country :code ?countryCode .             ?countryLanguage :ref-countrycode ?countryCode .             ?country :continent \"Africa\" .         }         GROUP BY ?languageCode          ORDER BY DESC(?numCountries)         LIMIT 1     }     ?language a :language .     ?language :code ?languageCode . }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the language spoken by the largest percentage of people in each country?",
        "prompt": " Translate the following question into SPARQL: What is the language spoken by the largest percentage of people in each country?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?countryName ?language WHERE {   {?country :name ?countryName .}   {?country :code ?countryCode .}   {?languageRow :countrycode ?countryCode .     ?languageRow :percentage ?percentage .    ?languageRow :language ?language .}   {SELECT ?countryCode (MAX(?per) AS ?maxper)    WHERE {?l :countrycode ?countryCode .            ?l :percentage ?per .           }    GROUP BY ?countryCode   }   FILTER(?percentage = ?maxper) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "prompt": " Translate the following question into SPARQL: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?countryCode ?language  WHERE {    ?country a :country .   ?country :code ?countryCode .   ?countrylanguage :ref-countrycode ?countryCode .   {     SELECT ?countryCode (MAX(?percentage) as ?maxPercentage)     WHERE {       ?countrylanguage :ref-countrycode ?countryCode .       ?countrylanguage :percentage ?percentage .     }     GROUP BY ?countryCode   }   ?countrylanguage :percentage ?maxPercentage .   ?countrylanguage :language ?language . } ORDER BY ?countryCode"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "prompt": " Translate the following question into SPARQL: What is the total number of countries where Spanish is spoken by the largest percentage of people?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?country) AS ?count) WHERE {    ?language a :countrylanguage ;              :language \"Spanish\" .    ?language :percentage ?percentage .    {       SELECT ?country (MAX(?percentage) AS ?maxPercentage)       WHERE {          ?language :countrycode ?country ;                    :percentage ?percentage .       } GROUP BY ?country    }    FILTER(?percentage = ?maxPercentage) }"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "prompt": " Translate the following question into SPARQL: Count the number of countries for which Spanish is the predominantly spoken language.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?c) AS ?count) WHERE {?c a :country.        ?cl :ref-countrycode ?c.        ?cl :isofficial true.        ?cl :language \"Spanish\"} GROUP BY ?c HAVING (SUM(?clpercentage) >= 50)"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "prompt": " Translate the following question into SPARQL: What are the codes of countries where Spanish is spoken by the largest percentage of people?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?code WHERE {     ?c a :country .      ?c :code ?code.      ?cl a :countrylanguage .      ?cl :countrycode ?code .      ?cl :language \"Spanish\" .      ?c :population ?pop.      {         SELECT ?c (MAX(?p) AS ?maxPop)         WHERE {               ?c :population ?p.                ?cl a :countrylanguage .                ?cl :countrycode ?c .                ?cl :language \"Spanish\" .         }         GROUP BY ?c     }     FILTER (?pop = ?maxPop) }   ORDER BY ?code```"
    },
    {
        "db_id": "world_1",
        "natural_language_question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "prompt": " Translate the following question into SPARQL: Return the codes of countries for which Spanish is the predominantly spoken language.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['city', 'country', 'countrylanguage'], 'object_properties': ['city#ref-countrycode', 'countrylanguage#ref-countrycode'], 'data_properties': ['city#countrycode', 'city#district', 'city#id', 'city#name', 'city#population', 'country#capital', 'country#code', 'country#code2', 'country#continent', 'country#gnp', 'country#gnpold', 'country#governmentform', 'country#headofstate', 'country#indepyear', 'country#lifeexpectancy', 'country#localname', 'country#name', 'country#population', 'country#region', 'country#surfacearea', 'countrylanguage#countrycode', 'countrylanguage#isofficial', 'countrylanguage#language', 'countrylanguage#percentage']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?countryCode WHERE {   ?country a :country .   ?country :code ?countryCode .   ?language a :countrylanguage .   ?language :countrycode ?countryCode .   ?language :language \"Spanish\" .   ?language :percentage ?percentage .   FILTER(?percentage > 50) }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "How many conductors are there?",
        "prompt": " Translate the following question into SPARQL: How many conductors are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "SELECT (COUNT(?conductor) AS ?countConductors) WHERE {   ?conductor a :conductor . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Count the number of conductors.",
        "prompt": " Translate the following question into SPARQL: Count the number of conductors.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "SELECT COUNT(?conductor)  WHERE {   ?conductor a :conductor . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "List the names of conductors in ascending order of age.",
        "prompt": " Translate the following question into SPARQL: List the names of conductors in ascending order of age.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE { \t?conductor a :conductor ; \t\t\t   :name ?name ; \t\t\t   :age ?age . } ORDER BY ASC(?age)"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the names of conductors, ordered by age?",
        "prompt": " Translate the following question into SPARQL: What are the names of conductors, ordered by age?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?conductor a :conductor .   ?conductor :name ?name .   ?conductor :age ?age . } ORDER BY ASC(?age)"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the names of conductors whose nationalities are not 'USA'?",
        "prompt": " Translate the following question into SPARQL: What are the names of conductors whose nationalities are not 'USA'?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?conductorName WHERE {   ?conductor :nationality ?nationality .   FILTER (?nationality != \"USA\") .   ?conductor :name ?conductorName .   FILTER (regex(str(?conductor), \"conductor\")) }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Return the names of conductors that do not have the nationality 'USA'.",
        "prompt": " Translate the following question into SPARQL: Return the names of conductors that do not have the nationality 'USA'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?conductor a :conductor .   ?conductor :name ?name .   FILTER NOT EXISTS {     ?conductor :nationality \"USA\" .   } }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "prompt": " Translate the following question into SPARQL: What are the record companies of orchestras in descending order of years in which they were founded?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?recordCompany (MAX(?year) AS ?maxYear) WHERE {   ?orchestra :orchestra ?orchestraName ;              :record_company ?recordCompany ;              :year_of_founded ?year . } GROUP BY ?recordCompany ORDER BY DESC(?maxYear)"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "prompt": " Translate the following question into SPARQL: Return the record companies of orchestras, sorted descending by the years in which they were founded.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?record_company WHERE {   ?orchestra a :orchestra .   ?orchestra :record_company ?record_company . } ORDER BY DESC(?year_of_founded)"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What is the average attendance of shows?",
        "prompt": " Translate the following question into SPARQL: What is the average attendance of shows?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT AVG(?attendance) WHERE {   ?show a :show .   ?show :attendance ?attendance . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Return the average attendance across all shows.",
        "prompt": " Translate the following question into SPARQL: Return the average attendance across all shows.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?attendance) AS ?averageAttendance WHERE {     ?show :show#attendance ?attendance .     ?performance :performance#performance_id ?show :show#performance_id . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the maximum and minimum share of performances whose type is not 'Live final'.",
        "prompt": " Translate the following question into SPARQL: What are the maximum and minimum share of performances whose type is not 'Live final'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (MAX(?share) as ?max_share) (MIN(?share) as ?min_share) WHERE {   ?performance :type ?type .   FILTER(?type != \"Live final\") .   ?performance :share ?share . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Return the maximum and minimum shares for performances that do not have the type 'Live final'.",
        "prompt": " Translate the following question into SPARQL: Return the maximum and minimum shares for performances that do not have the type 'Live final'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT MAX(?share) AS ?max_share MIN(?share) AS ?min_share WHERE {   ?performance a :performance .   ?performance :share ?share .   FILTER NOT EXISTS {?performance :type \"Live final\"} }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "How many different nationalities do conductors have?",
        "prompt": " Translate the following question into SPARQL: How many different nationalities do conductors have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?nationality) as ?numNationalities) WHERE {   ?conductor a :conductor .   ?conductor :nationality ?nationality . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Count the number of different nationalities of conductors.",
        "prompt": " Translate the following question into SPARQL: Count the number of different nationalities of conductors.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?nationality) AS ?countNationalities) WHERE {   ?conductor a :conductor.   ?conductor :nationality ?nationality. }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "List names of conductors in descending order of years of work.",
        "prompt": " Translate the following question into SPARQL: List names of conductors in descending order of years of work.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?conductor a :conductor ;              :name ?name ;              :year_of_work ?yearOfWork . }  ORDER BY DESC(?yearOfWork)"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "prompt": " Translate the following question into SPARQL: What are the names of conductors, sorted descending by the number of years they have worked?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?c a :conductor .   ?c :name ?name . }  ORDER BY DESC(?year_of_work)"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "List the name of the conductor with the most years of work.",
        "prompt": " Translate the following question into SPARQL: List the name of the conductor with the most years of work.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?c a :conductor .    ?c :name ?name .    ?c :year_of_work ?yow .   FILTER NOT EXISTS {?c2 :year_of_work ?yow2 . FILTER (?yow2 > ?yow)}    } LIMIT 1"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What is the name of the conductor who has worked the greatest number of years?",
        "prompt": " Translate the following question into SPARQL: What is the name of the conductor who has worked the greatest number of years?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {?c a :conductor .       ?c :name ?name .       ?c :year_of_work ?maxYears .       {SELECT (MAX(?y) AS ?maxYears)         WHERE {?c :year_of_work ?y}       }       FILTER(?maxYears = ?c :year_of_work) }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Show the names of conductors and the orchestras they have conducted.",
        "prompt": " Translate the following question into SPARQL: Show the names of conductors and the orchestras they have conducted.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?conductorName ?orchestraName WHERE {   ?conductor a :conductor .   ?conductor :conductor#name ?conductorName .   ?orchestra a :orchestra .   ?performance a :performance .   ?performance :performance#orchestra_id ?orchestra .   ?orchestra :orchestra#ref-conductor_id ?conductor .   ?orchestra :orchestra#orchestra ?orchestraName . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "prompt": " Translate the following question into SPARQL: What are the names of conductors as well as the corresonding orchestras that they have conducted?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "SELECT ?conductorName ?orchestraName  WHERE {   ?conductor a :conductor .   ?orchestra a :orchestra .   ?performance a :performance .   ?performance :ref-orchestra_id ?orchestra .   ?orchestra :ref-conductor_id ?conductor .   ?conductor :name ?conductorName .   ?orchestra :orchestra ?orchestraName . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Show the names of conductors that have conducted more than one orchestras.",
        "prompt": " Translate the following question into SPARQL: Show the names of conductors that have conducted more than one orchestras.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?cond a :conductor .   ?cond :conductor#name ?name .   {     SELECT DISTINCT ?cond      WHERE {       ?orch :orchestra#ref-conductor_id ?cond .       {?orch :orchestra#orchestra_id ?o1} UNION {?orch :orchestra#orchestra ?o1}       FILTER EXISTS {         ?orch2 :orchestra#ref-conductor_id ?cond .         {?orch2 :orchestra#orchestra_id ?o2} UNION {?orch2 :orchestra#orchestra ?o2}         FILTER (?o1 != ?o2)       }     }   } }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the names of conductors who have conducted at more than one orchestra?",
        "prompt": " Translate the following question into SPARQL: What are the names of conductors who have conducted at more than one orchestra?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?name WHERE {   ?cond :name ?name .   ?perf :ref-conductor_id ?cond .   ?perf :ref-orchestra_id ?orch1 .   ?perf2 :ref-conductor_id ?cond .   ?perf2 :ref-orchestra_id ?orch2 .   FILTER (?orch1 != ?orch2) }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "prompt": " Translate the following question into SPARQL: Show the name of the conductor that has conducted the most number of orchestras.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?conductor a :conductor .   ?orchestra a :orchestra .   ?performance a :performance .   ?show a :show .   ?orchestra :orchestra#ref-conductor_id ?conductor .   ?performance :performance#ref-orchestra_id ?orchestra .   ?show :show#ref-performance_id ?performance .   ?conductor :conductor#name ?name . } GROUP BY ?name ORDER BY desc(count(?orchestra))  LIMIT 1"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What is the name of the conductor who has conducted the most orchestras?",
        "prompt": " Translate the following question into SPARQL: What is the name of the conductor who has conducted the most orchestras?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?conductor_name  WHERE {   {      SELECT ?conductor_id (COUNT(?orchestra_id) AS ?num_orchestras)     WHERE {       ?orchestra :orchestra#conductor_id ?conductor_id.     }      GROUP BY ?conductor_id      ORDER BY DESC(?num_orchestras)     LIMIT 1   }   ?conductor :conductor#conductor_id ?conductor_id;               :conductor#name ?conductor_name.  }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "prompt": " Translate the following question into SPARQL: Please show the name of the conductor that has conducted orchestras founded after 2008.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?c a :conductor .   ?o a :orchestra .   ?o :orchestra#conductor_id ?c .   FILTER (?o :orchestra#year_of_founded > 2008) .   ?c :conductor#name ?name . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "prompt": " Translate the following question into SPARQL: What are the names of conductors who have conducted orchestras founded after the year 2008?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?conductorName WHERE {   ?orchestra :orchestra ?orchName .   ?orchestra :year_of_founded ?yearFounded .   FILTER(?yearFounded > 2008) .   ?performance :orchestra_id ?orchestraId .   ?performance :ref-orchestra_id ?orchestra .   ?show :performance_id ?performanceId .   ?show :ref-performance_id ?performance .   ?conductor :conductor_id ?conductorId .   ?conductor :name ?conductorName .   ?orchestra :conductor_id ?conductorId . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Please show the different record companies and the corresponding number of orchestras.",
        "prompt": " Translate the following question into SPARQL: Please show the different record companies and the corresponding number of orchestras.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?record_company (COUNT(?orchestra) AS ?numOrchestras) WHERE {   ?orchestra :orchestra#record_company ?record_company . } GROUP BY ?record_company"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "How many orchestras does each record company manage?",
        "prompt": " Translate the following question into SPARQL: How many orchestras does each record company manage?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "SELECT ?record_company (COUNT(DISTINCT ?orchestra) AS ?num_orchestras) WHERE {   ?orchestra :record_company ?record_company .   ?orchestra a :orchestra . } GROUP BY ?record_company"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Please show the record formats of orchestras in ascending order of count.",
        "prompt": " Translate the following question into SPARQL: Please show the record formats of orchestras in ascending order of count.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?format (COUNT(?orchestra) AS ?count) WHERE {   ?orchestra :major_record_format ?format . } GROUP BY ?format ORDER BY ASC(?count)"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the major record formats of orchestras, sorted by their frequency?",
        "prompt": " Translate the following question into SPARQL: What are the major record formats of orchestras, sorted by their frequency?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?format (COUNT(?format) AS ?frequency) WHERE {     ?o a :orchestra .     ?o :major_record_format ?format . }  GROUP BY ?format  ORDER BY DESC (?frequency)"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "List the record company shared by the most number of orchestras.",
        "prompt": " Translate the following question into SPARQL: List the record company shared by the most number of orchestras.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?record_company  WHERE {   {     SELECT ?rc (COUNT(?o) AS ?oc)     WHERE {       ?o :ref-orchestra_id ?oi .       ?oi :record_company ?rc .     }     GROUP BY ?rc     ORDER BY DESC(?oc)     LIMIT 1   }   ?o :ref-orchestra_id ?oi .   ?oi :record_company ?record_company .   }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What is the record company used by the greatest number of orchestras?",
        "prompt": " Translate the following question into SPARQL: What is the record company used by the greatest number of orchestras?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?record_company  WHERE {    ?orchestra :orchestra#record_company ?record_company .   {SELECT (COUNT(?orchestra) AS ?count)    WHERE {       ?performance :performance#orchestra_id ?orchestra .       ?orchestra :orchestra#record_company ?record_company    }     GROUP BY ?record_company    ORDER BY DESC(?count)    LIMIT 1    } }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "List the names of orchestras that have no performance.",
        "prompt": " Translate the following question into SPARQL: List the names of orchestras that have no performance.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?orchestra a :orchestra .   FILTER NOT EXISTS {?performance a :performance ;                                :ref-orchestra_id ?orchestra .                      }   ?orchestra :orchestra ?name . } Note: This query may need to be modified based on the specific URI and property names used in the ontology, which are not provided in the question."
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the orchestras that do not have any performances?",
        "prompt": " Translate the following question into SPARQL: What are the orchestras that do not have any performances?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?orchestra WHERE {     ?orchestra a :orchestra .     FILTER NOT EXISTS {         ?performance a :performance .         ?performance :ref-orchestra_id ?orchestra .     } }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "prompt": " Translate the following question into SPARQL: Show the record companies shared by orchestras founded before 2003 and after 2003.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?recordCompany WHERE {   ?o :orchestra ?orchestraName;      :year_of_founded ?foundedYear;      :record_company ?recordCompany.   FILTER(?foundedYear < 2003 || ?foundedYear > 2003) }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "prompt": " Translate the following question into SPARQL: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?recordCompany WHERE {   ?orchestra1 a :orchestra .   ?orchestra2 a :orchestra .   ?orchestra1 :record_company ?recordCompany .   ?orchestra2 :record_company ?recordCompany .   FILTER(?orchestra1 != ?orchestra2)   FILTER(?orchestra1 :year_of_founded < 2003)   FILTER(?orchestra2 :year_of_founded >= 2003) }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Find the number of orchestras whose record format is 'CD' or 'DVD'.",
        "prompt": " Translate the following question into SPARQL: Find the number of orchestras whose record format is 'CD' or 'DVD'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(DISTINCT ?orchestra)  WHERE {    ?orchestra :major_record_format ?format .   FILTER (?format = 'CD' || ?format = 'DVD') }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Count the number of orchestras that have CD or DVD as their record format.",
        "prompt": " Translate the following question into SPARQL: Count the number of orchestras that have CD or DVD as their record format.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?orch) AS ?countOrchestras) WHERE {   ?orch a :orchestra .   FILTER (?orch :major_record_format \"CD\"^^xsd:string || ?orch :major_record_format \"DVD\"^^xsd:string) }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "Show the years in which orchestras that have given more than one performance are founded.",
        "prompt": " Translate the following question into SPARQL: Show the years in which orchestras that have given more than one performance are founded.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?year_of_founded  WHERE {   ?orchestra a :orchestra ;              :year_of_founded ?year_of_founded .   FILTER( EXISTS{ SELECT ?orchestra                     WHERE { ?performance a :performance ;                                       :ref-orchestra_id ?orchestra .                            } GROUP BY ?orchestra                             HAVING (COUNT(?performance) > 1)                    } ) . }"
    },
    {
        "db_id": "orchestra",
        "natural_language_question": "What are years of founding for orchestras that have had more than a single performance?",
        "prompt": " Translate the following question into SPARQL: What are years of founding for orchestras that have had more than a single performance?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['conductor', 'orchestra', 'performance', 'show'], 'object_properties': ['orchestra#ref-conductor_id', 'performance#ref-orchestra_id', 'show#ref-performance_id'], 'data_properties': ['conductor#age', 'conductor#conductor_id', 'conductor#name', 'conductor#nationality', 'conductor#year_of_work', 'orchestra#conductor_id', 'orchestra#major_record_format', 'orchestra#orchestra', 'orchestra#orchestra_id', 'orchestra#record_company', 'orchestra#year_of_founded', 'performance#date', 'performance#official_ratings_millions', 'performance#orchestra_id', 'performance#performance_id', 'performance#share', 'performance#type', 'performance#weekly_rank', 'show#attendance', 'show#if_first_show', 'show#performance_id', 'show#result', 'show#show_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?year_of_founded WHERE {   ?orchestra a :orchestra .   ?orchestra :orchestra_id ?orchestra_id .   ?orchestra :year_of_founded ?year_of_founded .   ?performance a :performance .   ?performance :orchestra_id ?orchestra_id .   {     SELECT ?orchestra_id (COUNT(?performance_id) as ?performances_count) WHERE {       ?performance a :performance .       ?performance :orchestra_id ?orchestra_id .       {         SELECT ?performance_id WHERE {           ?show a :show .           ?show :performance_id ?performance_id .           FILTER(?show_result != \"Cancelled\" && ?show_result != \"Postponed\")         }       }     }      GROUP BY ?orchestra_id     HAVING (?performances_count > 1)   } }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "How many high schoolers are there?",
        "prompt": " Translate the following question into SPARQL: How many high schoolers are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?hs) AS ?num_highschoolers) WHERE {   ?hs a :highschooler . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Count the number of high schoolers.",
        "prompt": " Translate the following question into SPARQL: Count the number of high schoolers.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?highschooler) AS ?num_highschoolers) WHERE {   ?highschooler a :highschooler . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the names and grades of each high schooler.",
        "prompt": " Translate the following question into SPARQL: Show the names and grades of each high schooler.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?grade WHERE {   ?highschooler a :highschooler ;                 :name ?name ;                 :grade ?grade . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the names and grades for each high schooler?",
        "prompt": " Translate the following question into SPARQL: What are the names and grades for each high schooler?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?grade WHERE {   ?highschooler a :highschooler .   ?highschooler :name ?name .   ?highschooler :grade ?grade . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show all the grades of the high schoolers.",
        "prompt": " Translate the following question into SPARQL: Show all the grades of the high schoolers.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?grade WHERE {   ?hs a :highschooler .   ?hs :grade ?grade . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What is the grade of each high schooler?",
        "prompt": " Translate the following question into SPARQL: What is the grade of each high schooler?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?grade WHERE {   ?highschooler :grade ?grade .   ?highschooler :name ?name . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What grade is Kyle in?",
        "prompt": " Translate the following question into SPARQL: What grade is Kyle in?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?grade WHERE {   ?person a :highschooler .   ?person :id \"Kyle\" .   ?person :grade ?grade . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Return the grade for the high schooler named Kyle.",
        "prompt": " Translate the following question into SPARQL: Return the grade for the high schooler named Kyle.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?grade WHERE {   ?highschooler a :highschooler .   ?highschooler :name \"Kyle\" .   ?highschooler :grade ?grade . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the names of all high schoolers in grade 10.",
        "prompt": " Translate the following question into SPARQL: Show the names of all high schoolers in grade 10.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?hs a :highschooler .   ?hs :grade \"10\" .   ?hs :name ?name . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the names of all high schoolers in grade 10?",
        "prompt": " Translate the following question into SPARQL: What are the names of all high schoolers in grade 10?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?highschooler :grade 10 .   ?highschooler :name ?name . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the ID of the high schooler named Kyle.",
        "prompt": " Translate the following question into SPARQL: Show the ID of the high schooler named Kyle.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id WHERE {   ?hs :id ?id ;       :name \"Kyle\" . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What is Kyle's id?",
        "prompt": " Translate the following question into SPARQL: What is Kyle's id?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?id  WHERE {   ?highschooler :id \"Kyle\" .   ?highschooler :id ?id . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "How many high schoolers are there in grade 9 or 10?",
        "prompt": " Translate the following question into SPARQL: How many high schoolers are there in grade 9 or 10?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?student) AS ?count) WHERE {   ?student a :highschooler ;            :grade ?grade .   FILTER(?grade = 9 || ?grade = 10) }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Count the number of high schoolers in grades 9 or 10.",
        "prompt": " Translate the following question into SPARQL: Count the number of high schoolers in grades 9 or 10.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?student) AS ?count) WHERE {   ?student a :highschooler ;            :grade ?grade .   FILTER(?grade = 9 || ?grade = 10) }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the number of high schoolers for each grade.",
        "prompt": " Translate the following question into SPARQL: Show the number of high schoolers for each grade.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?grade (COUNT(?student) AS ?count) WHERE {   ?student a :highschooler .   ?student :grade ?grade . } GROUP BY ?grade"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "How many high schoolers are in each grade?",
        "prompt": " Translate the following question into SPARQL: How many high schoolers are in each grade?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?grade (count(?student) as ?count) WHERE {   ?student a :highschooler ;            :grade ?grade . } GROUP BY ?grade"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Which grade has the most high schoolers?",
        "prompt": " Translate the following question into SPARQL: Which grade has the most high schoolers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?grade (COUNT(?student) as ?count) WHERE {   ?student a :highschooler .   ?student :grade ?grade . } GROUP BY ?grade ORDER BY DESC(?count) LIMIT 1"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Return the grade that has the greatest number of high schoolers.",
        "prompt": " Translate the following question into SPARQL: Return the grade that has the greatest number of high schoolers.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?grade  WHERE {   {?student :highschooler#grade ?grade}   {     SELECT ?max_count     WHERE {       {?student :highschooler#grade ?grade .}       {SELECT (COUNT(?student) AS ?count)         WHERE {?student :highschooler#grade ?grade.}         GROUP BY ?grade         ORDER BY DESC(?count) LIMIT 1       }       BIND(?count AS ?max_count)     }   }   {SELECT (COUNT(?student) AS ?count)     WHERE {?student :highschooler#grade ?grade.}     GROUP BY ?grade     HAVING (COUNT(?student) = ?max_count)   } } GROUP BY ?grade HAVING (COUNT(?student) = ?max_count) LIMIT 1"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show me all grades that have at least 4 students.",
        "prompt": " Translate the following question into SPARQL: Show me all grades that have at least 4 students.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?grade (COUNT(?student) as ?numStudents) WHERE {   ?student a :highschooler .   ?student :grade ?grade .   {     SELECT ?grade (COUNT(DISTINCT ?student) as ?count)     WHERE {       ?student a :highschooler .       ?student :grade ?grade .     }     GROUP BY ?grade     HAVING (?count >= 4)   } } GROUP BY ?grade HAVING (?numStudents >= 4)"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Which grades have 4 or more high schoolers?",
        "prompt": " Translate the following question into SPARQL: Which grades have 4 or more high schoolers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?grade WHERE {   ?hs a :highschooler ;       :grade ?grade .   {     SELECT ?hs (COUNT(?hs) as ?count)     WHERE {       ?hs a :highschooler .       ?hs  :grade ?grade .     }     GROUP BY ?hs     HAVING (?count >= 4)   } }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the student IDs and numbers of friends corresponding to each.",
        "prompt": " Translate the following question into SPARQL: Show the student IDs and numbers of friends corresponding to each.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?studentID (COUNT(?friendID) AS ?numberFriends) WHERE {   ?friend :friend#student_id ?studentID .   ?friend :friend#ref-friend_id ?friendID . } GROUP BY ?studentID"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "How many friends does each student have?",
        "prompt": " Translate the following question into SPARQL: How many friends does each student have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?student (COUNT(?friend) AS ?numFriends) WHERE {   ?student a :highschooler .   OPTIONAL {     ?student :friend#ref-student_id ?friend .   } } GROUP BY ?student"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the names of high school students and their corresponding number of friends.",
        "prompt": " Translate the following question into SPARQL: Show the names of high school students and their corresponding number of friends.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name (COUNT(?friend) AS ?numFriends) WHERE {   ?student a :highschooler ;            :name ?name ;            :id ?id .   OPTIONAL {     ?friend a :friend ;             :ref-student_id ?id .     FILTER(?friend != ?student)   } }  GROUP BY ?name"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the names of the high schoolers and how many friends does each have?",
        "prompt": " Translate the following question into SPARQL: What are the names of the high schoolers and how many friends does each have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name (COUNT(?friend) AS ?num_friends) WHERE {   ?highschooler a :highschooler ;                 :name ?name ;                 :id ?id .   OPTIONAL {     ?friend a :friend ;             :ref-student_id ?id ;             :ref-friend_id ?friend_id .     FILTER(?id != ?friend_id)   } } GROUP BY ?name"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What is the name of the high schooler who has the greatest number of friends?",
        "prompt": " Translate the following question into SPARQL: What is the name of the high schooler who has the greatest number of friends?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?hs a :highschooler .   ?hs :name ?name .   {     SELECT ?student_id (COUNT(?friend_id) AS ?count)     WHERE {       ?student a :highschooler .       ?student :id ?student_id .       ?friend a :friend .       ?friend :friend_id ?friend_id .       ?friend :student_id ?student_id .     }     GROUP BY ?student_id     ORDER BY DESC(?count)     LIMIT 1   }   FILTER (?hs :id ?student_id) }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Return the name of the high school student with the most friends.",
        "prompt": " Translate the following question into SPARQL: Return the name of the high school student with the most friends.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?h_name  WHERE {   ?hs :name ?h_name .   {?hs :id ?id .    ?f :friend_id ?id .    ?f :student_id ?s_id .    ?l :liked_id ?s_id .    } UNION {    ?hs :id ?id .    ?f :student_id ?id .    ?f :friend_id ?s_id .    ?l :liked_id ?s_id .    }   ?l :student_id ?hs_id .   FILTER(?hs_id = ?id) . } GROUP BY ?h_name ORDER BY DESC(COUNT(DISTINCT ?f)) LIMIT 1."
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the names of high schoolers who have at least 3 friends.",
        "prompt": " Translate the following question into SPARQL: Show the names of high schoolers who have at least 3 friends.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   ?hs :name ?name .   ?hs rdf:type :highschooler .   {     SELECT ?hs      WHERE {       ?f1 :student_id ?hs .       ?f2 :student_id ?hs .       ?f3 :student_id ?hs .       FILTER(?f1 != ?f2 && ?f1 != ?f3 && ?f2 != ?f3)     }     GROUP BY ?hs      HAVING (COUNT(?f1)+COUNT(?f2)+COUNT(?f3)) >= 3   } }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the names of high schoolers who have 3 or more friends?",
        "prompt": " Translate the following question into SPARQL: What are the names of high schoolers who have 3 or more friends?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?highschooler a :highschooler .   ?friend a :friend .   ?highschooler :name ?name .   {     SELECT ?student_id (COUNT(?friend_id) AS ?count)      WHERE {       ?highschooler :id ?student_id .       ?friend :student_id ?student_id .       ?friend :friend_id ?friend_id .     } GROUP BY ?student_id   } FILTER(?count >= 3) }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the names of all of the high schooler Kyle's friends.",
        "prompt": " Translate the following question into SPARQL: Show the names of all of the high schooler Kyle's friends.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?friend_name WHERE {   ?friend a :friend .   ?friend :ref-student_id ?student .   ?friend :ref-friend_id ?friend_of_student .   ?student :highschooler#name \"Kyle\" .   ?friend_of_student :highschooler#name ?friend_name . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Return the names of friends of the high school student Kyle.",
        "prompt": " Translate the following question into SPARQL: Return the names of friends of the high school student Kyle.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?friend_name WHERE {   ?hs_id :name \"Kyle\" .   ?f :student_id ?hs_id .   ?f :friend_id ?friend_id .   ?friend :id ?friend_id .   ?friend :name ?friend_name . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "How many friends does the high school student Kyle have?",
        "prompt": " Translate the following question into SPARQL: How many friends does the high school student Kyle have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT COUNT(?friend) WHERE {   ?friend a :friend .   ?friend :ref-student_id ?student .   ?student a :highschooler .   ?student :name \"Kyle\" . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Count the number of friends Kyle has.",
        "prompt": " Translate the following question into SPARQL: Count the number of friends Kyle has.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?friend) AS ?numFriends)  WHERE {   :Kyle :friend#ref-student_id ?studentId .   ?friend :friend#ref-student_id ?studentId . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show ids of all students who do not have any friends.",
        "prompt": " Translate the following question into SPARQL: Show ids of all students who do not have any friends.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?student_id  WHERE {   ?student a :highschooler .   FILTER NOT EXISTS {     ?student :friend#ref-student_id ?friend .   }   ?student :highschooler#id ?student_id . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the ids of high school students who do not have friends?",
        "prompt": " Translate the following question into SPARQL: What are the ids of high school students who do not have friends?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?id WHERE {     ?highschooler a :highschooler .     ?highschooler :id ?id .     FILTER NOT EXISTS {         ?highschooler :friend ?friend .     } }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show names of all high school students who do not have any friends.",
        "prompt": " Translate the following question into SPARQL: Show names of all high school students who do not have any friends.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?studentName  WHERE {   ?student :grade \"high\" .   ?student :name ?studentName .   FILTER NOT EXISTS {     ?student :ref-friend_id ?friend .   } }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the names of students who have no friends?",
        "prompt": " Translate the following question into SPARQL: What are the names of students who have no friends?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name  WHERE {   ?student a :highschooler .   ?student :name ?name .   FILTER NOT EXISTS {     ?student :friend ?f .   } }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "prompt": " Translate the following question into SPARQL: Show the ids of high schoolers who have friends and are also liked by someone else.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id  WHERE {    ?hs a :highschooler .   ?hs :id ?id .   ?f a :friend .   ?f :ref-student_id ?hs .   ?l a :likes .   ?l :ref-student_id ?hs .   FILTER EXISTS { ?f :ref-friend_id ?hs } . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the ids of students who both have friends and are liked?",
        "prompt": " Translate the following question into SPARQL: What are the ids of students who both have friends and are liked?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?student_id WHERE {   ?friend a :friend .   ?friend :ref-student_id ?student_id .   ?friend :ref-friend_id ?friend_id .   ?likes a :likes .   ?likes :ref-student_id ?student_id .   ?likes :ref-liked_id ?liked_id .   FILTER(?student_id != ?liked_id)   FILTER(EXISTS {?friend2 a :friend . ?friend2 :ref-student_id ?student_id2 . FILTER(?friend_id = ?student_id2)}) }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show name of all students who have some friends and also are liked by someone else.",
        "prompt": " Translate the following question into SPARQL: Show name of all students who have some friends and also are liked by someone else.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?student a :highschooler .   ?student :hasFriend ?friend .   ?other :likes ?student .   ?student :likes ?other .   ?student :name ?name . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the names of high schoolers who both have friends and are liked?",
        "prompt": " Translate the following question into SPARQL: What are the names of high schoolers who both have friends and are liked?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?hs a :highschooler .   ?hs :name ?name .   ?hs :friend#ref-student_id ?friend .   ?hs :likes#ref-student_id ?like .   ?friend :friend#ref-friend_id ?friendOfFriend .   ?like :likes#ref-liked_id ?friendOfFriend . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Count the number of likes for each student id.",
        "prompt": " Translate the following question into SPARQL: Count the number of likes for each student id.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?student_id (COUNT(*) AS ?num_likes) WHERE {   ?likes :ref-student_id ?student_id .   ?likes :ref-liked_id ?liked_id . } GROUP BY ?student_id"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "How many likes correspond to each student id?",
        "prompt": " Translate the following question into SPARQL: How many likes correspond to each student id?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?student_id (SUM(?likes) as ?total_likes) WHERE {   ?like a :likes .   ?like :ref-student_id ?student_id .   ?like :ref-liked_id ?liked_id .   ?liked_student :ref-student_id ?liked_id .   ?liked_student :ref-liked_id ?likes . } GROUP BY ?student_id"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "prompt": " Translate the following question into SPARQL: Show the names of high schoolers who have likes, and numbers of likes for each.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name (COUNT(?like) AS ?number_of_likes) WHERE {   ?student a :highschooler ;            :name ?name ;            :id ?id .   ?like a :likes ;         :ref-student_id ?id ;         :ref-liked_id ?liked_id . } GROUP BY ?name HAVING (COUNT(?like) > 0)"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "prompt": " Translate the following question into SPARQL: What are the names of high schoolers who have likes, and how many likes does each have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name (COUNT(?likes) AS ?num_likes) WHERE {   ?highschooler a :highschooler .   ?highschooler :name ?name .   ?likes a :likes .   ?likes :ref-student_id ?highschooler . } GROUP BY ?highschooler HAVING (COUNT(?likes) > 0)"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What is the name of the high schooler who has the greatest number of likes?",
        "prompt": " Translate the following question into SPARQL: What is the name of the high schooler who has the greatest number of likes?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {     ?highschooler a :highschooler .     ?likes a :likes .     ?likes :ref-student_id ?highschooler .     ?highschooler :name ?name .     {         SELECT (MAX(?count) AS ?max_likes)         WHERE {             SELECT ?highschooler (COUNT(?liked_id) AS ?count)             WHERE {                 ?likes :ref-liked_id ?highschooler .             }             GROUP BY ?highschooler         }     }     ?likes :ref-liked_id ?highschooler .     (SELECT ?count WHERE {?likes :ref-liked_id ?highschooler GROUP BY ?highschooler} ) = ?max_likes }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Give the name of the student with the most likes.",
        "prompt": " Translate the following question into SPARQL: Give the name of the student with the most likes.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?student :name ?name .   {     SELECT ?student (COUNT(?like) AS ?numLikes)     WHERE {       ?student a :highschooler .       ?like a :likes .       ?like :ref-student_id ?student .     }     GROUP BY ?student     ORDER BY DESC(?numLikes)     LIMIT 1   } }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the names of students who have at least 2 likes.",
        "prompt": " Translate the following question into SPARQL: Show the names of students who have at least 2 likes.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?studentName WHERE {   ?student :name ?studentName .   {     SELECT ?student (COUNT(?like) AS ?likeCount) WHERE {       ?like :student_id ?student .       ?like :liked_id ?liked .       FILTER(?student != ?liked) .     } GROUP BY ?student HAVING (?likeCount >= 2)   } }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the names of students who have 2 or more likes?",
        "prompt": " Translate the following question into SPARQL: What are the names of students who have 2 or more likes?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?student a :highschooler .   ?student :name ?name .   {     SELECT ?student (COUNT(?like) as ?numLikes) WHERE {       ?like a :likes .       ?like :student_id ?student .     } GROUP BY ?student   } FILTER (?numLikes >= 2)  }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "prompt": " Translate the following question into SPARQL: Show the names of students who have a grade higher than 5 and have at least 2 friends.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?student rdf:type :highschooler .   ?student :grade ?grade .   FILTER(?grade > 5) .   ?f1 rdf:type :friend .   ?f1 :student_id ?student .   ?f2 rdf:type :friend .   ?f2 :student_id ?student .   FILTER(?f1 != ?f2) .   ?student :name ?name . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "prompt": " Translate the following question into SPARQL: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?highschooler a :highschooler ;                :name ?name ;                :grade ?grade ;                :id ?id .   ?friend a :friend ;           :ref-student_id ?id .   {     SELECT ?id     WHERE {       ?likes a :likes ;              :ref-student_id ?id ;              :ref-liked_id ?liked_id .       FILTER(?liked_id != ?id) .     }     GROUP BY ?id      HAVING (COUNT(?liked_id) >= 2)   }   FILTER(?grade > 5) . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "How many likes does Kyle have?",
        "prompt": " Translate the following question into SPARQL: How many likes does Kyle have?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?like) AS ?numLikes) WHERE {   ?like a :likes ;         :ref-student_id ?student ;         :ref-liked_id ?liked .   ?highschooler a :highschooler ;                 :id ?liked .   FILTER(?highschooler:name = \"Kyle\") }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Return the number of likes that the high schooler named Kyle has.",
        "prompt": " Translate the following question into SPARQL: Return the number of likes that the high schooler named Kyle has.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?likes) AS ?numberOfLikes) WHERE {     ?highschooler a :highschooler .     ?highschooler :name \"Kyle\" .     ?likes a :likes .     ?likes :ref-student_id ?highschooler . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Find the average grade of all students who have some friends.",
        "prompt": " Translate the following question into SPARQL: Find the average grade of all students who have some friends.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?grade) AS ?average_grade WHERE {   ?student :id ?id ;            :friend ?friend .   ?friend :ref-student_id ?id_friend .   ?highschooler :id ?id_friend ;                 :grade ?grade . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What is the average grade of students who have friends?",
        "prompt": " Translate the following question into SPARQL: What is the average grade of students who have friends?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?grade) AS ?average_grade WHERE {   ?student rdf:type :highschooler .   ?student :friend#student_id ?friend_id .   ?friend :friend#ref-student_id ?student .   ?student :highschooler#grade ?grade . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "Find the minimum grade of students who have no friends.",
        "prompt": " Translate the following question into SPARQL: Find the minimum grade of students who have no friends.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT MIN(?grade) WHERE {   ?student a :highschooler .   FILTER NOT EXISTS {     ?student :friend#ref-student_id ?friend .   }   ?student :highschooler#grade ?grade . }"
    },
    {
        "db_id": "network_1",
        "natural_language_question": "What is the lowest grade of students who do not have any friends?",
        "prompt": " Translate the following question into SPARQL: What is the lowest grade of students who do not have any friends?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['friend', 'highschooler', 'likes'], 'object_properties': ['friend#ref-friend_id', 'friend#ref-student_id', 'likes#ref-liked_id', 'likes#ref-student_id'], 'data_properties': ['friend#friend_id', 'friend#student_id', 'highschooler#grade', 'highschooler#id', 'highschooler#name', 'likes#liked_id', 'likes#student_id']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MIN(?grade) WHERE {   ?highschooler :highschooler#grade ?grade .   FILTER NOT EXISTS {     ?friend :friend#student_id ?highschooler .     ?friend :friend#ref-friend_id ?friend2 .     ?friend2 :friend#student_id ?highschooler2 .     FILTER (?highschooler != ?highschooler2)   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which states have both owners and professionals living there?",
        "prompt": " Translate the following question into SPARQL: Which states have both owners and professionals living there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?state  WHERE {    ?owner :state ?state .    ?professional :state ?state .    ?owner a :owners .    ?professional a :professionals . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the states where both owners and professionals live.",
        "prompt": " Translate the following question into SPARQL: Find the states where both owners and professionals live.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?state WHERE {   ?owner rdf:type :owners .   ?professional rdf:type :professionals .   ?owner :state ?state .   ?professional :state ?state . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What is the average age of the dogs who have gone through any treatments?",
        "prompt": " Translate the following question into SPARQL: What is the average age of the dogs who have gone through any treatments?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?age) AS ?average_age WHERE {   ?dog :dogs#age ?age .   ?dog :dogs#dog_id ?dogID .   ?treatment :treatments#ref-dog_id ?dogID . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the average age of the dogs who went through treatments.",
        "prompt": " Translate the following question into SPARQL: Find the average age of the dogs who went through treatments.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?age) WHERE {   ?dog :dogs#age ?age .   ?dog :dogs#dog_id ?dog_id .   ?treatment :treatments#dog_id ?dog_id . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "prompt": " Translate the following question into SPARQL: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?last_name ?cell_phone WHERE {   {?professional :professional_id ?id .    ?professional :last_name ?last_name .    ?professional :cell_number ?cell_phone .    {?professional :state \"Indiana\" .}    UNION    {?treatment :professional_id ?professional .     ?treatment :treatment_type_code ?treatment_type .     ?t_type :treatment_type_code ?treatment_type .     FILTER (REGEX(str(?t_type), \"TreatmentType(3|[4-9]|[1-9][0-9]+)$\"))    }   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "prompt": " Translate the following question into SPARQL: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?last_name ?cell_phone  WHERE {   {     ?p a :professionals.     ?p :state \"Indiana\".     ?p :last_name ?last_name.     ?p :cell_number ?cell_phone.     ?p :professional_id ?id.   }   UNION   {     ?p a :professionals.     ?p :professional_id ?id.     {       SELECT ?id (COUNT(?t) AS ?num_treatments)       WHERE {         ?t a :treatments.         ?t :professional_id ?id.       }       GROUP BY ?id       HAVING (?num_treatments > 2)     }     ?p :last_name ?last_name.     ?p :cell_number ?cell_phone.   } } ORDER BY ?id"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "prompt": " Translate the following question into SPARQL: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?dogName WHERE {   ?dog :dogs#name ?dogName .   ?dog :dogs#dog_id ?dogId .   ?treatment :treatments#dog_id ?dogId .   ?treatment :treatments#cost_of_treatment ?cost .   FILTER(?cost <= 1000)    FILTER NOT EXISTS {     ?treatment :treatment#cost_of_treatment ?highCost .     ?treatment :treatments#dog_id ?dogId .     FILTER(?highCost > 1000)   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "prompt": " Translate the following question into SPARQL: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?dog_name WHERE {   ?treatment :treatment_type_code ?type ;              :cost_of_treatment ?cost ;              :dog_id ?dog .   ?dog :name ?dog_name ;        :owner_id ?owner .   ?charge :charge_amount ?amount ;           :charge_type \"treatment\" ;           :charge_id ?id .   FILTER(?cost + ?amount <= 1000) }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which first names are used for professionals or owners but are not used as dog names?",
        "prompt": " Translate the following question into SPARQL: Which first names are used for professionals or owners but are not used as dog names?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?name  WHERE {   ?professional a :professionals .   ?professional :first_name ?name .   FILTER NOT EXISTS {      ?dog a :dogs .     ?dog :name ?name .     FILTER NOT EXISTS {       ?dog :owner_id ?owner .       ?owner :first_name ?name .     }   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "prompt": " Translate the following question into SPARQL: Find the first names that are used for professionals or owners but are not used as dog names.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?fname WHERE {   ?owner a :owners .   ?owner :first_name ?fname .   FILTER NOT EXISTS {     ?dog a :dogs .     ?dog :name ?fname .   }   FILTER NOT EXISTS {     ?treatment a :treatments ;                :ref-professional_id ?owner ;                :ref-treatment_type_code ?type .     FILTER (REGEX(?type, \"dog\"))    } } LIMIT 100"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "prompt": " Translate the following question into SPARQL: Which professional did not operate any treatment on dogs? List the professional's id, role and email.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?professional_id ?role_code ?email_address WHERE {   ?professional a :professionals ;                 :professional_id ?professional_id ;                 :role_code ?role_code ;                 :email_address ?email_address .   FILTER NOT EXISTS {     ?treatment a :treatments ;                :ref-professional_id ?professional_id ;                :ref-dog_id ?dog_id .     ?dog a :dogs ;         :dog_id ?dog_id .   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "prompt": " Translate the following question into SPARQL: Give me the id, role and email of the professionals who did not perform any treatment on dogs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?role ?email  WHERE {   ?professional :role_code ?role ;                 :email_address ?email ;                 :professional_id ?id .   FILTER NOT EXISTS {     ?treatment :ref-professional_id ?id ;                :ref-dog_id ?dog .     ?dog :breed_code ?breed .   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "prompt": " Translate the following question into SPARQL: Which owner owns the most dogs? List the owner id, first name and last name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX: <http://valuenet/ontop/> SELECT ?owner_id ?firstName ?lastName (COUNT(?dog_id) AS ?numDogs) WHERE {   ?dog a :dogs .   ?dog :ref-owner_id ?owner_id .   ?owner a :owners .   ?owner :owner_id ?owner_id .   ?owner :first_name ?firstName .   ?owner :last_name ?lastName . } GROUP BY ?owner_id ?firstName ?lastName ORDER BY DESC(?numDogs) LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "prompt": " Translate the following question into SPARQL: Return the owner id, first name and last name of the owner who has the most dogs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?owner_id ?first_name ?last_name WHERE {   {     SELECT ?owner_id (COUNT(?dog_id) as ?count)     WHERE {       ?dog a :dogs .       ?dog :ref-owner_id ?owner_id .       GROUP BY ?owner_id     }     ORDER BY DESC(?count)     LIMIT 1   }   ?owner a :owners ;          :owner_id ?owner_id ;          :first_name ?first_name ;          :last_name ?last_name . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "prompt": " Translate the following question into SPARQL: Which professionals have done at least two treatments? List the professional's id, role, and first name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?professional_id ?role_code ?first_name WHERE {   ?treatment :ref-professional_id ?professional_id .   ?professional :professional_id ?professional_id ;                  :role_code ?role_code ;                  :first_name ?first_name .   {     SELECT ?professional_id (COUNT(?treatment) as ?count) WHERE {       ?treatment :ref-professional_id ?professional_id .     } GROUP BY ?professional_id     HAVING (?count >= 2)   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "prompt": " Translate the following question into SPARQL: What are the id, role, and first name of the professionals who have performed two or more treatments?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?id ?role ?first_name WHERE {   ?p a :professionals ;      :professional_id ?id ;      :role_code ?role ;      :first_name ?first_name .      {     SELECT ?professional_id     WHERE {       ?t a :treatments ;          :professional_id ?professional_id .     }     GROUP BY ?professional_id     HAVING (COUNT(?t) >= 2)   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What is the name of the breed with the most dogs?",
        "prompt": " Translate the following question into SPARQL: What is the name of the breed with the most dogs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?breedName (COUNT(?dog) AS ?numDogs) WHERE {     ?dog :breed_code ?breedCode .     ?breed :breed_code ?breedCode .     ?breed :breed_name ?breedName . } GROUP BY ?breedName ORDER BY DESC(?numDogs) LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which breed do the most dogs have? Give me the breed name.",
        "prompt": " Translate the following question into SPARQL: Which breed do the most dogs have? Give me the breed name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?breed_name  WHERE {   SELECT ?breed_code (COUNT(?dog_id) AS ?count)   WHERE {     ?dog a :dogs .     ?dog :breed_code ?breed_code .     ?breed a :breeds .     ?breed :breed_code ?breed_code .     BIND(STRAFTER(str(?dog), 'dogs#') AS ?dog_id)   } GROUP BY (?breed_code) ORDER BY DESC(?count) LIMIT 1        ?breed a :breeds .   ?breed :breed_code ?breed_code .   ?breed :breed_name ?breed_name .   FILTER (?breed_code = ?breed_code_max) } LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "prompt": " Translate the following question into SPARQL: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?owner_id ?last_name (SUM(?cost_of_treatment) AS ?total_cost) WHERE {   ?dog :ref-owner_id ?owner_id .   ?treatment :ref-dog_id ?dog ;              :cost_of_treatment ?cost_of_treatment .   ?owner :owner_id ?owner_id ;          :last_name ?last_name . } GROUP BY ?owner_id ?last_name ORDER BY DESC(?total_cost) LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "prompt": " Translate the following question into SPARQL: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?owner_id ?last_name WHERE {   ?dog :ref-owner_id ?owner_id .   ?treatment :ref-dog_id ?dog .   ?treatment :cost_of_treatment ?cost .   ?owner :owner_id ?owner_id .   ?owner :last_name ?last_name .      {     SELECT (max(?cost) AS ?max_cost)     WHERE {       ?dog :ref-owner_id ?owner_id .       ?treatment :ref-dog_id ?dog .       ?treatment :cost_of_treatment ?cost .     }   }      FILTER (?cost = ?max_cost)  } LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What is the description of the treatment type that costs the least money in total?",
        "prompt": " Translate the following question into SPARQL: What is the description of the treatment type that costs the least money in total?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?description WHERE {   (SELECT (MIN(?cost) AS ?minCost)    WHERE {      ?treatments :cost_of_treatment ?cost .    })   ?treatmentType :treatment_type_description ?description ;                   :cost_of_treatment ?minCost . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Give me the description of the treatment type whose total cost is the lowest.",
        "prompt": " Translate the following question into SPARQL: Give me the description of the treatment type whose total cost is the lowest.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?description WHERE {   ?tt a :treatment_types.   ?tt :treatment_type_description ?description.   {     SELECT (MIN(?cost) AS ?minCost)     WHERE {       ?t a :treatments.       ?t :cost_of_treatment ?cost.       ?t :ref-treatment_type_code ?tt.     }   }   ?tt :treatment_type_cost ?minCost. }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "prompt": " Translate the following question into SPARQL: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?owner_id ?zip_code (SUM(?charge_amount) as ?total_amount_paid) WHERE {   ?owner :owns ?dog.   ?dog :ref-owner_id ?owner_id.   ?dog :ref-size_code ?size_code.   ?charge :charge_type \"dog size\".   ?charge :ref-size_code ?size_code.   ?charge :charge_amount ?charge_amount.   ?owner :zip_code ?zip_code. }  GROUP BY ?owner_id ?zip_code ORDER BY DESC(?total_amount_paid) LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "prompt": " Translate the following question into SPARQL: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?owner_id ?zip_code WHERE {   {     SELECT ?owner_id (SUM(?cost_of_treatment) AS ?total_cost)     WHERE {       ?treatments :cost_of_treatment ?cost_of_treatment .       ?treatments :ref-dog_id ?dog_id .       ?dogs :ref-owner_id ?owner_id .       ?owners :owner_id ?owner_id .       ?owners :zip_code ?zip_code .     } GROUP BY ?owner_id   } ORDER BY DESC(?total_cost) LIMIT 1 }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "prompt": " Translate the following question into SPARQL: Which professionals have done at least two types of treatments? List the professional id and cell phone.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?professional_id ?cell_number  WHERE {   ?treatment a :treatments .   ?treatment :ref-professional_id ?professional_id .   ?professional :professional_id ?professional_id .   ?professional :cell_number ?cell_number .   {     SELECT ?professional_id (COUNT(DISTINCT ?treatment_type_code) AS ?num_types)      WHERE {       ?treatment a :treatments .       ?treatment :ref-professional_id ?professional_id .       ?treatment :ref-treatment_type_code ?treatment_type_code .     }     GROUP BY ?professional_id     HAVING (?num_types >= 2)   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "prompt": " Translate the following question into SPARQL: Find the id and cell phone of the professionals who operate two or more types of treatments.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?id ?cell_phone WHERE {   ?treat a :treatments ;          :ref-professional_id ?id .             ?prof a :professionals ;         :professional_id ?id ;         :cell_number ?cell_phone .      {     SELECT ?id (COUNT(DISTINCT ?type) AS ?count) WHERE {       ?treat a :treatments ;              :ref-professional_id ?id ;              :ref-treatment_type_code ?type .     } GROUP BY ?id   }   FILTER(?count >= 2) }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "prompt": " Translate the following question into SPARQL: What are the first name and last name of the professionals who have done treatment with cost below average?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName ?lastName WHERE {   ?treatment :cost_of_treatment ?cost .   ?professional :professional_id ?profId ;                :first_name ?firstName ;                :last_name ?lastName .   FILTER(?cost < (SELECT AVG(?avgCost) WHERE {?t :cost_of_treatment ?avgCost})) .   ?treatment :professional_id ?profId . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "prompt": " Translate the following question into SPARQL: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?firstName ?lastName WHERE {   ?professional a :professionals .   ?treatment a :treatments .   ?treatment :ref-professional_id ?professional .   ?treatment :cost_of_treatment ?cost .   FILTER(?cost < (SELECT AVG(?c) WHERE {?t :cost_of_treatment ?c })).    ?professional :first_name ?firstName .   ?professional :last_name ?lastName . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "prompt": " Translate the following question into SPARQL: List the date of each treatment, together with the first name of the professional who operated it.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?dateOfTreatment ?firstNameOfProfessional WHERE {   ?t a :treatments .   ?t :ref-professional_id ?p .   ?p :first_name ?firstNameOfProfessional .   ?t :date_of_treatment ?dateOfTreatment . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are the date and the operating professional's first name of each treatment?",
        "prompt": " Translate the following question into SPARQL: What are the date and the operating professional's first name of each treatment?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?date ?firstName WHERE {   ?treatment a :treatments .   ?treatment :date_of_treatment ?date .   ?treatment :ref-professional_id ?professional .   ?professional :first_name ?firstName . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List the cost of each treatment and the corresponding treatment type description.",
        "prompt": " Translate the following question into SPARQL: List the cost of each treatment and the corresponding treatment type description.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?cost ?typeDescription WHERE {   ?treatment a :treatments .   ?treatment :cost_of_treatment ?cost .   ?treatment :ref-treatment_type_code ?typeCode .   ?type a :treatment_types .   ?type :treatment_type_code ?typeCode .   ?type :treatment_type_description ?typeDescription . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are the cost and treatment type description of each treatment?",
        "prompt": " Translate the following question into SPARQL: What are the cost and treatment type description of each treatment?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?cost ?treatment_type_description WHERE {   ?treatment a :treatments .   ?treatment :cost_of_treatment ?cost .   ?treatment :ref-treatment_type_code ?treatment_type_code .   ?treatment_type a :treatment_types .   ?treatment_type :treatment_type_description ?treatment_type_description . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List each owner's first name, last name, and the size of his for her dog.",
        "prompt": " Translate the following question into SPARQL: List each owner's first name, last name, and the size of his for her dog.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name ?last_name ?size_description WHERE {   ?owner a :owners .   ?owner :first_name ?first_name .   ?owner :last_name ?last_name .   ?dog a :dogs .   ?dog :ref-owner_id ?owner .   ?dog :ref-size_code ?size_code .   ?size a :sizes .   ?size :size_code ?size_code .   ?size :size_description ?size_description . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are each owner's first name, last name, and the size of their dog?",
        "prompt": " Translate the following question into SPARQL: What are each owner's first name, last name, and the size of their dog?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?firstName ?lastName ?dogSize WHERE {   ?owner a :owners .   ?owner :first_name ?firstName .   ?owner :last_name ?lastName .   ?dog a :dogs .   ?dog :size_code ?sizeCode .   ?dog :ref-owner_id ?owner .   ?size a :sizes .   ?size :size_code ?sizeCode .   ?size :size_description ?dogSize . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List pairs of the owner's first name and the dogs's name.",
        "prompt": " Translate the following question into SPARQL: List pairs of the owner's first name and the dogs's name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?ownerName ?dogName WHERE {   ?owner :first_name ?ownerName .   ?dog :name ?dogName .   ?dog :ref-owner_id ?owner . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are each owner's first name and their dogs's name?",
        "prompt": " Translate the following question into SPARQL: What are each owner's first name and their dogs's name?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?ownerFirstName ?dogName  WHERE {   ?dog :dogs#ref-owner_id ?owner .   ?owner :owners#first_name ?ownerFirstName .   ?dog :dogs#name ?dogName . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "prompt": " Translate the following question into SPARQL: List the names of the dogs of the rarest breed and the treatment dates of them.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?dogName ?treatmentDate WHERE {   ?dog a :dogs .   ?dog :breed_code ?breed .   ?breed :breed_name ?breedName .   FILTER NOT EXISTS {     ?breed2 a :breeds .     ?breed2 :breed_name ?bName .     FILTER (?breedName != ?bName) }   ?treatment a :treatments .   ?treatment :ref-dog_id ?dog .   ?treatment :date_of_treatment ?treatmentDate .   ?dog :name ?dogName  }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "prompt": " Translate the following question into SPARQL: Which dogs are of the rarest breed? Show their names and treatment dates.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?dog_name ?treatment_date  WHERE {   ?dog a :dogs .   ?dog :breed_code ?breed_code .   ?breed a :breeds .   ?breed :breed_name ?breed_name .   ?size a :sizes .   ?dog :size_code ?size_code .   ?size :size_description ?size_description .   ?treatment a :treatments .   ?treatment :dog_id ?dog .   ?treatment :date_of_treatment ?treatment_date .   ?treatment :treatment_type_code ?treatment_type_code .   FILTER(?breed_code = \"rare\" && ?size_description = \"small\")   BIND(CONCAT(?dog_name, \" (\", ?breed_name, \")\") as ?name) } ORDER BY ?treatment_date"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "prompt": " Translate the following question into SPARQL: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?ownerName ?dogName WHERE {   ?owner :first_name ?ownerName .   ?dog :ref-owner_id ?owner .   ?dog :name ?dogName .   ?owner :state \"Virginia\" . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "prompt": " Translate the following question into SPARQL: Find the first names of owners living in Virginia and the names of dogs they own.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?firstName ?dogName WHERE {   ?owner :first_name ?firstName ;          :owner_id ?ownerID .   ?dog :ref-owner_id ?ownerID ;        :name ?dogName ;        :size_code ?sizeCode .   ?size :size_code ?sizeCode ;         :size_description \"medium\" .   ?owner :state \"Virginia\" . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "prompt": " Translate the following question into SPARQL: What are the arriving date and the departing date of the dogs who have gone through a treatment?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?arriving_date ?departing_date WHERE {     ?dog a :dogs .     ?treatment a :treatments .     ?dog :dog_id ?id .     ?treatment :ref-dog_id ?id .     ?treatment :date_of_treatment ?treatment_date .     ?dog :date_arrived ?arriving_date .     ?dog :date_departed ?departing_date .     FILTER(?treatment_date < ?departing_date && ?treatment_date > ?arriving_date) }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "prompt": " Translate the following question into SPARQL: Find the arriving date and the departing date of the dogs that received a treatment.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?arrivalDate ?departureDate WHERE {   ?treatment a :treatments ;              :ref-dog_id ?dog ;              :date_of_treatment ?date .   ?dog :date_arrived ?arrivalDate ;        :date_departed ?departureDate . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List the last name of the owner owning the youngest dog.",
        "prompt": " Translate the following question into SPARQL: List the last name of the owner owning the youngest dog.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?lastName WHERE {   ?owner :last_name ?lastName .   ?dog :dog_id ?dogId .   ?dog :owner_id ?ownerId .   ?dog :age ?age .   FILTER(?age = (SELECT MIN(?age)                   WHERE { ?dog :age ?age . })) .   FILTER(?ownerId = ?owner :owner_id) . } LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Who owns the youngest dog? Give me his or her last name.",
        "prompt": " Translate the following question into SPARQL: Who owns the youngest dog? Give me his or her last name.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?lastName  WHERE {   ?dog a :dogs .    ?dog :age ?age .   FILTER(?age = (SELECT MIN(?age2) WHERE {?dog2 :age ?age2})) .   ?dog :ref-owner_id ?owner .    ?owner :last_name ?lastName .  }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "prompt": " Translate the following question into SPARQL: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?email_address WHERE {   ?professional a :professionals;                :email_address ?email_address;                :state (\"Hawaii\"^^xsd:string OR \"Wisconsin\"^^xsd:string). }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "prompt": " Translate the following question into SPARQL: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?email WHERE {   ?professional :email_address ?email .   {?professional :state \"Hawaii\"} UNION {?professional :state \"Wisconsin\"} }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are the arriving date and the departing date of all the dogs?",
        "prompt": " Translate the following question into SPARQL: What are the arriving date and the departing date of all the dogs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?date_arrived ?date_departed WHERE {   ?dog a :dogs .   ?dog :date_arrived ?date_arrived .   ?dog :date_departed ?date_departed . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List the arrival date and the departure date for all the dogs.",
        "prompt": " Translate the following question into SPARQL: List the arrival date and the departure date for all the dogs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?arrivalDate ?departureDate WHERE {   ?dog a :dogs ;        :date_arrived ?arrivalDate ;        :date_departed ?departureDate . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "How many dogs went through any treatments?",
        "prompt": " Translate the following question into SPARQL: How many dogs went through any treatments?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?dog) AS ?num_of_dogs) WHERE {   ?treatment :ref-dog_id ?dog . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Count the number of dogs that went through a treatment.",
        "prompt": " Translate the following question into SPARQL: Count the number of dogs that went through a treatment.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(?dog) AS ?numDogs) WHERE {   ?dog a :dogs .   ?treatment a :treatments .   ?treatment :ref-dog_id ?dog .  }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "How many professionals have performed any treatment to dogs?",
        "prompt": " Translate the following question into SPARQL: How many professionals have performed any treatment to dogs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (COUNT(DISTINCT ?professional) AS ?count) WHERE {   ?treatment :ref-professional_id ?professional.   ?treatment :ref-dog_id ?dog.   ?dog :dog_id ?dog_id. }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the number of professionals who have ever treated dogs.",
        "prompt": " Translate the following question into SPARQL: Find the number of professionals who have ever treated dogs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(DISTINCT ?professional) WHERE {   ?treatment :treatments#ref-professional_id ?professional .   FILTER EXISTS {     ?dog :dogs#dog_id ?treatment :treatments#ref-dog_id .   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "prompt": " Translate the following question into SPARQL: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?role ?street ?city ?state  WHERE {   ?p a :professionals .   ?p :role_code ?role .   ?p :street ?street .   ?p :city ?city .   ?p :state ?state .   FILTER (regex(?city, \"West\")) }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "prompt": " Translate the following question into SPARQL: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?role ?street ?city ?state WHERE {     ?professional a :professionals .     ?professional :role_code ?role .     ?professional :street ?street .     ?professional :city ?city .     ?professional :state ?state .     FILTER(CONTAINS(?city, \"West\")) }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "prompt": " Translate the following question into SPARQL: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name ?last_name ?email WHERE {   ?owner :owner_id ?owner_id .   ?owner :first_name ?first_name .   ?owner :last_name ?last_name .   ?owner :email_address ?email .   ?owner :state ?state .   FILTER(CONTAINS(?state, \"North\")) }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "prompt": " Translate the following question into SPARQL: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?first_name ?last_name ?email_address WHERE {   ?owner a :owners ;          :first_name ?first_name ;          :last_name ?last_name ;          :email_address ?email_address ;          :state ?state .   FILTER(contains(?state, \"North\")) }  LIMIT 10"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "How many dogs have an age below the average?",
        "prompt": " Translate the following question into SPARQL: How many dogs have an age below the average?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?dog) as ?count_dogs) WHERE {   ?dog :age ?age .   {     SELECT (AVG(?age) as ?avg_age)      WHERE {       ?dog :age ?age .     }   }   FILTER (?age < ?avg_age) }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Count the number of dogs of an age below the average.",
        "prompt": " Translate the following question into SPARQL: Count the number of dogs of an age below the average.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?dog_id) as ?count WHERE {    ?x :age ?age .    ?y :age ?avg_age .    FILTER(?age < ?avg_age)    ?x :dog_id ?dog_id .    ?x :breed_code ?breed_code .    ?x :size_code ?size_code .    ?x :owner_id ?owner_id .    ?y :dog_id ?dog_id .    ?y :avg_age ?avg_age .    FILTER(?breed_code = 'dogs#breed_code' && ?size_code = 'dogs#size_code' && ?owner_id = 'dogs#owner_id') }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "How much does the most recent treatment cost?",
        "prompt": " Translate the following question into SPARQL: How much does the most recent treatment cost?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT MAX(?cost) as ?most_recent_treatment_cost  WHERE {   ?treatments :cost_of_treatment ?cost .   ?treatments :date_of_treatment ?date .   FILTER(?date = max(?date)) }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Show me the cost of the most recently performed treatment.",
        "prompt": " Translate the following question into SPARQL: Show me the cost of the most recently performed treatment.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?cost_of_treatment WHERE {   ?treatment a :treatments ;              :cost_of_treatment ?cost_of_treatment ;              :date_of_treatment ?date . } ORDER BY DESC(?date) LIMIT 1"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "How many dogs have not gone through any treatment?",
        "prompt": " Translate the following question into SPARQL: How many dogs have not gone through any treatment?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?dog) AS ?numDogs) WHERE {   ?dog rdf:type :dogs .   FILTER NOT EXISTS {      ?treatment rdf:type :treatments .     ?treatment :ref-dog_id ?dog .   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Tell me the number of dogs that have not received any treatment .",
        "prompt": " Translate the following question into SPARQL: Tell me the number of dogs that have not received any treatment .  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?dog) as ?count_dogs_without_treatment WHERE {   ?dog a :dogs.   FILTER NOT EXISTS {?treatment a :treatments; :ref-dog_id ?dog.} }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "How many owners temporarily do not have any dogs?",
        "prompt": " Translate the following question into SPARQL: How many owners temporarily do not have any dogs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?owner) as ?count) WHERE {   ?owner a :owners .   FILTER NOT EXISTS {?dog :dogs#ref-owner_id ?owner} }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the number of owners who do not own any dogs at this moment.",
        "prompt": " Translate the following question into SPARQL: Find the number of owners who do not own any dogs at this moment.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?owner) as ?countOwners)  WHERE {   ?owner a :owners.    FILTER NOT EXISTS {?dog :dogs#ref-owner_id ?owner.} }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "How many professionals did not operate any treatment on dogs?",
        "prompt": " Translate the following question into SPARQL: How many professionals did not operate any treatment on dogs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?p) as ?count) WHERE {   ?p a :professionals .   FILTER NOT EXISTS {     ?t a :treatments .     ?t :ref-professional_id ?p .     ?t :ref-dog_id ?d .     ?d a :dogs   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the number of professionals who have not treated any dogs.",
        "prompt": " Translate the following question into SPARQL: Find the number of professionals who have not treated any dogs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(DISTINCT ?professional) AS ?count) WHERE {   ?professional a :professionals .   FILTER NOT EXISTS {     ?treatment a :treatments .     ?treatment :ref-professional_id ?professional .     ?treatment :ref-dog_id ?dog .     ?dog a :dogs .   } }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "prompt": " Translate the following question into SPARQL: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?age ?weight WHERE {   ?dog a :dogs .   ?dog :abandoned_yn \"1\" .   ?dog :name ?name .   ?dog :age ?age .   ?dog :weight ?weight . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "prompt": " Translate the following question into SPARQL: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name ?age ?weight   WHERE {   ?dog a :dogs .   ?dog :abandoned_yn \"1\" .   ?dog :name ?name .   ?dog :age ?age .   ?dog :weight ?weight . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What is the average age of all the dogs?",
        "prompt": " Translate the following question into SPARQL: What is the average age of all the dogs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?age) AS ?averageAge WHERE {   ?dog a :dogs .   ?dog :age ?age. }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Compute the average age of all the dogs.",
        "prompt": " Translate the following question into SPARQL: Compute the average age of all the dogs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT AVG(?age)  WHERE {   ?dog a :dogs.   ?dog :age ?age. }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What is the age of the oldest dog?",
        "prompt": " Translate the following question into SPARQL: What is the age of the oldest dog?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (MAX(?age) AS ?oldest_age) WHERE {   ?dog a :dogs .   ?dog :age ?age . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Tell me the age of the oldest dog.",
        "prompt": " Translate the following question into SPARQL: Tell me the age of the oldest dog.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT MAX(?age) AS ?oldest_dog_age WHERE {   ?dog a :dogs .   ?dog :age ?age . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "How much does each charge type costs? List both charge type and amount.",
        "prompt": " Translate the following question into SPARQL: How much does each charge type costs? List both charge type and amount.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?chargeType ?chargeAmount WHERE {   ?c a :charges .   ?c :charge_type ?chargeType .   ?c :charge_amount ?chargeAmount . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List each charge type and its amount.",
        "prompt": " Translate the following question into SPARQL: List each charge type and its amount.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?charge_type ?charge_amount WHERE {   ?charge a :charges .   ?charge :charge_type ?charge_type .   ?charge :charge_amount ?charge_amount . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "How much does the most expensive charge type costs?",
        "prompt": " Translate the following question into SPARQL: How much does the most expensive charge type costs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT MAX(?charge_amount) AS ?max_charge WHERE {   ?charge a :charges .   ?charge :charge_amount ?charge_amount . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What is the charge amount of the most expensive charge type?",
        "prompt": " Translate the following question into SPARQL: What is the charge amount of the most expensive charge type?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT (MAX(?charge_amount) AS ?max_charge_amount) WHERE {   ?c a :charges .   ?c :charge_amount ?charge_amount . } "
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List the email, cell phone and home phone of all the professionals.",
        "prompt": " Translate the following question into SPARQL: List the email, cell phone and home phone of all the professionals.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?email ?cell_phone ?home_phone WHERE {   ?professional a :professionals .   ?professional :email_address ?email .   ?professional :cell_number ?cell_phone .   ?professional :home_phone ?home_phone . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are the email, cell phone and home phone of each professional?",
        "prompt": " Translate the following question into SPARQL: What are the email, cell phone and home phone of each professional?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?email ?cell_phone ?home_phone  WHERE {   ?p a :professionals .   ?p :email_address ?email .   ?p :cell_number ?cell_phone .   ?p :home_phone ?home_phone . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are all the possible breed type and size type combinations?",
        "prompt": " Translate the following question into SPARQL: What are all the possible breed type and size type combinations?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?breed_type ?size_type  WHERE {    ?dog rdf:type :dogs .   ?breed rdf:type :breeds .   ?size rdf:type :sizes .   ?dog :ref-breed_code ?breed .   ?dog :ref-size_code ?size .   ?breed :breed_name ?breed_type .   ?size :size_description ?size_type . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "Find the distinct breed type and size type combinations for dogs.",
        "prompt": " Translate the following question into SPARQL: Find the distinct breed type and size type combinations for dogs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?breed_type ?size_type  WHERE {   ?dog :dog_id ?id .   ?dog :ref-breed_code ?breed .   ?breed :breed_name ?breed_type .   ?dog :ref-size_code ?size .   ?size :size_description ?size_type . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "prompt": " Translate the following question into SPARQL: List the first name of all the professionals along with the description of the treatment they have done.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?first_name ?treatment_description WHERE {   ?treatment treatments:ref-professional_id ?professional .   ?professional professionals:first_name ?first_name .   ?treatment treatments:treatment_type_code ?treatment_type .   ?treatment_type treatment_types:treatment_type_description ?treatment_description . }"
    },
    {
        "db_id": "dog_kennels",
        "natural_language_question": "What are each professional's first name and description of the treatment they have performed?",
        "prompt": " Translate the following question into SPARQL: What are each professional's first name and description of the treatment they have performed?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['breeds', 'charges', 'dogs', 'owners', 'professionals', 'sizes', 'treatment_types', 'treatments'], 'object_properties': ['dogs#ref-breed_code', 'dogs#ref-owner_id', 'dogs#ref-size_code', 'treatments#ref-dog_id', 'treatments#ref-professional_id', 'treatments#ref-treatment_type_code'], 'data_properties': ['breeds#breed_code', 'breeds#breed_name', 'charges#charge_amount', 'charges#charge_id', 'charges#charge_type', 'dogs#abandoned_yn', 'dogs#age', 'dogs#breed_code', 'dogs#date_adopted', 'dogs#date_arrived', 'dogs#date_departed', 'dogs#date_of_birth', 'dogs#dog_id', 'dogs#gender', 'dogs#name', 'dogs#owner_id', 'dogs#size_code', 'dogs#weight', 'owners#cell_number', 'owners#city', 'owners#email_address', 'owners#first_name', 'owners#home_phone', 'owners#last_name', 'owners#owner_id', 'owners#state', 'owners#street', 'owners#zip_code', 'professionals#cell_number', 'professionals#city', 'professionals#email_address', 'professionals#first_name', 'professionals#home_phone', 'professionals#last_name', 'professionals#professional_id', 'professionals#role_code', 'professionals#state', 'professionals#street', 'professionals#zip_code', 'sizes#size_code', 'sizes#size_description', 'treatment_types#treatment_type_code', 'treatment_types#treatment_type_description', 'treatments#cost_of_treatment', 'treatments#date_of_treatment', 'treatments#dog_id', 'treatments#professional_id', 'treatments#treatment_id', 'treatments#treatment_type_code']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?firstName ?treatmentDescription WHERE {   ?p rdf:type :professionals.   ?p :first_name ?firstName.   ?t rdf:type :treatments.   ?t :ref-professional_id ?p.   ?t :cost_of_treatment ?costOfTreatment.   ?t :treatment_type_code ?treatmentTypeCode.   ?tt rdf:type :treatment_types.   ?tt :treatment_type_code ?treatmentTypeCode.   ?tt :treatment_type_description ?treatmentDescription. }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "How many singers are there?",
        "prompt": " Translate the following question into SPARQL: How many singers are there?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT (COUNT(?singer) AS ?count) WHERE {   ?singer a :singer . }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What is the count of singers?",
        "prompt": " Translate the following question into SPARQL: What is the count of singers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT COUNT(?singer) WHERE {   ?singer a :singer. }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "List the name of singers in ascending order of net worth.",
        "prompt": " Translate the following question into SPARQL: List the name of singers in ascending order of net worth.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?singer a :singer;           :name ?name;           :net_worth_millions ?worth. } ORDER BY ASC(?worth)"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What are the names of singers ordered by ascending net worth?",
        "prompt": " Translate the following question into SPARQL: What are the names of singers ordered by ascending net worth?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?singer :name ?name ;           :net_worth_millions ?net_worth . } ORDER BY ASC(?net_worth)"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What are the birth year and citizenship of singers?",
        "prompt": " Translate the following question into SPARQL: What are the birth year and citizenship of singers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?birth_year ?citizenship WHERE {   ?singer a :singer .   ?singer :birth_year ?birth_year .   ?singer :citizenship ?citizenship . }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What are the birth years and citizenships of the singers?",
        "prompt": " Translate the following question into SPARQL: What are the birth years and citizenships of the singers?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?birthYear ?citizenship WHERE {   ?singer a :singer .   ?singer :birth_year ?birthYear .   ?singer :citizenship ?citizenship . }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "List the name of singers whose citizenship is not 'France'.",
        "prompt": " Translate the following question into SPARQL: List the name of singers whose citizenship is not 'France'.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?singer a :singer ;           :name ?name ;           :citizenship ?citizenship .   FILTER(?citizenship != 'France') }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What are the names of the singers who are not French citizens?",
        "prompt": " Translate the following question into SPARQL: What are the names of the singers who are not French citizens?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?singer a :singer .   ?singer :name ?name .   FILTER NOT EXISTS {?singer :citizenship \"French\" .} }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "prompt": " Translate the following question into SPARQL: Show the name of singers whose birth year is either 1948 or 1949?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name  WHERE {   ?singer a :singer .   ?singer :name ?name .   ?singer :birth_year ?year .   FILTER (?year = 1948 || ?year = 1949) }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "prompt": " Translate the following question into SPARQL: What are the names of the singers whose birth years are either 1948 or 1949?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?singer a :singer ;           :name ?name ;           :birth_year ?year .   FILTER (?year = 1948 || ?year = 1949) }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What is the name of the singer with the largest net worth?",
        "prompt": " Translate the following question into SPARQL: What is the name of the singer with the largest net worth?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name  WHERE {   ?singer a :singer ;           :name ?name ;           :net_worth_millions ?net_worth .              FILTER NOT EXISTS {     ?otherSinger a :singer ;                  :net_worth_millions ?otherWorth .     FILTER (?otherWorth > ?net_worth)   } }  ORDER BY DESC(?net_worth) LIMIT 1"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What is the name of the singer who is worth the most?",
        "prompt": " Translate the following question into SPARQL: What is the name of the singer who is worth the most?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?singer a :singer ;           :name ?name ;           :net_worth_millions ?worth .   FILTER NOT EXISTS {     ?singer2 a :singer ;              :net_worth_millions ?worth2 .     FILTER (?worth2 > ?worth)   } } ORDER BY DESC(?worth) LIMIT 1"
    },
    {
        "db_id": "singer",
        "natural_language_question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "prompt": " Translate the following question into SPARQL: Show different citizenship of singers and the number of singers of each citizenship.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?citizenship (COUNT(?singer) AS ?num_singers) WHERE {   ?singer a :singer .   ?singer :citizenship ?citizenship . } GROUP BY ?citizenship HAVING (COUNT(?singer) > 1)"
    },
    {
        "db_id": "singer",
        "natural_language_question": "For each citizenship, how many singers are from that country?",
        "prompt": " Translate the following question into SPARQL: For each citizenship, how many singers are from that country?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?citizenship (COUNT(?singer) AS ?count) WHERE {   ?singer :citizenship ?citizenship . } GROUP BY ?citizenship"
    },
    {
        "db_id": "singer",
        "natural_language_question": "Please show the most common citizenship of singers.",
        "prompt": " Translate the following question into SPARQL: Please show the most common citizenship of singers.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?citizenship (COUNT(?citizenship) AS ?count) WHERE {   ?singer a :singer .   ?singer :citizenship ?citizenship . } GROUP BY (?citizenship) ORDER BY DESC(?count) LIMIT 1"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What is the most common singer citizenship ?",
        "prompt": " Translate the following question into SPARQL: What is the most common singer citizenship ?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>   SELECT ?citizenship (COUNT(?citizenship) AS ?count) WHERE {   ?singer a :singer .   ?singer :citizenship ?citizenship . } GROUP BY ?citizenship ORDER BY DESC(?count) LIMIT 1  This query selects the citizenship property for each singer and counts the number of occurrences for each value of citizenship. It then groups the results by citizenship and orders them by the count in descending order. Finally, it returns only the first result with the highest count, which represents the most common citizenship of singers."
    },
    {
        "db_id": "singer",
        "natural_language_question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "prompt": " Translate the following question into SPARQL: Show different citizenships and the maximum net worth of singers of each citizenship.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?citizenship (MAX(?networth) AS ?maxNetWorth) WHERE {   ?singer a :singer ;           :citizenship ?citizenship ;           :net_worth_millions ?networth . } GROUP BY ?citizenship"
    },
    {
        "db_id": "singer",
        "natural_language_question": "For each citizenship, what is the maximum net worth?",
        "prompt": " Translate the following question into SPARQL: For each citizenship, what is the maximum net worth?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?citizenship (MAX(?net_worth) as ?maximumNetWorth) WHERE {   ?singer a :singer .   ?singer :citizenship ?citizenship .   ?singer :net_worth_millions ?net_worth . }  GROUP BY ?citizenship"
    },
    {
        "db_id": "singer",
        "natural_language_question": "Show titles of songs and names of singers.",
        "prompt": " Translate the following question into SPARQL: Show titles of songs and names of singers.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?title ?singerName WHERE {   ?song a :song ;         :title ?title ;         :ref-singer_id ?singer .   ?singer a :singer ;           :name ?singerName . }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What are the song titles and singer names?",
        "prompt": " Translate the following question into SPARQL: What are the song titles and singer names?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?title ?name WHERE {   ?song a :song ;         :title ?title ;         :ref-singer_id ?singer_id .   ?singer a :singer ;           :name ?name ;           :singer_id ?singer_id . }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "Show distinct names of singers that have songs with sales more than 300000.",
        "prompt": " Translate the following question into SPARQL: Show distinct names of singers that have songs with sales more than 300000.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?singerName WHERE {   ?song a :song .   ?song :sales ?sales .   ?song :ref-singer_id ?singer .   ?singer :name ?singerName .      FILTER(?sales > 300000) }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "what are the different names of the singers that have sales more than 300000?",
        "prompt": " Translate the following question into SPARQL: what are the different names of the singers that have sales more than 300000?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?singerName  WHERE {   ?singer :sales ?sales.   ?singer :name ?singerName.   FILTER(?sales > 300000) }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "Show the names of singers that have more than one song.",
        "prompt": " Translate the following question into SPARQL: Show the names of singers that have more than one song.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name WHERE {   ?singer a :singer ;           :name ?name .   {     SELECT ?singer_id (COUNT(?song) AS ?numSongs)     WHERE {       ?song a :song ;             :ref-singer_id ?singer_id .     }     GROUP BY ?singer_id     HAVING (COUNT(?song) > 1)   }   FILTER (?singer = :singer_id) }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What are the names of the singers that have more than one songs?",
        "prompt": " Translate the following question into SPARQL: What are the names of the singers that have more than one songs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?singer_name WHERE {   ?song :song#ref-singer_id ?singer_id .   ?singer :singer#singer_id ?singer_id ;           :singer#name ?singer_name .   {     SELECT ?singer_id (COUNT(?song) AS ?num_songs) WHERE {       ?song :song#ref-singer_id ?singer_id .     }     GROUP BY ?singer_id     HAVING (?num_songs > 1)   } }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "Show the names of singers and the total sales of their songs.",
        "prompt": " Translate the following question into SPARQL: Show the names of singers and the total sales of their songs.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?name (SUM(?sales) as ?totalSales) WHERE {   ?song :song#singer_id ?singer .   ?singer :singer#name ?name .   ?song :song#sales ?sales . } GROUP BY ?name"
    },
    {
        "db_id": "singer",
        "natural_language_question": "For each singer name, what is the total sales for their songs?",
        "prompt": " Translate the following question into SPARQL: For each singer name, what is the total sales for their songs?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?singerName (SUM(?songSales) AS ?totalSales) WHERE {   ?singer :name ?singerName ;           :singer_id ?singerId .   ?song :singer_id ?singerId ;         :sales ?songSales . } GROUP BY ?singerName"
    },
    {
        "db_id": "singer",
        "natural_language_question": "List the name of singers that do not have any song.",
        "prompt": " Translate the following question into SPARQL: List the name of singers that do not have any song.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?singerName WHERE {   ?singer a :singer .   FILTER NOT EXISTS {     ?song a :song .     ?song :song#ref-singer_id ?singer .   }   ?singer :singer#name ?singerName . }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What is the sname of every sing that does not have any song?",
        "prompt": " Translate the following question into SPARQL: What is the sname of every sing that does not have any song?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT ?sname WHERE {   ?s a :singer .   ?s :name ?sname .   FILTER NOT EXISTS {?song a :song .                      ?song :ref-singer_id ?s .                     } }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "prompt": " Translate the following question into SPARQL: Show the citizenship shared by singers with birth year before 1945 and after 1955.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?citizenship WHERE {   ?a :birth_year ?by .   ?a :citizenship ?citizenship .   FILTER ((?by < 1945) || (?by > 1955))   ?b :ref-singer_id ?a . }"
    },
    {
        "db_id": "singer",
        "natural_language_question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "prompt": " Translate the following question into SPARQL: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['singer', 'song'], 'object_properties': ['song#ref-singer_id'], 'data_properties': ['singer#birth_year', 'singer#citizenship', 'singer#name', 'singer#net_worth_millions', 'singer#singer_id', 'song#highest_position', 'song#sales', 'song#singer_id', 'song#song_id', 'song#title']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?citizenship WHERE {   ?singer :birth_year ?year .   ?singer :citizenship ?citizenship .   FILTER (?year < 1945 || ?year > 1955) .   {     SELECT ?singer     WHERE {       ?song :ref-singer_id ?singer .     }   } }"
    },
    {
        "db_id": "real_estate_properties",
        "natural_language_question": "How many available features are there in total?",
        "prompt": " Translate the following question into SPARQL: How many available features are there in total?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['other_available_features', 'other_property_features', 'properties', 'ref_feature_types', 'ref_property_types'], 'object_properties': ['other_available_features#ref-feature_type_code', 'other_property_features#ref-feature_id', 'other_property_features#ref-property_id', 'properties#ref-property_type_code'], 'data_properties': ['other_available_features#feature_description', 'other_available_features#feature_id', 'other_available_features#feature_name', 'other_available_features#feature_type_code', 'other_property_features#feature_id', 'other_property_features#property_feature_description', 'other_property_features#property_id', 'properties#agreed_selling_price', 'properties#apt_feature_1', 'properties#apt_feature_2', 'properties#apt_feature_3', 'properties#buyer_offered_price', 'properties#date_on_market', 'properties#date_sold', 'properties#fld_feature_1', 'properties#fld_feature_2', 'properties#fld_feature_3', 'properties#hse_feature_1', 'properties#hse_feature_2', 'properties#hse_feature_3', 'properties#oth_feature_1', 'properties#oth_feature_2', 'properties#oth_feature_3', 'properties#other_property_details', 'properties#property_address', 'properties#property_id', 'properties#property_name', 'properties#property_type_code', 'properties#room_count', 'properties#shp_feature_1', 'properties#shp_feature_2', 'properties#shp_feature_3', 'properties#vendor_requested_price', 'ref_feature_types#feature_type_code', 'ref_feature_types#feature_type_name', 'ref_property_types#property_type_code', 'ref_property_types#property_type_description']} ",
        "predicted_sparql": "PREFIX :<http://valuenet/ontop/>  SELECT (COUNT(?available_feature) AS ?total_available_features)  WHERE {?available_feature a :other_available_features .}"
    },
    {
        "db_id": "real_estate_properties",
        "natural_language_question": "What is the feature type name of feature AirCon?",
        "prompt": " Translate the following question into SPARQL: What is the feature type name of feature AirCon?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['other_available_features', 'other_property_features', 'properties', 'ref_feature_types', 'ref_property_types'], 'object_properties': ['other_available_features#ref-feature_type_code', 'other_property_features#ref-feature_id', 'other_property_features#ref-property_id', 'properties#ref-property_type_code'], 'data_properties': ['other_available_features#feature_description', 'other_available_features#feature_id', 'other_available_features#feature_name', 'other_available_features#feature_type_code', 'other_property_features#feature_id', 'other_property_features#property_feature_description', 'other_property_features#property_id', 'properties#agreed_selling_price', 'properties#apt_feature_1', 'properties#apt_feature_2', 'properties#apt_feature_3', 'properties#buyer_offered_price', 'properties#date_on_market', 'properties#date_sold', 'properties#fld_feature_1', 'properties#fld_feature_2', 'properties#fld_feature_3', 'properties#hse_feature_1', 'properties#hse_feature_2', 'properties#hse_feature_3', 'properties#oth_feature_1', 'properties#oth_feature_2', 'properties#oth_feature_3', 'properties#other_property_details', 'properties#property_address', 'properties#property_id', 'properties#property_name', 'properties#property_type_code', 'properties#room_count', 'properties#shp_feature_1', 'properties#shp_feature_2', 'properties#shp_feature_3', 'properties#vendor_requested_price', 'ref_feature_types#feature_type_code', 'ref_feature_types#feature_type_name', 'ref_property_types#property_type_code', 'ref_property_types#property_type_description']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT ?name WHERE {   ?feature a :other_available_features .   ?feature :feature_type_code ?code .   ?type a :ref_feature_types .   ?type :feature_type_code ?code .   ?type :feature_type_name ?name .   FILTER (?feature=:AirCon) }"
    },
    {
        "db_id": "real_estate_properties",
        "natural_language_question": "Show the property type descriptions of properties belonging to that code.",
        "prompt": " Translate the following question into SPARQL: Show the property type descriptions of properties belonging to that code.  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['other_available_features', 'other_property_features', 'properties', 'ref_feature_types', 'ref_property_types'], 'object_properties': ['other_available_features#ref-feature_type_code', 'other_property_features#ref-feature_id', 'other_property_features#ref-property_id', 'properties#ref-property_type_code'], 'data_properties': ['other_available_features#feature_description', 'other_available_features#feature_id', 'other_available_features#feature_name', 'other_available_features#feature_type_code', 'other_property_features#feature_id', 'other_property_features#property_feature_description', 'other_property_features#property_id', 'properties#agreed_selling_price', 'properties#apt_feature_1', 'properties#apt_feature_2', 'properties#apt_feature_3', 'properties#buyer_offered_price', 'properties#date_on_market', 'properties#date_sold', 'properties#fld_feature_1', 'properties#fld_feature_2', 'properties#fld_feature_3', 'properties#hse_feature_1', 'properties#hse_feature_2', 'properties#hse_feature_3', 'properties#oth_feature_1', 'properties#oth_feature_2', 'properties#oth_feature_3', 'properties#other_property_details', 'properties#property_address', 'properties#property_id', 'properties#property_name', 'properties#property_type_code', 'properties#room_count', 'properties#shp_feature_1', 'properties#shp_feature_2', 'properties#shp_feature_3', 'properties#vendor_requested_price', 'ref_feature_types#feature_type_code', 'ref_feature_types#feature_type_name', 'ref_property_types#property_type_code', 'ref_property_types#property_type_description']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/> SELECT DISTINCT ?propTypeDesc  WHERE {        ?prop a :properties .       ?prop :ref-property_type_code ?propTypeCode .       ?pt a :ref_property_types .       ?pt :property_type_description ?propTypeDesc .       FILTER(?pt :property_type_code = ?propTypeCode)       FILTER(?prop = <<insert property code here>>) }"
    },
    {
        "db_id": "real_estate_properties",
        "natural_language_question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "prompt": " Translate the following question into SPARQL: What are the names of properties that are either houses or apartments with more than 1 room?  The prefix for the queries is: PREFIX : <http://valuenet/ontop/>\".  Use the following ontology:{'classes': ['other_available_features', 'other_property_features', 'properties', 'ref_feature_types', 'ref_property_types'], 'object_properties': ['other_available_features#ref-feature_type_code', 'other_property_features#ref-feature_id', 'other_property_features#ref-property_id', 'properties#ref-property_type_code'], 'data_properties': ['other_available_features#feature_description', 'other_available_features#feature_id', 'other_available_features#feature_name', 'other_available_features#feature_type_code', 'other_property_features#feature_id', 'other_property_features#property_feature_description', 'other_property_features#property_id', 'properties#agreed_selling_price', 'properties#apt_feature_1', 'properties#apt_feature_2', 'properties#apt_feature_3', 'properties#buyer_offered_price', 'properties#date_on_market', 'properties#date_sold', 'properties#fld_feature_1', 'properties#fld_feature_2', 'properties#fld_feature_3', 'properties#hse_feature_1', 'properties#hse_feature_2', 'properties#hse_feature_3', 'properties#oth_feature_1', 'properties#oth_feature_2', 'properties#oth_feature_3', 'properties#other_property_details', 'properties#property_address', 'properties#property_id', 'properties#property_name', 'properties#property_type_code', 'properties#room_count', 'properties#shp_feature_1', 'properties#shp_feature_2', 'properties#shp_feature_3', 'properties#vendor_requested_price', 'ref_feature_types#feature_type_code', 'ref_feature_types#feature_type_name', 'ref_property_types#property_type_code', 'ref_property_types#property_type_description']} ",
        "predicted_sparql": "PREFIX : <http://valuenet/ontop/>  SELECT DISTINCT ?propertyName WHERE {   ?s :property_type_code ?propertyType .   ?s :room_count ?roomCount .   ?s :property_name ?propertyName .   FILTER((?propertyType = \"H\" || ?propertyType = \"A\") && ?roomCount > 1) }"
    }
]